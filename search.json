[{"title":"Hello World（测试用）","url":"/hello-world/","content":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo<i class=\"fa fa-external-link-alt\"></i></span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation<i class=\"fa fa-external-link-alt\"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting<i class=\"fa fa-external-link-alt\"></i></span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment<i class=\"fa fa-external-link-alt\"></i></span></p>\n"},{"title":"Hexo 使用（待完善）","url":"/hexo/","content":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">开始使用<i class=\"fa fa-external-link-alt\"></i></span></h2><h3 id=\"什么是-Hexo\"><a href=\"#什么是-Hexo\" class=\"headerlink\" title=\"什么是 Hexo\"></a>什么是 Hexo</h3><p>hexo 是一个快速、简洁且高效的博客框架。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在 Node.js 12+ 环境下（此处可折叠的 Node.js 环境配置过程）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>依次执行以下命令，以创建并初始化项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>得到以下结构目录：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\"><span class=\"string\">|   ├── _drafts</span></span><br><span class=\"line\"><span class=\"string\">|   └── _posts</span></span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>_config.yml</code> Hexo 配置</li>\n<li><code>source</code> 文章</li>\n<li><code>scaffolds</code> 模板</li>\n<li><code>themes</code> 已安装的主题，也可能在模块目录下</li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p><code>_config.yml</code> 内大部分配置都可以修改。<br>修改配置后，需要重启项目以生效。</p>\n<h4 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h4><ul>\n<li><code>title</code> 博客标题，显示在首页标签栏、边栏顶部</li>\n<li><code>subtitle</code> 博客副标题，显示在边栏顶部，网站标题下方</li>\n<li><code>description</code> 显示在导航栏作者描述中，主要用于SEO，告诉搜索引擎此站点的描述信息</li>\n<li><code>keywords</code> 网站的关键字，用于 SEO？格式为</li>\n<li><code>author</code> 用于主题，显示文章作者，显示在导航栏、版权栏</li>\n<li><code>language</code> 可能的值如 <code>zh-CN</code>、<code>zh-Hans</code></li>\n<li><code>timezon</code> 默认使用当前电脑时区，可用 <code>America/New_York</code>、<code>Japan</code>、<code>Asia/Shanghai</code> 等</li>\n</ul>\n<h4 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h4><ul>\n<li><code>url</code> 博客主域名</li>\n<li><code>root</code> 博客基于主域名的根路径</li>\n<li><code>permalink</code> 文章的永久链接路径构成，默认年月日</li>\n<li><code>permalink_defaults</code> 永久链接中各部分的默认值</li>\n<li><code>prettey_urls</code> 美化</li>\n<li><code>pretty_urls.trailing_index</code> 是否保留链接尾部的 <code>index.html</code></li>\n<li><code>pretty_urls.trailing_html</code> 是否保留链接尾部的 <code>.html</code><br>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</li>\n</ul>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><ul>\n<li><code>source_dir</code> 存放主要内容，默认 <code>source</code></li>\n<li><code>public_dir</code> 存放生成的站点文件，默认 <code>public</code></li>\n<li><code>tag_dir</code> 标签</li>\n<li><code>archive_dir</code> 归档</li>\n<li><code>category_dir</code> 分类</li>\n<li><code>code_dir</code> 代码目录？</li>\n<li><code>i18n_dir</code> 国际化</li>\n<li><code>skip_render</code> 跳过指定文件渲染，匹配到的文件将原样复制到 <code>public</code> 目录中</li>\n</ul>\n<h4 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h4><ul>\n<li><code>new_post_name</code> 新文章标题</li>\n<li><code>default_layout</code> 默认布局</li>\n<li><code>auto_spacing</code> 中英之间的空格，不生效？</li>\n<li><code>titlecase</code> 将标题转换为标题样式（首字母大写？）</li>\n<li><code>external_link</code> 打开链接方式</li>\n<li><code>external_link.enable</code> 在新标签中打开链接</li>\n<li><code>external_link.field</code> 作用范围，<code>site</code> 网站内生效，<code>post</code> 文章内生效</li>\n<li><code>external_link.exclude</code> 排除域名</li>\n<li><code>filename_case</code> 文件名转换为 <code>1</code> 小写，<code>2</code> 大写</li>\n<li><code>render_drafts</code> 渲染草稿（草稿是一种文章类型？）</li>\n<li><code>post_asset_folder</code> 启用全局资源目录？</li>\n<li><code>relative_link</code> 生成相对链接（去除主域名部分）</li>\n<li><code>future</code> 未来是一种文章类型？</li>\n<li><code>highlight</code> 代码块设置，见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvc3ludGF4LWhpZ2hsaWdodCNIaWdobGlnaHQtanM=\">Highlight.js<i class=\"fa fa-external-link-alt\"></i></span>配置</li>\n<li><code>prismjs</code> 代码块设置，见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvc3ludGF4LWhpZ2hsaWdodCNQcmlzbUpT\">PrismJS<i class=\"fa fa-external-link-alt\"></i></span>配置</li>\n</ul>\n<h4 id=\"分类-amp-标签\"><a href=\"#分类-amp-标签\" class=\"headerlink\" title=\"分类&amp;标签\"></a>分类&amp;标签</h4><ul>\n<li><code>default_category</code> 默认未分类</li>\n<li><code>category_map</code> 分类别名</li>\n<li><code>tag_map</code> 标签别名</li>\n</ul>\n<h4 id=\"日期、时间格式\"><a href=\"#日期、时间格式\" class=\"headerlink\" title=\"日期、时间格式\"></a>日期、时间格式</h4><p>hexo 使用 <code>Moment.js</code> 来解析和显示时间。</p>\n<ul>\n<li><code>date_format</code> 日期格式</li>\n<li><code>time_format</code> 时间格式</li>\n<li><code>updated_option</code> 当 Front Matter 中未指定 <code>updated</code> 时的取值<ul>\n<li><code>mtime</code> 使用最后修改时间</li>\n<li><code>date</code> 使用日期</li>\n<li><code>empty</code> 删除此项</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h4><ul>\n<li><code>per_page</code> 每页显示的文章量，<code>0</code> 表示关闭分页</li>\n<li><code>pagination_dir</code> 分页目录？</li>\n</ul>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><ul>\n<li><code>theme</code> 当前主题，<code>false</code> 表示禁用主题</li>\n<li><code>theme_config</code> 主题配置，会覆盖 Hexo 配置</li>\n<li><code>deploy</code> 部署相关</li>\n<li><code>meta_generator</code> 元数据标签，<code>false</code> 时不生成</li>\n</ul>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<p>新建网站，未提供 <code>folder</code> 时在当前目录下进行，主要执行以下步骤：</p>\n<ol>\n<li>克隆 <code>hexo-start</code> 和 <code>hexo-theme-landscape</code> 到项目中；</li>\n<li>使用包管理器下载依赖。</li>\n</ol>\n<h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建文章，未提供 <code>layout</code> 时使用 <code>_config.yml</code> 的 <code>default_layout</code>。<br>标题含有空格时，应使用引号包裹。</p>\n<p>参数表：</p>\n<ul>\n<li><code>-p</code>, <code>--path</code> 自定义新文章路径</li>\n<li><code>-r</code>, <code>--replace</code> 若存在同名文章则替换之</li>\n<li><code>-s</code>, <code>--slug</code> 文章的 Slug，将作为新文章的文件名和发布后的 URL</li>\n</ul>\n<p>默认情况下使用文章标题来生成文章名及路径。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new page -p about/me <span class=\"string\">&quot;About me&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上命令创建一个 <code>source/about/me.md</code> 文件，使用 <code>page</code> 布局，Front Matter 内 <code>title</code> 值为 <code>About me</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new page -p about/me</span><br></pre></td></tr></table></figure>\n\n<p>以上命令未提供标题，将创建 <code>source/about/me.md</code>，同时 <code>title</code> 值为 <code>page</code>，并采用默认布局</p>\n<h3 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a>生成</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate <span class=\"comment\"># 简写 hexo g</span></span><br></pre></td></tr></table></figure>\n\n<p>生成静态文件。</p>\n<p>参数表：</p>\n<ul>\n<li><code>-d</code>, <code>--deploy</code> 生成后立即部署</li>\n<li><code>-w</code>, <code>--watch</code> 监视文件变动</li>\n<li><code>-b</code>, <code>--bail</code> 生成过程中若发生未处理异常，则抛出异常</li>\n<li><code>-f</code>, <code>--force</code> 强制重新生成，默认若 <code>public</code> 目录存在，则只生成改动的文件，此参数效果接近 <code>hexo clean &amp;&amp; hexo g</code></li>\n<li><code>-c</code>, <code>--concurrency</code> 最大同时生成文件限制，默认无限制</li>\n</ul>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>发表草稿？</p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>启动服务器，默认通过 <code>http://localhost:4000/</code> 访问。</p>\n<p>参数表：</p>\n<ul>\n<li><code>-p</code>, <code>--port</code> 指定端口</li>\n<li><code>-s</code>, <code>--static</code> 只使用静态文件</li>\n<li><code>-l</code>, <code>--log</code> 启动日志，使用覆盖记录格式？</li>\n</ul>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy <span class=\"comment\"># 简写 hexo d</span></span><br></pre></td></tr></table></figure>\n\n<p>参数表：</p>\n<ul>\n<li><code>-g</code>, <code>--generate</code> 部署前预生成静态文件</li>\n</ul>\n<h3 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>渲染目标文件。</p>\n<p>参数表：</p>\n<ul>\n<li><code>-o</code>, <code>--output</code> 指定输出路径。</li>\n</ul>\n<h3 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;<span class=\"built_in\">type</span>&gt;`</span><br></pre></td></tr></table></figure>\n\n<p>从其它博客系统迁移内容。</p>\n<h3 id=\"清理\"><a href=\"#清理\" class=\"headerlink\" title=\"清理\"></a>清理</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存文件 <code>db.json</code> 和已生成的静态文件 <code>public</code>。<br>有时更改主题后，站点可能不生效，则或许需要清理。</p>\n<h3 id=\"清单\"><a href=\"#清单\" class=\"headerlink\" title=\"清单\"></a>清单</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;<span class=\"built_in\">type</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列出网站基本资料。</p>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>显示 Hexo 版本。</p>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><p>使用 <code>hexo new [layout] &lt;title&gt;</code> 可创建一篇新文章或新页面。</p>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><p>默认有三种布局 <code>post</code>、<code>page</code>、<code>draft</code>，分别保存在 <code>source/_posts</code>、<code>source</code>、<code>source/_drafts</code> 目录下。</p>\n<p>其它自定义布局也将保存在 <code>source/_posts</code> 目录下？</p>\n<h3 id=\"分类和标签\"><a href=\"#分类和标签\" class=\"headerlink\" title=\"分类和标签\"></a>分类和标签</h3><p>只有文章支持分类和标签，即 <code>_posts</code> 下的内容。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>分类示例</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">categories:</span><br><span class=\"line\">- Diary</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- PS3</span><br><span class=\"line\">- Games</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签插件\"><a href=\"#标签插件\" class=\"headerlink\" title=\"标签插件\"></a>标签插件</h2><p>Hexo 可以通过标签插件语法，添加各种格式的块，基础语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% xx a b c %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endxx %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样一个块中，块的类型是 <code>xx</code>，<code>a b c</code> 是此类型块可使用的参数。<br>块的类型应通过主题、插件等方式指明，否则 Hexo 在遇到不认识的类型时，将报错。</p>\n<p>如下面是使用标签插件制作的代码块，但似乎不支持语法高亮？并且普通代码块也提供一系列参数？</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock <span class=\"selector-attr\">[title]</span> <span class=\"selector-attr\">[lang:language]</span> <span class=\"selector-attr\">[url]</span> <span class=\"selector-attr\">[link text]</span> <span class=\"selector-attr\">[additional options]</span> %&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">code</span> snippet</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight clean\"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">code</span> snippet</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>_.compact</span><span class=\"exturl\" data-url=\"aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvI2NvbXBhY3Q=\">Underscore.js<i class=\"fa fa-external-link-alt\"></i></span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">_.<span class=\"title function_\">compact</span>([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"想知道\"><a href=\"#想知道\" class=\"headerlink\" title=\"想知道\"></a>想知道</h2><ul>\n<li>Hexo 的工作流程？如何渲染文档？</li>\n<li>如何限制首页的内容数量？<br>使用 <code>&lt;!-- more --&gt;</code> 标签，标志出摘要部分，此标签前的内容将显示在主页，之后内容显示在正文中。<br>因此写文章养成习惯，标题通过 title 指定，在 <code>---</code> 与 <code>&lt;!-- more --&gt;</code> 之间的内容作为摘要。<br>先写摘要，再开始正文。</li>\n<li>Next 主界面的动画太慢了，如何加快？</li>\n</ul>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><h3 id=\"文章的基本分类\"><a href=\"#文章的基本分类\" class=\"headerlink\" title=\"文章的基本分类\"></a>文章的基本分类</h3><p>Post 是文章（日志），而 Page 是页面？</p>\n<p>日志以年月日构成路径，并统一放置在 <code>_posts</code> 目录下？可能有重名问题？</p>\n<p>页面以 <code>source</code> 下的目录构成路径，将文章直接放入即可自动构成路径。但无法前后跳转？</p>\n<p>因此页面可以是原生的？比如指定不渲染后，用于展示的专用页面？</p>\n<p>也因此页面不会加入导航结构？而需要专门添加链接？即默认是隐藏的？</p>\n<p>能否在左边栏显示路径结构？</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>文章都写在 Post 里的话，如何优化整个博客网站的导航系统？能否添加中文搜索功能？</p>\n<p>干脆基于 NexT 主题官网，修改默认语言，据此来写文章？</p>\n<p>疑似翻译器不稳定？</p>\n","categories":["关于博客"],"tags":["Hexo","教程手册"]},{"title":"Getting Started（测试用）","url":"/index/","content":"<h3 id=\"Hexo-Installation\"><a href=\"#Hexo-Installation\" class=\"headerlink\" title=\"Hexo Installation\"></a>Hexo Installation</h3><p>If this is your first time using Hexo, you can take some time to review the Hexo Docs to see <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">how to install Hexo<i class=\"fa fa-external-link-alt\"></i></span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2V0dXA=\">initialize a site<i class=\"fa fa-external-link-alt\"></i></span>. After the installation is successful, you should be able to execute <code>hexo</code> (or <code>npx hexo</code>) on the command line, and there must be <code>package.json</code>, <code>source</code>, <code>themes</code> and other directories in your <mark class=\"label info\">site root directory</mark>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">_config.yml  node_modules  package-lock.json  package.json  scaffolds  <span class=\"built_in\">source</span>  themes</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>If you are new to Node.js or Hexo, you can also modify the source code of an existing Hexo website instead of creating a new one, to help you understand how Hexo works. In fact, the document you are reading is generated by Hexo with NexT, and you can install it with the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/next-theme/theme-next-docs</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> theme-next-docs</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>Make sure that you have installed Hexo and created a site with it successfully, because the following documents require you to operate in the <mark class=\"label info\">site root directory</mark>.</p>\n<h3 id=\"NexT-Installation\"><a href=\"#NexT-Installation\" class=\"headerlink\" title=\"NexT Installation\"></a>NexT Installation</h3><p>The detailed steps to install or upgrade the theme are as follows.</p>\n<h4 id=\"Downloading-NexT\"><a href=\"#Downloading-NexT\" class=\"headerlink\" title=\"Downloading NexT\"></a>Downloading NexT</h4><p>It&#39;s easy to install Hexo theme: you can choose to install the theme through npm, or download the source code of the theme in the <code>themes</code> directory under <mark class=\"label info\">site root directory</mark>.</p>\n<div class=\"tabs\" id=\"downloading-next\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#downloading-next-1\">Using <code>npm</code></a></li><li class=\"tab\"><a href=\"#downloading-next-2\">Using <code>git</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"downloading-next-1\"><p>If you&#39;re using Hexo 5.0 or later, the simplest way to install is through npm.</p>\n<p>Open your Terminal, change to Hexo <mark class=\"label info\">site root directory</mark> and install NexT theme:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"downloading-next-2\"><p>If you know about <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS8=\">Git<i class=\"fa fa-external-link-alt\"></i></span>, you can clone the whole repository and update it in any time with <code>git pull</code> command instead of downloading archive manually.</p>\n<p>Open your terminal, change to Hexo <mark class=\"label info\">site root directory</mark> and clone the latest master branch of NexT theme:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div></div></div>\n\n<div class=\"note primary\"><p>You can also read <a href=\"/docs/getting-started/installation.html\">detailed installation instructions</a> if you want any other installation variant.</p>\n</div>\n\n<h4 id=\"Upgrading-NexT\"><a href=\"#Upgrading-NexT\" class=\"headerlink\" title=\"Upgrading NexT\"></a>Upgrading NexT</h4><p>A new version of NexT will be released every month. Please read the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L3JlbGVhc2Vz\">release notes<i class=\"fa fa-external-link-alt\"></i></span> before updating the theme. You can update NexT by the following command.</p>\n<div class=\"tabs\" id=\"upgrading-next\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#upgrading-next-1\">Using <code>npm</code></a></li><li class=\"tab\"><a href=\"#upgrading-next-2\">Using <code>git</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"upgrading-next-1\"><p>Install the latest version through npm:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"upgrading-next-2\"><p>Or update to the latest master branch:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ git pull origin master</span><br></pre></td></tr></table></figure>\n\n<p>When running <code>git pull</code>, you can bypass merge conflicts (error message like <strong>«Commit your changes or stash them before you can merge»</strong>) by using the <code>Commit</code>, <code>Stash</code> or <code>Reset</code> commands for local changes. See <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE1NzQ1NDI0LzU4NjE0OTU=\">here<i class=\"fa fa-external-link-alt\"></i></span> how to do it.</p></div></div></div>\n\n<div class=\"note warning\"><p>If you are still using NexT version 5 or 7, you can read <a href=\"/docs/getting-started/upgrade.html\">instructions for upgrading from legacy version</a>.</p>\n</div>\n\n<h3 id=\"Configuration-Files\"><a href=\"#Configuration-Files\" class=\"headerlink\" title=\"Configuration Files\"></a>Configuration Files</h3><p>After the installation of Hexo and NexT, you may found that there are two configuration files using by Hexo and both called <code>_config.yml</code>:</p>\n<ol>\n<li>The first one is under <mark class=\"label info\">site root directory</mark>, which contains Hexo&#39;s config.</li>\n<li>The second one is under <mark class=\"label primary\">theme root directory</mark> (e.g. <code>themes/next/_config.yml</code> or <code>node_modules/hexo-theme-next/_config.yml</code>), which is provided by NexT and contains theme&#39;s config.</li>\n</ol>\n<p>Let&#39;s call the first one – <mark class=\"label info\">Hexo config file</mark>, and the second one – <mark class=\"label primary\">NexT config file</mark>.</p>\n<div class=\"note warning\"><p>However, we do not recommend directly modifying the <mark class=\"label primary\">NexT config file</mark>. It is quite often running into conflict status when updating NexT theme via <code>git pull</code>, or need to merge configurations manually when upgrading to new releases. For the theme installed through npm, it is also difficult to modify the <mark class=\"label primary\">NexT config file</mark> in <code>node_modules</code>.</p>\n<p>In order to resolve this issue, we recommend using the <a href=\"/docs/getting-started/configuration.html\">Alternate Theme Config</a> feature to configure theme NexT.</p>\n</div>\n\n<h3 id=\"Hexo-Configuration\"><a href=\"#Hexo-Configuration\" class=\"headerlink\" title=\"Hexo Configuration\"></a>Hexo Configuration</h3><p>The following settings in <mark class=\"label info\">Hexo config file</mark> are very helpful for optimizing your website.</p>\n<h4 id=\"Configuring-Author\"><a href=\"#Configuring-Author\" class=\"headerlink\" title=\"Configuring Author\"></a>Configuring Author</h4><p>Edit <mark class=\"label info\">Hexo config file</mark> and set the value of <code>author</code> to your nickname.</p>\n<figure class=\"highlight yml\"><figcaption><span>Hexo config file</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">author:</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Configuring-Description\"><a href=\"#Configuring-Description\" class=\"headerlink\" title=\"Configuring Description\"></a>Configuring Description</h4><p>Edit <mark class=\"label info\">Hexo config file</mark> and set the value of <code>description</code> to your description, which can be a sentence you like.</p>\n<figure class=\"highlight yml\"><figcaption><span>Hexo config file</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">description:</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Enabling-NexT\"><a href=\"#Enabling-NexT\" class=\"headerlink\" title=\"Enabling NexT\"></a>Enabling NexT</h4><p>Like all Hexo themes, after you download it, open <mark class=\"label info\">Hexo config file</mark>, find <code>theme</code> option, and change its value to <code>next</code> (or another theme directory name).</p>\n<figure class=\"highlight yml\"><figcaption><span>Hexo config file</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>Now you have installed NexT theme and enabled it. The following steps will help you verify whether NexT is enabled correctly.</p>\n<h3 id=\"Checking-NexT\"><a href=\"#Checking-NexT\" class=\"headerlink\" title=\"Checking NexT\"></a>Checking NexT</h3><p>It&#39;s recommended to use <code>hexo clean</code> to clean Hexo&#39;s cache first.<br>Then start Hexo local server with debug parameter (by adding <code>--debug</code>), the whole command is <code>hexo s --debug</code>. You can see the output while running, and if you find problem, you can use the output to help others locate error better. When it prints:</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running <span class=\"keyword\">at</span> <span class=\"keyword\">http</span>://localhost:<span class=\"number\">4000</span>/. Press Ctrl+C <span class=\"built_in\">to</span> <span class=\"built_in\">stop</span>.</span><br></pre></td></tr></table></figure>\n\n<p>Now you can open <code>http://localhost:4000</code> in your browser, and check whether the site works correctly.</p>\n<div class=\"note success\"><p>If you find your site looks like this picture, you have installed it correctly. That&#39;s default NexT scheme – Muse.<br><img src=\"https://theme-next.js.org/images/next-default-scheme.png\" alt=\"Default Scheme – Muse\" loading=\"lazy\"></p>\n</div>\n\n<p>After that we can <a href=\"/docs/getting-started/deployment.html\">configure deployment</a>.</p>\n<p>If everything is OK, in next steps we will change some settings including <a href=\"/docs/theme-settings/\">personalization</a> and <a href=\"/docs/third-party-services/\">third-party services integration</a>.</p>\n"},{"title":"Hi（测试用）","url":"/hi/","content":"<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock _.compact ht<span class=\"symbol\">tp:</span>//underscorejs.org/#compact Underscore.js %&#125;</span><br><span class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"built_in\">false</span>, <span class=\"number\">2</span>, &#x27;&#x27;, <span class=\"number\">3</span>]);</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight excel\"><figcaption><span>_.compact</span><span class=\"exturl\" data-url=\"aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvI2NvbXBhY3Q=\">Underscore.js<i class=\"fa fa-external-link-alt\"></i></span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"built_in\">false</span>, <span class=\"number\">2</span>, &#x27;&#x27;, <span class=\"number\">3</span>]);</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>_.compact</span><span class=\"exturl\" data-url=\"aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvI2NvbXBhY3Q=\">Underscore.js<i class=\"fa fa-external-link-alt\"></i></span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">_.<span class=\"title function_\">compact</span>([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n"},{"title":"Markdown 语法参考","url":"/md/","content":"<h2 id=\"行级元素\"><a href=\"#行级元素\" class=\"headerlink\" title=\"行级元素\"></a>行级元素</h2><p>正文<strong>加粗</strong><code>代码</code><kbd>按钮</kbd><em>倾斜</em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iaW5nLmNvbS8=\">外部链接<i class=\"fa fa-external-link-alt\"></i></span><a href=\"#%E5%85%B6%E5%AE%83\">文内锚点</a><img src=\"https://tinypng.com/images/panda-happy.png\" alt=\"图片链接\" loading=\"lazy\">脚注[^1]</p>\n<hr>\n<h2 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h2><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><blockquote>\n<p>引用块</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码块</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>无序列表项</li>\n<li>无序列表项</li>\n</ul>\n<ol>\n<li>有序列表项</li>\n<li>有序列表项</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">标题</th>\n<th>标题</th>\n<th>标题</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">内容</td>\n<td>内容</td>\n<td>内容</td>\n</tr>\n</tbody></table>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> done</li>\n<li><input disabled=\"\" type=\"checkbox\"> todo</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">graph TD</span><br><span class=\"line\"></span><br><span class=\"line\">A --&gt; B</span><br></pre></td></tr></table></figure>\n\n<p>[^1] 这是脚注内容</p>\n","categories":["工具"],"tags":["语法参考"]},{"title":"NexT 主题使用（待完善）","url":"/next/","content":"<h2 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h2><p>在具体项目下通过 npm 安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> site</span><br><span class=\"line\">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>\n\n<p>修改 hexo 配置以启用 NexT 主题：</p>\n<figure class=\"highlight yml\"><figcaption><span>_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>注意存在两个名为 <code>_config.yml</code> 的配置文件：</p>\n<ul>\n<li>Hexo 配置： <code>/_config.yml</code></li>\n<li>NexT 配置：<code>themes/next/_config.yml</code> 或 <code>node_modules/hexo-theme-next/_config.yml</code></li>\n</ul>\n<p>为避免配置内容因更新而初始化，NexT 鼓励用户使用 Hexo 提供的 <code>_config.[name].yml</code> 格式进行替代主题配置。</p>\n<p>使用以下方式创建替代主题配置;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Installed through npm</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br><span class=\"line\"><span class=\"comment\"># Installed through Git</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> themes/next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>\n\n<p>重新启动后将默认使用如下 NexT-Muse 方案：<br><img src=\"https://theme-next.js.org/images/next-default-scheme.png\" alt=\"Default Scheme – Muse\" loading=\"lazy\"></p>\n<h2 id=\"主题设置\"><a href=\"#主题设置\" class=\"headerlink\" title=\"主题设置\"></a>主题设置</h2><p>有四种方案：</p>\n<ul>\n<li><code>Muse</code> -&gt; 默认方案</li>\n<li><code>Mist</code></li>\n<li><code>Pisces</code></li>\n<li><code>Gemini</code> -&gt; 官网所使用<ul>\n<li>存在差别</li>\n<li>链接后的图标</li>\n<li>提示框的圆角</li>\n<li>代码框的行号、复制按钮</li>\n</ul>\n</li>\n</ul>\n<p>通过修改 NexT 配置，可添加功能。此处使用替代主题配置 <code>_config.next.yml</code>，注意修改配置后需要重启项目生效。</p>\n<p>已修改内容：</p>\n<ul>\n<li>Next 方案（gemini）</li>\n<li>代码框复制按钮</li>\n</ul>\n<h2 id=\"特殊元素\"><a href=\"#特殊元素\" class=\"headerlink\" title=\"特殊元素\"></a>特殊元素</h2>","categories":["关于博客"],"tags":["Hexo","教程手册","NexT"]},{"title":"待办","url":"/todo/","content":"<h2 id=\"待办-🤣\"><a href=\"#待办-🤣\" class=\"headerlink\" title=\"待办 🤣\"></a>待办 🤣</h2><ul>\n<li>准备在此记录从零开始的 Hexo 博客记录</li>\n<li>Hexo 相关<ul>\n<li>阅读文档</li>\n<li>换背景图？微调字体？</li>\n<li>主题 DIY</li>\n<li>DIY 著名网站主题，如 Jekyll</li>\n<li>界面中文化</li>\n<li>优化目录结构</li>\n<li>使用插件</li>\n<li>研究 hexo</li>\n<li>替代 hexo</li>\n</ul>\n</li>\n<li>Markdown 相关<ul>\n<li>翻译 marked.js 文档</li>\n<li>实现四种消息</li>\n<li>实现代码框复制</li>\n<li>允许高亮语法带文件名</li>\n<li>制作自己的解析器</li>\n</ul>\n</li>\n<li>翻译相关<ul>\n<li>整合 ZetCode 翻译</li>\n<li>优化翻译库博文关联</li>\n<li>优化译文对照？</li>\n</ul>\n</li>\n<li>其它<ul>\n<li>图床优化、压缩</li>\n<li>在译文 md 中提供多请多切换？还在在博客上提供？</li>\n<li>搜索、中文搜索</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"一个更好的-Hexo\"><a href=\"#一个更好的-Hexo\" class=\"headerlink\" title=\"一个更好的 Hexo\"></a>一个更好的 Hexo</h2><p>目标：本质上只是一个转译式静态网页生成器。无须提供即时后台服务器。</p>\n<ol>\n<li>扩展性</li>\n</ol>\n<ul>\n<li>插件</li>\n<li>功能</li>\n<li>主题</li>\n</ul>\n<ol start=\"2\">\n<li>选择性</li>\n</ol>\n<ul>\n<li>高亮方案可选</li>\n<li>编译器可选</li>\n<li>功能、扩展开关</li>\n<li>自定义语法与自定义编译器</li>\n<li>只需要提供自定义语法的编译规则，并指定对应关系，即可正确渲染？</li>\n<li>博文状态？隐藏？草稿？</li>\n<li>提供一个全局最优先的样式表？用于适时地自定义样式？</li>\n</ul>\n<ol start=\"3\">\n<li>MD</li>\n</ol>\n<ul>\n<li>更好的编译器</li>\n<li>扩展语法支持<ul>\n<li>提示块（自定义容器）？</li>\n<li>Mermaid（及其替代）</li>\n<li>图表？e-chart？</li>\n</ul>\n</li>\n<li>扩展语法考虑<ol>\n<li>纯文本时的阅读性</li>\n<li>MD 预览的效果</li>\n<li>HTML 的标签、类名、结构</li>\n</ol>\n</li>\n<li>图片、表格、图表的点击放大？</li>\n<li>图片可在 md 中指定缩放层级？</li>\n<li>尽量使用流式布局？</li>\n<li>扩展块？如 CodePen 内嵌？</li>\n<li>可折叠？</li>\n<li>考虑各种实际应用中有需求的 md 元素</li>\n<li>如 Hexo 实现的多种特殊样式</li>\n<li>基于行内代码样式的「高亮」语法，如 <code>$&#123;style,text&#125;</code>，会生成 <code>span.hl-style</code></li>\n<li>特殊格式清洗器？去除特殊包裹？</li>\n</ul>\n<ol start=\"4\">\n<li>多语言</li>\n</ol>\n<ul>\n<li>语言切换？网站级</li>\n<li>此网页未提供目标语种时的响应策略？灰色？无法响应？标记？跳转到首页（Hexo 目前策略，很无语）？</li>\n</ul>\n<ol start=\"5\">\n<li>架构<ul>\n<li>定期重构？保持整个项目的架构简洁性？</li>\n</ul>\n</li>\n<li>其它<ul>\n<li>VScode？内部链接？自定义 md-like 语法的格式化及预览工具？</li>\n<li>留言模块？似乎有静态方案？</li>\n<li>Hexo 是如何一键部署的？</li>\n<li>Node.js 打包工具对比？抽离工具链？</li>\n<li>低技术化<ul>\n<li>提供 Web GUI 的即时配置功能？可以即时地导入和导出配置？</li>\n<li>同样功能模块中，使用学习成本最低的，如使用 Less 而非 Sass、Stylus？</li>\n</ul>\n</li>\n<li>为什么 Hexo 要将日志与博文分开？个中意义是什么？</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"翻译相关\"><a href=\"#翻译相关\" class=\"headerlink\" title=\"翻译相关\"></a>翻译相关</h2><ul>\n<li>词表要怎么建立？</li>\n<li>词表要建多详细？</li>\n<li>缺少通行的名词库？</li>\n<li>短语、固定用法、常用语序要不要建立规范翻译？</li>\n<li>目前还是直译为主，是否要打破原著语句以便译文更加丝滑？</li>\n<li>长期计划：计算机专用词库？要考虑用词的语境？服务目标是什么？是中文文档标准化？如何引入或训练一个翻译 AI？能否用时间补足性能？<figure class=\"highlight plaintext\"><figcaption><span>设想中的词典大致结构</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">int</span><br><span class=\"line\">  作整型数据类型时，原词为 intage；</span><br><span class=\"line\">  [C] 占 4 个字节</span><br><span class=\"line\"></span><br><span class=\"line\">  [Java] 占 4 个字节，是基础数据类型</span><br><span class=\"line\"></span><br><span class=\"line\">  [Python] foo, bar...</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"自定义图标库\"><a href=\"#自定义图标库\" class=\"headerlink\" title=\"自定义图标库\"></a>自定义图标库</h3><p>或允许使用自定义图标库？提供开关以选择？</p>\n<p>如何用上 Bootstrap 图标库？</p>\n<p>现有图标库的分类很成问题，缺少 Logo，缺少意象，将不同主题图标混杂，命名不规范。</p>\n<p>如图标名称使用 <code>pack-icon-config</code> 格式：</p>\n<ul>\n<li><code>pack</code> 图标包标志名，名称的头部</li>\n<li><code>icon</code> 图标名，名称的中部剩余部分</li>\n<li><code>config</code> 用字母表示图标副本，名称中的末尾部分<ul>\n<li><code>f</code> fill 填充式图标</li>\n<li><code>l</code> linear 线性图标</li>\n<li><code>n</code> normal 普通</li>\n<li><code>s</code> small 小号</li>\n<li><code>x</code> extra 加大</li>\n</ul>\n</li>\n</ul>\n<p>如以下用法及含义，图标默认样式为填充、普通。</p>\n<table>\n<thead>\n<tr>\n<th>引用名</th>\n<th>图标包</th>\n<th>图标名</th>\n<th>形状</th>\n<th>尺寸</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>x-home</code></td>\n<td><code>x</code></td>\n<td><code>home</code></td>\n<td>填充</td>\n<td>普通</td>\n</tr>\n<tr>\n<td><code>x-home-s</code></td>\n<td><code>x</code></td>\n<td><code>home</code></td>\n<td>填充</td>\n<td>小号</td>\n</tr>\n<tr>\n<td><code>x-home-lx</code></td>\n<td><code>x</code></td>\n<td><code>home</code></td>\n<td>线性</td>\n<td>大号</td>\n</tr>\n<tr>\n<td><code>x-home2-x</code></td>\n<td><code>x</code></td>\n<td><code>home-2</code></td>\n<td>填充</td>\n<td>普通</td>\n</tr>\n</tbody></table>\n<h3 id=\"错字水印溯源系统？\"><a href=\"#错字水印溯源系统？\" class=\"headerlink\" title=\"错字水印溯源系统？\"></a>错字水印溯源系统？</h3><p>灵感来自某乎，因为日常阅读发现其中错字比例高得离谱，基本每个上百字的文段都能发现一些奇怪的错字。这让我想起一个传言，据说某些正版网文网站，会特意生成一些错字，错字的形成规律与逐个用户对应。当出现正版网文泄露时，分析错字规律，即可快速定位问题用户，进行账号处罚。</p>\n<p>由于某政策要求，网站不能限制用户登录才能查看内容，因此某乎在未登录状态下是可以查看少数内容的，包括回答、专栏。错字问题在回答、专栏中均有出现，甚至是收入日报的相对优质内容。</p>\n<p>且不论是否是存在相当比例作者，根本不在乎错字，导致存在错字问题，此处只讨论错字现象的技术应用。即假设错字是某乎刻意添加的，用于追查文字内容盗用问题。</p>\n<p>所以某乎为什么要针对匿名用户看到的内容进行错字水印处理？这样的意义在哪里？技术上又是如何实现的？</p>\n<p>是基于用户画像，并且是用户画像完善的一部分？假设它是吧。那么技术上是如何实现的？如何生成错字水印？如何从错字中回收水印信息？如何降噪？系统稳定性如何？</p>\n<p>题外话：关于用户画像的技术细节，应当去了解了下。</p>\n<h3 id=\"GUI-的几种主流形式？\"><a href=\"#GUI-的几种主流形式？\" class=\"headerlink\" title=\"GUI 的几种主流形式？\"></a>GUI 的几种主流形式？</h3><p>Windows 的标准窗口、对话框形式？（最通用）<br>MacOS 的三栏式？<br>iOS、UWP、安卓的两栏式？<br>Blender 的窗格式？（最灵活）</p>\n<h3 id=\"GUI-练习\"><a href=\"#GUI-练习\" class=\"headerlink\" title=\"GUI 练习\"></a>GUI 练习</h3><ul>\n<li>用自定义小部件实现常用小部件</li>\n<li>模仿 UI 库</li>\n<li>点击即随机生成图形，在几秒后渐消，配色可爱，马卡龙、粉笔等低明度色。</li>\n</ul>\n<h2 id=\"待了解主题\"><a href=\"#待了解主题\" class=\"headerlink\" title=\"待了解主题\"></a>待了解主题</h2><ul>\n<li>用户画像的技术细节和应用现状</li>\n<li>电池的广义概念及应用现状</li>\n<li>移动网络的各个 G 的技术迭代情况对比？技术细节？如带宽、功耗、设备要求、覆盖范围、主要用途、特别功能等</li>\n</ul>\n"},{"title":"日志规范","url":"/about/good-writer/","content":"<p>此处记录如何更优美地写日志要遵守哪些规范。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"版本日志\"><a href=\"#版本日志\" class=\"headerlink\" title=\"版本日志\"></a>版本日志</h2><ol>\n<li>2023-05-05 创建文件</li>\n</ol>\n","tags":["规范"]},{"title":"Hexo 使用","url":"/about/hexo/","content":"<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">开始使用<i class=\"fa fa-external-link-alt\"></i></span></h2><h3 id=\"什么是-Hexo\"><a href=\"#什么是-Hexo\" class=\"headerlink\" title=\"什么是 Hexo\"></a>什么是 Hexo</h3><p>hexo 是一个快速、简洁且高效的博客框架。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在 Node.js 12+ 环境下（此处可折叠的 Node.js 环境配置过程）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>依次执行以下命令，以创建并初始化项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>得到以下结构目录：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\"><span class=\"string\">|   ├── _drafts</span></span><br><span class=\"line\"><span class=\"string\">|   └── _posts</span></span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>_config.yml</code> Hexo 配置</li>\n<li><code>source</code> 文章</li>\n<li><code>scaffolds</code> 模板</li>\n<li><code>themes</code> 已安装的主题，也可能在模块目录下</li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p><code>_config.yml</code> 内大部分配置都可以修改。<br>修改配置后，需要重启项目以生效。</p>\n<h4 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h4><ul>\n<li><code>title</code> 博客标题，显示在首页标签栏、边栏顶部</li>\n<li><code>subtitle</code> 博客副标题，显示在边栏顶部，网站标题下方</li>\n<li><code>description</code> 显示在导航栏作者描述中，主要用于SEO，告诉搜索引擎此站点的描述信息</li>\n<li><code>keywords</code> 网站的关键字，用于 SEO？格式为</li>\n<li><code>author</code> 用于主题，显示文章作者，显示在导航栏、版权栏</li>\n<li><code>language</code> 可能的值如 <code>zh-CN</code>、<code>zh-Hans</code></li>\n<li><code>timezon</code> 默认使用当前电脑时区，可用 <code>America/New_York</code>、<code>Japan</code>、<code>Asia/Shanghai</code> 等</li>\n</ul>\n<h4 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h4><ul>\n<li><code>url</code> 博客主域名</li>\n<li><code>root</code> 博客基于主域名的根路径</li>\n<li><code>permalink</code> 文章的永久链接路径构成，默认年月日</li>\n<li><code>permalink_defaults</code> 永久链接中各部分的默认值</li>\n<li><code>prettey_urls</code> 美化</li>\n<li><code>pretty_urls.trailing_index</code> 是否保留链接尾部的 <code>index.html</code></li>\n<li><code>pretty_urls.trailing_html</code> 是否保留链接尾部的 <code>.html</code><br>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</li>\n</ul>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><ul>\n<li><code>source_dir</code> 存放主要内容，默认 <code>source</code></li>\n<li><code>public_dir</code> 存放生成的站点文件，默认 <code>public</code></li>\n<li><code>tag_dir</code> 标签</li>\n<li><code>archive_dir</code> 归档</li>\n<li><code>category_dir</code> 分类</li>\n<li><code>code_dir</code> 代码目录？</li>\n<li><code>i18n_dir</code> 国际化</li>\n<li><code>skip_render</code> 跳过指定文件渲染，匹配到的文件将原样复制到 <code>public</code> 目录中</li>\n</ul>\n<h4 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h4><ul>\n<li><code>new_post_name</code> 新文章标题</li>\n<li><code>default_layout</code> 默认布局</li>\n<li><code>auto_spacing</code> 中英之间的空格，不生效？</li>\n<li><code>titlecase</code> 将标题转换为标题样式（首字母大写？）</li>\n<li><code>external_link</code> 打开链接方式</li>\n<li><code>external_link.enable</code> 在新标签中打开链接</li>\n<li><code>external_link.field</code> 作用范围，<code>site</code> 网站内生效，<code>post</code> 文章内生效</li>\n<li><code>external_link.exclude</code> 排除域名</li>\n<li><code>filename_case</code> 文件名转换为 <code>1</code> 小写，<code>2</code> 大写</li>\n<li><code>render_drafts</code> 渲染草稿（草稿是一种文章类型？）</li>\n<li><code>post_asset_folder</code> 启用全局资源目录？</li>\n<li><code>relative_link</code> 生成相对链接（去除主域名部分）</li>\n<li><code>future</code> 未来是一种文章类型？</li>\n<li><code>highlight</code> 代码块设置，见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvc3ludGF4LWhpZ2hsaWdodCNIaWdobGlnaHQtanM=\">Highlight.js<i class=\"fa fa-external-link-alt\"></i></span>配置</li>\n<li><code>prismjs</code> 代码块设置，见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvc3ludGF4LWhpZ2hsaWdodCNQcmlzbUpT\">PrismJS<i class=\"fa fa-external-link-alt\"></i></span>配置</li>\n</ul>\n<h4 id=\"分类-amp-标签\"><a href=\"#分类-amp-标签\" class=\"headerlink\" title=\"分类&amp;标签\"></a>分类&amp;标签</h4><ul>\n<li><code>default_category</code> 默认未分类</li>\n<li><code>category_map</code> 分类别名</li>\n<li><code>tag_map</code> 标签别名</li>\n</ul>\n<h4 id=\"日期、时间格式\"><a href=\"#日期、时间格式\" class=\"headerlink\" title=\"日期、时间格式\"></a>日期、时间格式</h4><p>hexo 使用 <code>Moment.js</code> 来解析和显示时间。</p>\n<ul>\n<li><code>date_format</code> 日期格式</li>\n<li><code>time_format</code> 时间格式</li>\n<li><code>updated_option</code> 当 Front Matter 中未指定 <code>updated</code> 时的取值<ul>\n<li><code>mtime</code> 使用最后修改时间</li>\n<li><code>date</code> 使用日期</li>\n<li><code>empty</code> 删除此项</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h4><ul>\n<li><code>per_page</code> 每页显示的文章量，<code>0</code> 表示关闭分页</li>\n<li><code>pagination_dir</code> 分页目录？</li>\n</ul>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><ul>\n<li><code>theme</code> 当前主题，<code>false</code> 表示禁用主题</li>\n<li><code>theme_config</code> 主题配置，会覆盖 Hexo 配置</li>\n<li><code>deploy</code> 部署相关</li>\n<li><code>meta_generator</code> 元数据标签，<code>false</code> 时不生成</li>\n</ul>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<p>新建网站，未提供 <code>folder</code> 时在当前目录下进行，主要执行以下步骤：</p>\n<ol>\n<li>克隆 <code>hexo-start</code> 和 <code>hexo-theme-landscape</code> 到项目中；</li>\n<li>使用包管理器下载依赖。</li>\n</ol>\n<h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建文章，未提供 <code>layout</code> 时使用 <code>_config.yml</code> 的 <code>default_layout</code>。<br>标题含有空格时，应使用引号包裹。</p>\n<p>参数表：</p>\n<ul>\n<li><code>-p</code>, <code>--path</code> 自定义新文章路径</li>\n<li><code>-r</code>, <code>--replace</code> 若存在同名文章则替换之</li>\n<li><code>-s</code>, <code>--slug</code> 文章的 Slug，将作为新文章的文件名和发布后的 URL</li>\n</ul>\n<p>默认情况下使用文章标题来生成文章名及路径。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new page -p about/me <span class=\"string\">&quot;About me&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上命令创建一个 <code>source/about/me.md</code> 文件，使用 <code>page</code> 布局，Front Matter 内 <code>title</code> 值为 <code>About me</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new page -p about/me</span><br></pre></td></tr></table></figure>\n\n<p>以上命令未提供标题，将创建 <code>source/about/me.md</code>，同时 <code>title</code> 值为 <code>page</code>，并采用默认布局</p>\n<h3 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a>生成</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate <span class=\"comment\"># 简写 hexo g</span></span><br></pre></td></tr></table></figure>\n\n<p>生成静态文件。</p>\n<p>参数表：</p>\n<ul>\n<li><code>-d</code>, <code>--deploy</code> 生成后立即部署</li>\n<li><code>-w</code>, <code>--watch</code> 监视文件变动</li>\n<li><code>-b</code>, <code>--bail</code> 生成过程中若发生未处理异常，则抛出异常</li>\n<li><code>-f</code>, <code>--force</code> 强制重新生成，默认若 <code>public</code> 目录存在，则只生成改动的文件，此参数效果接近 <code>hexo clean &amp;&amp; hexo g</code></li>\n<li><code>-c</code>, <code>--concurrency</code> 最大同时生成文件限制，默认无限制</li>\n</ul>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>发表草稿？</p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>启动服务器，默认通过 <code>http://localhost:4000/</code> 访问。</p>\n<p>参数表：</p>\n<ul>\n<li><code>-p</code>, <code>--port</code> 指定端口</li>\n<li><code>-s</code>, <code>--static</code> 只使用静态文件</li>\n<li><code>-l</code>, <code>--log</code> 启动日志，使用覆盖记录格式？</li>\n</ul>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy <span class=\"comment\"># 简写 hexo d</span></span><br></pre></td></tr></table></figure>\n\n<p>参数表：</p>\n<ul>\n<li><code>-g</code>, <code>--generate</code> 部署前预生成静态文件</li>\n</ul>\n<h3 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>渲染目标文件。</p>\n<p>参数表：</p>\n<ul>\n<li><code>-o</code>, <code>--output</code> 指定输出路径。</li>\n</ul>\n<h3 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;<span class=\"built_in\">type</span>&gt;`</span><br></pre></td></tr></table></figure>\n\n<p>从其它博客系统迁移内容。</p>\n<h3 id=\"清理\"><a href=\"#清理\" class=\"headerlink\" title=\"清理\"></a>清理</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存文件 <code>db.json</code> 和已生成的静态文件 <code>public</code>。<br>有时更改主题后，站点可能不生效，则或许需要清理。</p>\n<h3 id=\"清单\"><a href=\"#清单\" class=\"headerlink\" title=\"清单\"></a>清单</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;<span class=\"built_in\">type</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列出网站基本资料。</p>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>显示 Hexo 版本。</p>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><p>使用 <code>hexo new [layout] &lt;title&gt;</code> 可创建一篇新文章或新页面。</p>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><p>默认有三种布局 <code>post</code>、<code>page</code>、<code>draft</code>，分别保存在 <code>source/_posts</code>、<code>source</code>、<code>source/_drafts</code> 目录下。</p>\n<p>其它自定义布局也将保存在 <code>source/_posts</code> 目录下？</p>\n<h3 id=\"分类和标签\"><a href=\"#分类和标签\" class=\"headerlink\" title=\"分类和标签\"></a>分类和标签</h3><p>只有文章支持分类和标签，即 <code>_posts</code> 下的内容。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>分类示例</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">categories:</span><br><span class=\"line\">- Diary</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- PS3</span><br><span class=\"line\">- Games</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签插件\"><a href=\"#标签插件\" class=\"headerlink\" title=\"标签插件\"></a>标签插件</h2><p>Hexo 可以通过标签插件语法，添加各种格式的块，基础语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% xx a b c %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endxx %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样一个块中，块的类型是 <code>xx</code>，<code>a b c</code> 是此类型块可使用的参数。<br>块的类型应通过主题、插件等方式指明，否则 Hexo 在遇到不认识的类型时，将报错。</p>\n<p>如下面是使用标签插件制作的代码块，但似乎不支持语法高亮？并且普通代码块也提供一系列参数？</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock <span class=\"selector-attr\">[title]</span> <span class=\"selector-attr\">[lang:language]</span> <span class=\"selector-attr\">[url]</span> <span class=\"selector-attr\">[link text]</span> <span class=\"selector-attr\">[additional options]</span> %&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">code</span> snippet</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight clean\"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">code</span> snippet</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>_.compact</span><span class=\"exturl\" data-url=\"aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvI2NvbXBhY3Q=\">Underscore.js<i class=\"fa fa-external-link-alt\"></i></span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">_.<span class=\"title function_\">compact</span>([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"想知道\"><a href=\"#想知道\" class=\"headerlink\" title=\"想知道\"></a>想知道</h2><ul>\n<li>Hexo 的工作流程？如何渲染文档？</li>\n<li>如何限制首页的内容数量？<br>使用 <code>&lt;!-- more --&gt;</code> 标签，标志出摘要部分，此标签前的内容将显示在主页，之后内容显示在正文中。<br>因此写文章养成习惯，标题通过 title 指定，在 <code>---</code> 与 <code>&lt;!-- more --&gt;</code> 之间的内容作为摘要。<br>先写摘要，再开始正文。</li>\n<li>Next 主界面的动画太慢了，如何加快？</li>\n</ul>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><h3 id=\"文章的基本分类\"><a href=\"#文章的基本分类\" class=\"headerlink\" title=\"文章的基本分类\"></a>文章的基本分类</h3><p>Post 是文章（日志），而 Page 是页面？</p>\n<p>日志以年月日构成路径，并统一放置在 <code>_posts</code> 目录下？可能有重名问题？</p>\n<p>页面以 <code>source</code> 下的目录构成路径，将文章直接放入即可自动构成路径。但无法前后跳转？</p>\n<p>因此页面可以是原生的？比如指定不渲染后，用于展示的专用页面？</p>\n<p>也因此页面不会加入导航结构？而需要专门添加链接？即默认是隐藏的？</p>\n<p>能否在左边栏显示路径结构？</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>文章都写在 Post 里的话，如何优化整个博客网站的导航系统？能否添加中文搜索功能？</p>\n<p>干脆基于 NexT 主题官网，修改默认语言，据此来写文章？</p>\n","categories":["关于博客"],"tags":["Hexo","教程手册"]},{"title":"NexT 主题使用","url":"/about/next/","content":"<p>关于 NexT 主题的使用</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h2><p>在具体项目下通过 npm 安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> site</span><br><span class=\"line\">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>\n\n<p>修改 hexo 配置以启用 NexT 主题：</p>\n<figure class=\"highlight yml\"><figcaption><span>_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>注意存在两个名为 <code>_config.yml</code> 的配置文件：</p>\n<ul>\n<li>Hexo 配置： <code>/_config.yml</code></li>\n<li>NexT 配置：<code>themes/next/_config.yml</code> 或 <code>node_modules/hexo-theme-next/_config.yml</code></li>\n</ul>\n<p>为避免配置内容因更新而初始化，NexT 鼓励用户使用 Hexo 提供的 <code>_config.[name].yml</code> 格式进行替代主题配置。</p>\n<p>使用以下方式创建替代主题配置;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Installed through npm</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br><span class=\"line\"><span class=\"comment\"># Installed through Git</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> themes/next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>\n\n<p>重新启动后将默认使用如下 NexT-Muse 方案：<br><img src=\"https://theme-next.js.org/images/next-default-scheme.png\" alt=\"Default Scheme – Muse\" loading=\"lazy\"></p>\n<h2 id=\"主题设置\"><a href=\"#主题设置\" class=\"headerlink\" title=\"主题设置\"></a>主题设置</h2><p>有四种方案：</p>\n<ul>\n<li><code>Muse</code> -&gt; 默认方案</li>\n<li><code>Mist</code></li>\n<li><code>Pisces</code></li>\n<li><code>Gemini</code> -&gt; 官网所使用<ul>\n<li>存在差别</li>\n<li>链接后的图标</li>\n<li>提示框的圆角</li>\n<li>代码框的行号、复制按钮</li>\n</ul>\n</li>\n</ul>\n<p>通过修改 NexT 配置，可添加功能。此处使用替代主题配置 <code>_config.next.yml</code>，注意修改配置后需要重启项目生效。</p>\n<p>已修改内容：</p>\n<ul>\n<li>Next 方案（gemini）</li>\n<li>代码框复制按钮</li>\n</ul>\n<h2 id=\"界面功能的设置\"><a href=\"#界面功能的设置\" class=\"headerlink\" title=\"界面功能的设置\"></a>界面功能的设置</h2><ul>\n<li>右上角的 Github 标签</li>\n<li>右下角滚动指示器的数字</li>\n<li>文章置顶</li>\n<li>首页内容</li>\n<li>左上栏的分类、Docs 中的逐级分类<ul>\n<li>每级菜单中，都应提供一个 <code>index.md</code></li>\n<li>使用 <code>default:</code> 配置本级菜单路径，其它项基于此路径渲染文档</li>\n<li>属于配置菜单项，在 NexT 配置中：<figure class=\"highlight yml\"><figcaption><span>_config.next.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"attr\">Docs:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span> <span class=\"string\">/docs/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-book</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">Getting Started:</span></span><br><span class=\"line\">      <span class=\"attr\">default:</span> <span class=\"string\">/getting-started/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-flag</span></span><br><span class=\"line\">      <span class=\"attr\">Installation:</span> <span class=\"string\">/installation.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-download</span></span><br><span class=\"line\">      <span class=\"attr\">Deployment:</span> <span class=\"string\">/deployment.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-upload</span></span><br><span class=\"line\">      <span class=\"attr\">Configuration:</span> <span class=\"string\">/configuration.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-wrench</span></span><br><span class=\"line\">      <span class=\"attr\">Upgrade:</span> <span class=\"string\">/upgrade.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-history</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>左下栏的功能图标</li>\n<li>底部的分页器</li>\n<li>Footer 内容</li>\n<li>搜索</li>\n<li>中文搜索</li>\n<li>链接右边的按钮</li>\n<li>图片点击放大</li>\n<li>文章右上角的编辑按钮</li>\n<li><code>fab</code>？图标？</li>\n<li><code>|| fa</code>？</li>\n<li>网站的 Logo<br><code>_config.next.yml</code> 中配置 <code>custom_logo: images/next.svg</code>，起始目录为 <code>source</code></li>\n</ul>\n","categories":["关于博客"],"tags":["Hexo","教程手册","NexT"]},{"title":"Markdown 语法参考","url":"/about/md/","content":"<p>此处列举 Markdown 常用和不常用语法</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"行级元素\"><a href=\"#行级元素\" class=\"headerlink\" title=\"行级元素\"></a>行级元素</h2><p>正文<strong>加粗</strong><code>代码</code><kbd>按钮</kbd><em>倾斜</em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iaW5nLmNvbS8=\">外部链接<i class=\"fa fa-external-link-alt\"></i></span><a href=\"#%E5%85%B6%E5%AE%83\">文内锚点</a><img src=\"https://tinypng.com/images/panda-happy.png\" alt=\"图片链接\" loading=\"lazy\">脚注[^1]</p>\n<hr>\n<h2 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h2><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><blockquote>\n<p>引用块</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码块</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>无序列表项</li>\n<li>无序列表项</li>\n</ul>\n<ol>\n<li>有序列表项</li>\n<li>有序列表项</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">标题</th>\n<th>标题</th>\n<th>标题</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">内容</td>\n<td>内容</td>\n<td>内容</td>\n</tr>\n</tbody></table>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> done</li>\n<li><input disabled=\"\" type=\"checkbox\"> todo</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">graph TD</span><br><span class=\"line\"></span><br><span class=\"line\">A --&gt; B</span><br></pre></td></tr></table></figure>\n\n<p>[^1] 这是脚注内容</p>\n","categories":["工具"],"tags":["语法参考"]},{"title":"NexT 文档 - 开始","url":"/about/raw/","content":"<h3 id=\"Hexo-Installation\"><a href=\"#Hexo-Installation\" class=\"headerlink\" title=\"Hexo Installation\"></a>Hexo Installation</h3><p>If this is your first time using Hexo, you can take some time to review the Hexo Docs to see <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">how to install Hexo<i class=\"fa fa-external-link-alt\"></i></span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2V0dXA=\">initialize a site<i class=\"fa fa-external-link-alt\"></i></span>. After the installation is successful, you should be able to execute <code>hexo</code> (or <code>npx hexo</code>) on the command line, and there must be <code>package.json</code>, <code>source</code>, <code>themes</code> and other directories in your <mark class=\"label info\">site root directory</mark>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">_config.yml  node_modules  package-lock.json  package.json  scaffolds  <span class=\"built_in\">source</span>  themes</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>If you are new to Node.js or Hexo, you can also modify the source code of an existing Hexo website instead of creating a new one, to help you understand how Hexo works. In fact, the document you are reading is generated by Hexo with NexT, and you can install it with the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/next-theme/theme-next-docs</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> theme-next-docs</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>Make sure that you have installed Hexo and created a site with it successfully, because the following documents require you to operate in the <mark class=\"label info\">site root directory</mark>.</p>\n<h3 id=\"NexT-Installation\"><a href=\"#NexT-Installation\" class=\"headerlink\" title=\"NexT Installation\"></a>NexT Installation</h3><p>The detailed steps to install or upgrade the theme are as follows.</p>\n<h4 id=\"Downloading-NexT\"><a href=\"#Downloading-NexT\" class=\"headerlink\" title=\"Downloading NexT\"></a>Downloading NexT</h4><p>It&#39;s easy to install Hexo theme: you can choose to install the theme through npm, or download the source code of the theme in the <code>themes</code> directory under <mark class=\"label info\">site root directory</mark>.</p>\n<div class=\"tabs\" id=\"downloading-next\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#downloading-next-1\">Using <code>npm</code></a></li><li class=\"tab\"><a href=\"#downloading-next-2\">Using <code>git</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"downloading-next-1\"><p>If you&#39;re using Hexo 5.0 or later, the simplest way to install is through npm.</p>\n<p>Open your Terminal, change to Hexo <mark class=\"label info\">site root directory</mark> and install NexT theme:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"downloading-next-2\"><p>If you know about <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS8=\">Git<i class=\"fa fa-external-link-alt\"></i></span>, you can clone the whole repository and update it in any time with <code>git pull</code> command instead of downloading archive manually.</p>\n<p>Open your terminal, change to Hexo <mark class=\"label info\">site root directory</mark> and clone the latest master branch of NexT theme:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div></div></div>\n\n<div class=\"note primary\"><p>You can also read <a href=\"/docs/getting-started/installation\">detailed installation instructions</a> if you want any other installation variant.</p>\n</div>\n\n<h4 id=\"Upgrading-NexT\"><a href=\"#Upgrading-NexT\" class=\"headerlink\" title=\"Upgrading NexT\"></a>Upgrading NexT</h4><p>A new version of NexT will be released every month. Please read the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L3JlbGVhc2Vz\">release notes<i class=\"fa fa-external-link-alt\"></i></span> before updating the theme. You can update NexT by the following command.</p>\n<div class=\"tabs\" id=\"upgrading-next\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#upgrading-next-1\">Using <code>npm</code></a></li><li class=\"tab\"><a href=\"#upgrading-next-2\">Using <code>git</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"upgrading-next-1\"><p>Install the latest version through npm:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"upgrading-next-2\"><p>Or update to the latest master branch:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ git pull origin master</span><br></pre></td></tr></table></figure>\n\n<p>When running <code>git pull</code>, you can bypass merge conflicts (error message like <strong>«Commit your changes or stash them before you can merge»</strong>) by using the <code>Commit</code>, <code>Stash</code> or <code>Reset</code> commands for local changes. See <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE1NzQ1NDI0LzU4NjE0OTU=\">here<i class=\"fa fa-external-link-alt\"></i></span> how to do it.</p></div></div></div>\n\n<div class=\"note warning\"><p>If you are still using NexT version 5 or 7, you can read <a href=\"/docs/getting-started/upgrade\">instructions for upgrading from legacy version</a>.</p>\n</div>\n\n<h3 id=\"Configuration-Files\"><a href=\"#Configuration-Files\" class=\"headerlink\" title=\"Configuration Files\"></a>Configuration Files</h3><p>After the installation of Hexo and NexT, you may found that there are two configuration files using by Hexo and both called <code>_config.yml</code>:</p>\n<ol>\n<li>The first one is under <mark class=\"label info\">site root directory</mark>, which contains Hexo&#39;s config.</li>\n<li>The second one is under <mark class=\"label primary\">theme root directory</mark> (e.g. <code>themes/next/_config.yml</code> or <code>node_modules/hexo-theme-next/_config.yml</code>), which is provided by NexT and contains theme&#39;s config.</li>\n</ol>\n<p>Let&#39;s call the first one – <mark class=\"label info\">Hexo config file</mark>, and the second one – <mark class=\"label primary\">NexT config file</mark>.</p>\n<div class=\"note warning\"><p>However, we do not recommend directly modifying the <mark class=\"label primary\">NexT config file</mark>. It is quite often running into conflict status when updating NexT theme via <code>git pull</code>, or need to merge configurations manually when upgrading to new releases. For the theme installed through npm, it is also difficult to modify the <mark class=\"label primary\">NexT config file</mark> in <code>node_modules</code>.</p>\n<p>In order to resolve this issue, we recommend using the <a href=\"/docs/getting-started/configuration\">Alternate Theme Config</a> feature to configure theme NexT.</p>\n</div>\n\n<h3 id=\"Hexo-Configuration\"><a href=\"#Hexo-Configuration\" class=\"headerlink\" title=\"Hexo Configuration\"></a>Hexo Configuration</h3><p>The following settings in <mark class=\"label info\">Hexo config file</mark> are very helpful for optimizing your website.</p>\n<h4 id=\"Configuring-Author\"><a href=\"#Configuring-Author\" class=\"headerlink\" title=\"Configuring Author\"></a>Configuring Author</h4><p>Edit <mark class=\"label info\">Hexo config file</mark> and set the value of <code>author</code> to your nickname.</p>\n<figure class=\"highlight yml\"><figcaption><span>Hexo config file</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">author:</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Configuring-Description\"><a href=\"#Configuring-Description\" class=\"headerlink\" title=\"Configuring Description\"></a>Configuring Description</h4><p>Edit <mark class=\"label info\">Hexo config file</mark> and set the value of <code>description</code> to your description, which can be a sentence you like.</p>\n<figure class=\"highlight yml\"><figcaption><span>Hexo config file</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">description:</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Enabling-NexT\"><a href=\"#Enabling-NexT\" class=\"headerlink\" title=\"Enabling NexT\"></a>Enabling NexT</h4><p>Like all Hexo themes, after you download it, open <mark class=\"label info\">Hexo config file</mark>, find <code>theme</code> option, and change its value to <code>next</code> (or another theme directory name).</p>\n<figure class=\"highlight yml\"><figcaption><span>Hexo config file</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>Now you have installed NexT theme and enabled it. The following steps will help you verify whether NexT is enabled correctly.</p>\n<h3 id=\"Checking-NexT\"><a href=\"#Checking-NexT\" class=\"headerlink\" title=\"Checking NexT\"></a>Checking NexT</h3><p>It&#39;s recommended to use <code>hexo clean</code> to clean Hexo&#39;s cache first.<br>Then start Hexo local server with debug parameter (by adding <code>--debug</code>), the whole command is <code>hexo s --debug</code>. You can see the output while running, and if you find problem, you can use the output to help others locate error better. When it prints:</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running <span class=\"keyword\">at</span> <span class=\"keyword\">http</span>://localhost:<span class=\"number\">4000</span>/. Press Ctrl+C <span class=\"built_in\">to</span> <span class=\"built_in\">stop</span>.</span><br></pre></td></tr></table></figure>\n\n<p>Now you can open <code>http://localhost:4000</code> in your browser, and check whether the site works correctly.</p>\n<div class=\"note success\"><p>If you find your site looks like this picture, you have installed it correctly. That&#39;s default NexT scheme – Muse.<br><img src=\"https://theme-next.js.org/images/next-default-scheme.png\" alt=\"Default Scheme – Muse\" loading=\"lazy\"></p>\n</div>\n\n<p>After that we can <a href=\"/docs/getting-started/deployment\">configure deployment</a>.</p>\n<p>If everything is OK, in next steps we will change some settings including <a href=\"/docs/theme-settings/\">personalization</a> and <a href=\"/docs/third-party-services/\">third-party services integration</a>.</p>\n"},{"title":"文章集","url":"/docs/index.html","content":"<p>此处的文章，可使用菜单分类？若提供总导航？</p>\n<p>要在新 Hexo 中优化和简化这个关于文档树的结构。</p>\n"},{"title":"Tkinter 标准小部件属性","url":"/translation/zt-tkinter/attributes.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL2F0dHJpYnV0ZXMv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/layout\">上一章</a> <a href=\"/translation/zt-tkinter/widgets\">下一章</a></p>\n<blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-05-09</em></p>\n</blockquote>\n<p>在 Tkinter 教程的这一部分，我们将讨论标准小部件属性，包括光标、浮雕、颜色和字体。</p>\n<p>标准小部件属性是用于小部件构建函数中的关键词。</p>\n<h2 id=\"Tkinter-小部件状态\"><a href=\"#Tkinter-小部件状态\" class=\"headerlink\" title=\"Tkinter 小部件状态\"></a>Tkinter 小部件状态</h2><p><code>state</code> 属性定义了小部件的状态。它可包含以下值：<code>NORMAL</code>、<code>ACTIVE</code> 和 <code>DISABLED</code>。</p>\n<figure class=\"highlight py\"><figcaption><span>widget_states.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we use the state attribute.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, BOTH, NORMAL, ACTIVE, DISABLED</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Label</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Fonts&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        self.columnconfigure(<span class=\"number\">0</span>, pad=<span class=\"number\">5</span>)</span><br><span class=\"line\">        self.columnconfigure(<span class=\"number\">1</span>, pad=<span class=\"number\">5</span>)</span><br><span class=\"line\">        self.columnconfigure(<span class=\"number\">2</span>, pad=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        txt = <span class=\"string\">&quot;Today is a beautiful day&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        label1 = Label(self, text=txt, state=NORMAL)</span><br><span class=\"line\">        label1.grid(row=<span class=\"number\">0</span>, column=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        label2 = Label(self, text=txt, state=ACTIVE)</span><br><span class=\"line\">        label2.grid(row=<span class=\"number\">0</span>, column=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        label3 = Label(self, text=txt, state=DISABLED)</span><br><span class=\"line\">        label3.grid(row=<span class=\"number\">0</span>, column=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>我们在 <code>Label</code> 小部件上演示状态属性。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">label1 = Label(self, text=txt, state=NORMAL)</span><br></pre></td></tr></table></figure>\n<p>第一个标签具有 <code>NORMAL</code> 状态。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/widgetstate.png?ezimgfmt=rs:452x41/rscb1/ng:webp/ngcb1\" alt=\"Widget state\" loading=\"lazy\"><br>Figure: Widget state</p>\n<h2 id=\"Tkinter-小部件填充\"><a href=\"#Tkinter-小部件填充\" class=\"headerlink\" title=\"Tkinter 小部件填充\"></a>Tkinter 小部件填充</h2><p><code>padx</code> 与 <code>pady</code> 属性为小部件添加了额外的水平与垂直空间。</p>\n<figure class=\"highlight py\"><figcaption><span>padding.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program uses the padx and pady</span></span><br><span class=\"line\"><span class=\"string\">widget attributes.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Button</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> BOTH, LEFT, TOP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Padding&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH)</span><br><span class=\"line\"></span><br><span class=\"line\">        frame = Frame(self, bd=<span class=\"number\">5</span>)</span><br><span class=\"line\">        frame.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        btn1 = Button(frame, text=<span class=\"string\">&#x27;Button&#x27;</span>)</span><br><span class=\"line\">        btn1.pack(side=LEFT, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        btn2 = Button(frame, text=<span class=\"string\">&#x27;Button&#x27;</span>)</span><br><span class=\"line\">        btn2.pack(side=LEFT, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        frame2 = Frame(self)</span><br><span class=\"line\">        frame2.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        btn1 = Button(frame2, text=<span class=\"string\">&#x27;Button&#x27;</span>)</span><br><span class=\"line\">        btn1.pack(side=TOP, pady=<span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        btn2 = Button(frame2, text=<span class=\"string\">&#x27;Button&#x27;</span>)</span><br><span class=\"line\">        btn2.pack(side=TOP, pady=<span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;300x250+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在本示例中，我们创建了两个框架；每个都有两个小部件。第一个框架由按钮构成一行；第二个框架构成一列。<code>padx</code> 与 <code>pady</code> 属性在按钮之间添加了空间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">btn1 = Button(frame, text=<span class=\"string\">&#x27;Button&#x27;</span>)</span><br><span class=\"line\">btn1.pack(side=LEFT, padx=<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>通过 <code>pack</code> 管理器，我们创建了一行按钮。<code>padx</code> 在按钮之间添加了 5px 的水平空间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">btn1 = Button(frame2, text=<span class=\"string\">&#x27;Button&#x27;</span>)</span><br><span class=\"line\">btn1.pack(side=TOP, pady=<span class=\"number\">15</span>)</span><br></pre></td></tr></table></figure>\n<p>此处我们形成一列。因此，我们使用 <code>pady</code> 属性来添加垂直空间。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/padding.png?ezimgfmt=rs:302x275/rscb1/ng:webp/ngcb1\" alt=\"Padding\" loading=\"lazy\"><br>Figure: Padding</p>\n<h2 id=\"Tkinter-背景色\"><a href=\"#Tkinter-背景色\" class=\"headerlink\" title=\"Tkinter 背景色\"></a>Tkinter 背景色</h2><p>小部件的背景色可以用 <code>background</code> 属性设置。它可被缩写为 <code>bg</code>。</p>\n<p>同样地，小部件的前景色可用 <code>foreground</code> 属性设置，可被缩写为 <code>fg</code>。</p>\n<figure class=\"highlight py\"><figcaption><span>bg_colours.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program uses sets various background</span></span><br><span class=\"line\"><span class=\"string\">colours with bg attribute.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Label</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> BOTH, LEFT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Background colours&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH)</span><br><span class=\"line\"></span><br><span class=\"line\">        frame = Frame(self, borderwidth=<span class=\"number\">10</span>)</span><br><span class=\"line\">        frame.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl1 = Label(frame, bg=<span class=\"string\">&#x27;SlateGray3&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>)</span><br><span class=\"line\">        lbl1.pack(side=LEFT, padx=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl2 = Label(frame, bg=<span class=\"string\">&#x27;SlateGray4&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>)</span><br><span class=\"line\">        lbl2.pack(side=LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl3 = Label(frame, bg=<span class=\"string\">&#x27;DarkSeaGreen3&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>)</span><br><span class=\"line\">        lbl3.pack(side=LEFT, padx=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl4 = Label(frame, bg=<span class=\"string\">&#x27;DarkSeaGreen4&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>)</span><br><span class=\"line\">        lbl4.pack(side=LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在代码示例中，我们创建了四个标签，背景色各不相同。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">lbl1 = Label(frame, bg=<span class=\"string\">&#x27;SlateGray3&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>)</span><br><span class=\"line\">lbl1.pack(side=LEFT, padx=<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>第一个标签的背景色是 SlateGray3(石板灰三，#9FB6CD)。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/bgcolours.png?ezimgfmt=rs:530x189/rscb1/ng:webp/ngcb1\" alt=\"Background colours\" loading=\"lazy\"><br>Figure: Background colours</p>\n<h2 id=\"宽与高\"><a href=\"#宽与高\" class=\"headerlink\" title=\"宽与高\"></a>宽与高</h2><p><code>width</code> 和 <code>height</code> 属性设置了小部件的宽与高。</p>\n<figure class=\"highlight py\"><figcaption><span>width_height.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program uses width and height</span></span><br><span class=\"line\"><span class=\"string\">attributes to set the size of widgets.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Button</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> BOTH, LEFT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Width and height&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH)</span><br><span class=\"line\"></span><br><span class=\"line\">        frame = Frame(self, borderwidth=<span class=\"number\">10</span>)</span><br><span class=\"line\">        frame.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        btn1 = Button(frame, text=<span class=\"string\">&#x27;Button&#x27;</span>)</span><br><span class=\"line\">        btn1.pack(side=LEFT, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        btn2 = Button(frame, text=<span class=\"string\">&#x27;Button&#x27;</span>, width=<span class=\"number\">8</span>)</span><br><span class=\"line\">        btn2.pack(side=LEFT, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        btn3 = Button(frame, text=<span class=\"string\">&#x27;Button&#x27;</span>, width=<span class=\"number\">5</span>, height=<span class=\"number\">4</span>)</span><br><span class=\"line\">        btn3.pack(side=LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在本示例中，我们用 <code>width</code> 和 <code>height</code> 控制了按钮的大小。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">btn2 = Button(frame, text=<span class=\"string\">&#x27;Button&#x27;</span>, width=<span class=\"number\">8</span>)</span><br></pre></td></tr></table></figure>\n<p>按钮宽度设置为八个字符宽。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/width_height.png?ezimgfmt=rs:271x115/rscb1/ng:webp/ngcb1\" alt=\"With and height attributes\" loading=\"lazy\"><br>Figure: With and height attributes</p>\n<h2 id=\"Tkinter-浮雕\"><a href=\"#Tkinter-浮雕\" class=\"headerlink\" title=\"Tkinter 浮雕\"></a>Tkinter 浮雕</h2><p>浮雕是对边框的装饰。可能的值有 <code>SUNKEN</code>、<code>RAISED</code>、<code>GROOVE</code>、<code>RIDGE</code> 和 <code>FLAT</code>。</p>\n<figure class=\"highlight py\"><figcaption><span>reliefs.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program uses relief styles.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Label</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> BOTH, LEFT, FLAT, SUNKEN, RAISED, GROOVE, RIDGE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Reliefs&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH)</span><br><span class=\"line\"></span><br><span class=\"line\">        frame = Frame(self, borderwidth=<span class=\"number\">10</span>)</span><br><span class=\"line\">        frame.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl1 = Label(frame, bg=<span class=\"string\">&#x27;LightSteelBlue3&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>, relief=FLAT)</span><br><span class=\"line\">        lbl1.pack(side=LEFT, padx=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl2 = Label(frame, bg=<span class=\"string\">&#x27;LightSteelBlue3&#x27;</span>, bd=<span class=\"number\">2</span>, width=<span class=\"number\">15</span>,</span><br><span class=\"line\">            height=<span class=\"number\">10</span>, relief=SUNKEN)</span><br><span class=\"line\">        lbl2.pack(side=LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl3 = Label(frame, bg=<span class=\"string\">&#x27;LightSteelBlue3&#x27;</span>, bd=<span class=\"number\">2</span>, width=<span class=\"number\">15</span>,</span><br><span class=\"line\">            height=<span class=\"number\">10</span>, relief=RAISED)</span><br><span class=\"line\">        lbl3.pack(side=LEFT, padx=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl4 = Label(frame, bg=<span class=\"string\">&#x27;LightSteelBlue3&#x27;</span>, bd=<span class=\"number\">3</span>, width=<span class=\"number\">15</span>,</span><br><span class=\"line\">            height=<span class=\"number\">10</span>, relief=GROOVE)</span><br><span class=\"line\">        lbl4.pack(side=LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl5 = Label(frame, bg=<span class=\"string\">&#x27;LightSteelBlue3&#x27;</span>, bd=<span class=\"number\">3</span>, width=<span class=\"number\">15</span>,</span><br><span class=\"line\">            height=<span class=\"number\">10</span>, relief=RIDGE)</span><br><span class=\"line\">        lbl5.pack(side=LEFT, padx=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>此例显示了五种不同的浮雕效果，应用在标签上。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">lbl3 = Label(frame, bg=<span class=\"string\">&#x27;LightSteelBlue3&#x27;</span>, bd=<span class=\"number\">2</span>, width=<span class=\"number\">15</span>,</span><br><span class=\"line\">    height=<span class=\"number\">10</span>, relief=RAISED)</span><br></pre></td></tr></table></figure>\n<p>第三个标签具有 <code>RAISED</code> 浮雕效果。我们通过 <code>bd</code> 增加边框宽度，以使浮雕效果更明显。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/reliefs.png?ezimgfmt=rs:672x193/rscb1/ng:webp/ngcb1\" alt=\"Reliefs\" loading=\"lazy\"><br>Figure: Reliefs</p>\n<h2 id=\"Tkinter-字体\"><a href=\"#Tkinter-字体\" class=\"headerlink\" title=\"Tkinter 字体\"></a>Tkinter 字体</h2><p>Tkinter 有一个 <code>tkinter.font</code> 模块，用于处理字体。它有一些内置字体，如 <code>TkTooltipFont</code>、<code>TkDefaultFont</code> 或 <code>TkTextFont</code>。字体通过 <code>font</code> 属性设置。</p>\n<figure class=\"highlight py\"><figcaption><span>fonts.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we display text in three</span></span><br><span class=\"line\"><span class=\"string\">different fonts.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, BOTH</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Label, Notebook, Style</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.font <span class=\"keyword\">import</span> Font</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Fonts&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        txt = <span class=\"string\">&quot;Today is a beautiful day&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        myfont = Font(family=<span class=\"string\">&quot;Ubuntu Mono&quot;</span>, size=<span class=\"number\">16</span>)</span><br><span class=\"line\">        label1 = Label(self, text=txt, font=myfont)</span><br><span class=\"line\">        label1.grid(row=<span class=\"number\">0</span>, column=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        label2 = Label(self, text=txt, font=<span class=\"string\">&quot;TkTextFont&quot;</span>)</span><br><span class=\"line\">        label2.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        label3 = Label(self, text=txt, font=(<span class=\"string\">&#x27;Times&#x27;</span>, <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"string\">&#x27;italic&#x27;</span>))</span><br><span class=\"line\">        label3.grid(row=<span class=\"number\">2</span>, column=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>示例显示了三个含有文本的标签，文本的字体各不相同。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">myfont = Font(family=<span class=\"string\">&quot;Ubuntu Mono&quot;</span>, size=<span class=\"number\">16</span>)</span><br><span class=\"line\">label1 = Label(self, text=txt, font=myfont)</span><br></pre></td></tr></table></figure>\n<p>使用 <code>Font</code> 类创建特定字体。如果该字体在此平台上不可用，Tkinter 将恢复为某些默认字体。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">label2 = Label(self, text=txt, font=<span class=\"string\">&quot;TkTextFont&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>此处我们使用内建字体名称。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">label3 = Label(self, text=txt, font=(<span class=\"string\">&#x27;Times&#x27;</span>, <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"string\">&#x27;italic&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>字体也可以用一个字符串元组来指定。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/fonts.png?ezimgfmt=rs:268x99/rscb1/ng:webp/ngcb1\" alt=\"Tkinter fonts\" loading=\"lazy\"><br>Figure: Tkinter fonts</p>\n<h2 id=\"Tkinter-光标\"><a href=\"#Tkinter-光标\" class=\"headerlink\" title=\"Tkinter 光标\"></a>Tkinter 光标</h2><p>光标是显示鼠标所在位置的小图标。Tkinter 中的光标通过 <code>cursor</code> 属性设置。</p>\n<figure class=\"highlight py\"><figcaption><span>cursors.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program uses different cursors.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Label</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> BOTH, LEFT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Cursors&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH)</span><br><span class=\"line\"></span><br><span class=\"line\">        frame = Frame(self, borderwidth=<span class=\"number\">10</span>)</span><br><span class=\"line\">        frame.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl1 = Label(frame, bg=<span class=\"string\">&#x27;SlateGray3&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>,</span><br><span class=\"line\">            cursor=<span class=\"string\">&#x27;tcross&#x27;</span>)</span><br><span class=\"line\">        lbl1.pack(side=LEFT, padx=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl2 = Label(frame, bg=<span class=\"string\">&#x27;SlateGray4&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>,</span><br><span class=\"line\">            cursor=<span class=\"string\">&#x27;hand2&#x27;</span>)</span><br><span class=\"line\">        lbl2.pack(side=LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl3 = Label(frame, bg=<span class=\"string\">&#x27;DarkSeaGreen3&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>,</span><br><span class=\"line\">            cursor=<span class=\"string\">&#x27;heart&#x27;</span>)</span><br><span class=\"line\">        lbl3.pack(side=LEFT, padx=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl4 = Label(frame, bg=<span class=\"string\">&#x27;DarkSeaGreen4&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>,</span><br><span class=\"line\">            cursor=<span class=\"string\">&#x27;pencil&#x27;</span>)</span><br><span class=\"line\">        lbl4.pack(side=LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在本示例中，我们有四个标签。每个标签都使用不同的光标。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">lbl4 = Label(frame, bg=<span class=\"string\">&#x27;DarkSeaGreen4&#x27;</span>, width=<span class=\"number\">15</span>, height=<span class=\"number\">10</span>,</span><br><span class=\"line\">    cursor=<span class=\"string\">&#x27;pencil&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>第四个标签使用铅笔图标作为光标。</p>\n<p>在 Tkinter 教程的这一部件，我们使用了标准小部件属性。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL2F0dHJpYnV0ZXMv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/layout\">上一章</a> <a href=\"/translation/zt-tkinter/widgets\">下一章</a></p>\n"},{"title":"译作总目","url":"/translation/index.html","content":"<p>所有各处搜集的教程文档，翻译后放置在此间。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"译作目录\"><a href=\"#译作目录\" class=\"headerlink\" title=\"译作目录\"></a>译作目录</h2><ul>\n<li><a href=\"/translation/zt-pyqt6/\">ZetCode - PyQt6 教程</a></li>\n<li><a href=\"/translation/zt-tkinter/\">ZetCode - Tkinter 教程</a></li>\n</ul>\n<h2 id=\"改动说明\"><a href=\"#改动说明\" class=\"headerlink\" title=\"改动说明\"></a>改动说明</h2><p>在翻译 ZetCode 系列时，普遍进行了以下改动：</p>\n<ul>\n<li>正文、标题，由英文更改为中文，总体上基于直译，在翻译软件辅助下完成；</li>\n<li>原文的修改时间戳也翻译了，并加入了翻译时间戳；</li>\n<li>中西文间隔，手动加入了空格。主要场景在于中文与西方的字符单界处，添加了空格；</li>\n<li>代码块，减少了许多空行，因为在 MD 文档中很占行数；</li>\n<li>行内代码，尽量结合文意，为方法名补足了括号。如 [<code>get</code> method] -&gt; [<code>get()</code> 方法]；</li>\n<li>行内代码尽量根据原文还原了，还原方法为设置 <code>code&#123;background:red&#125;</code> 以对照修改；</li>\n<li>行内的斜体、按键，由于数量少，可能有许多示能注意到并还原格式；</li>\n<li>也许还有其它未尽之处……</li>\n</ul>\n<h2 id=\"如何开始一部译作\"><a href=\"#如何开始一部译作\" class=\"headerlink\" title=\"如何开始一部译作\"></a>如何开始一部译作</h2><ol>\n<li>在 <code>/source/translation/</code> 下建立专用目录，如 <code>zt-pytk</code>；</li>\n<li>在 NexT 配置中添加菜单（可选），注意要提供 <code>index.md</code>：<figure class=\"highlight yml\"><figcaption><span>_config.next.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">PyQt6:</span></span><br><span class=\"line\">  <span class=\"attr\">default:</span> <span class=\"string\">/zt-pyqt6/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-window-restore</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">介绍:</span> <span class=\"string\">/introduction</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-star</span></span><br><span class=\"line\">  <span class=\"string\">时间与日期:</span> <span class=\"string\">/datetime</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-calendar</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意要提供 <code>index.md</code></li>\n<li>使用 Font Awesome Free v6 图标包，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb250YXdlc29tZS5jb20vc2VhcmNoP289ciZtPWZyZWU=\">在此处查找<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n<li>开始翻译，只需要提供 MD 文件。</li>\n</ol>\n"},{"title":"Tkinter 对话框","url":"/translation/zt-tkinter/dialogs.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL2RpYWxvZ3Mv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/menustoolbars\">上一章</a> <a href=\"/translation/zt-tkinter/drawing\">下一章</a></p>\n<blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-05-10</em></p>\n</blockquote>\n<p>在 Tkinter 教程的这一部分，我们使用对话框。</p>\n<p>对话被定义为两个以上人之间的谈话。在计算机程序中，对话框是用于与应用程序「交谈」的窗口。对话框用于输入数据、修改数据、更改应用程序设置等。对话框是在用户和计算机程序之间交流的重要手段。</p>\n<h2 id=\"Tkinter-消息框\"><a href=\"#Tkinter-消息框\" class=\"headerlink\" title=\"Tkinter 消息框\"></a>Tkinter 消息框</h2><p>消息框是一种方便的对话框，它将来自应用程序的消息提供给用户。消息由文本和图像数据组成。Tkinter 中的消息框位于 <code>tkMessageBox</code> 模块中。</p>\n<figure class=\"highlight py\"><figcaption><span>messagebox.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this program, we show various</span></span><br><span class=\"line\"><span class=\"string\">message boxes.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, BOTH</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Button</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> messagebox <span class=\"keyword\">as</span> mbox</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Message boxes&quot;</span>)</span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        error = Button(self, text=<span class=\"string\">&quot;Error&quot;</span>, command=self.onError)</span><br><span class=\"line\">        error.grid(padx=<span class=\"number\">5</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\">        warning = Button(self, text=<span class=\"string\">&quot;Warning&quot;</span>, command=self.onWarn)</span><br><span class=\"line\">        warning.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">0</span>)</span><br><span class=\"line\">        question = Button(self, text=<span class=\"string\">&quot;Question&quot;</span>, command=self.onQuest)</span><br><span class=\"line\">        question.grid(row=<span class=\"number\">0</span>, column=<span class=\"number\">1</span>)</span><br><span class=\"line\">        inform = Button(self, text=<span class=\"string\">&quot;Information&quot;</span>, command=self.onInfo)</span><br><span class=\"line\">        inform.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onError</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        mbox.showerror(<span class=\"string\">&quot;Error&quot;</span>, <span class=\"string\">&quot;Could not open file&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onWarn</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        mbox.showwarning(<span class=\"string\">&quot;Warning&quot;</span>, <span class=\"string\">&quot;Deprecated function call&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onQuest</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        mbox.askquestion(<span class=\"string\">&quot;Question&quot;</span>, <span class=\"string\">&quot;Are you sure to quit?&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onInfo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        mbox.showinfo(<span class=\"string\">&quot;Information&quot;</span>, <span class=\"string\">&quot;Download completed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;300x150+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>我们使用网格管理器来设置四个按钮的网格。每个按钮显示一个不同的消息框。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> messagebox <span class=\"keyword\">as</span> mbox</span><br></pre></td></tr></table></figure>\n<p>我们导入 <code>messagebox</code>，它有用于显示对话框的方法。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">error = Button(self, text=<span class=\"string\">&quot;Error&quot;</span>, command=self.onError)</span><br></pre></td></tr></table></figure>\n<p>我们创建错误按钮，它调用 <code>onError()</code> 方法。在方法内，我们显示错误消息对话框。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">onError</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    mbox.showerror(<span class=\"string\">&quot;Error&quot;</span>, <span class=\"string\">&quot;Could not open file&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>一旦我们按下错误按钮，就显示错误对话框。我们用 <code>showerror()</code> 方法在屏幕上显示对话框。此方法的首个参数是消息框的标题，其次是确切消息。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/errordlg.png?ezimgfmt=rs:223x118/rscb1/ng:webp/ngcb1\" alt=\"Error message dialog\" loading=\"lazy\"><br>Figure: Error message dialog</p>\n<h2 id=\"Tkinter-颜色选择器\"><a href=\"#Tkinter-颜色选择器\" class=\"headerlink\" title=\"Tkinter 颜色选择器\"></a>Tkinter 颜色选择器</h2><p>颜色选择器是用于选择颜色的对话框。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">color_chooser.py</span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we use colorchooser</span></span><br><span class=\"line\"><span class=\"string\">dialog to change the background of a frame.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Button, BOTH, SUNKEN</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> colorchooser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Color chooser&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.btn = Button(self, text=<span class=\"string\">&quot;Choose Color&quot;</span>,</span><br><span class=\"line\">            command=self.onChoose)</span><br><span class=\"line\">        self.btn.place(x=<span class=\"number\">30</span>, y=<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.frame = Frame(self, border=<span class=\"number\">1</span>,</span><br><span class=\"line\">            relief=SUNKEN, width=<span class=\"number\">100</span>, height=<span class=\"number\">100</span>)</span><br><span class=\"line\">        self.frame.place(x=<span class=\"number\">160</span>, y=<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onChoose</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        (rgb, hx) = colorchooser.askcolor()</span><br><span class=\"line\">        self.frame.config(bg=hx)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;300x150+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>我们有一个按钮和一个框架。点击按钮将显示颜色选择对话框。我们将通过在对话框选中颜色来改变框架的背景色。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">(rgb, hx) = colorchooser.askcolor()</span><br><span class=\"line\">self.frame.config(bg=hx)</span><br></pre></td></tr></table></figure>\n<p><code>askcolor()</code> 方法显示此对话框。若我们点击 OK，将返回一个元组。它是 RGB 和十六进制的色值。在第二行，我们用返回的色值改变框架的背景色。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/colorchooser.png?ezimgfmt=rs:418x221/rscb1/ng:webp/ngcb1\" alt=\"Color chooser\" loading=\"lazy\"><br>Figure: Color chooser</p>\n<h2 id=\"Tkinter-文件对话框\"><a href=\"#Tkinter-文件对话框\" class=\"headerlink\" title=\"Tkinter 文件对话框\"></a>Tkinter 文件对话框</h2><p><code>tkFileDialog</code> 对话框允许用户从文件系统中选择文件。</p>\n<figure class=\"highlight py\"><figcaption><span>file_dialog.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this program, we use the</span></span><br><span class=\"line\"><span class=\"string\">tkFileDialog to select a file from</span></span><br><span class=\"line\"><span class=\"string\">a filesystem.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Frame, Tk, BOTH, Text, Menu, END</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> filedialog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;File dialog&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        menubar = Menu(self.master)</span><br><span class=\"line\">        self.master.config(menu=menubar)</span><br><span class=\"line\"></span><br><span class=\"line\">        fileMenu = Menu(menubar)</span><br><span class=\"line\">        fileMenu.add_command(label=<span class=\"string\">&quot;Open&quot;</span>, command=self.onOpen)</span><br><span class=\"line\">        menubar.add_cascade(label=<span class=\"string\">&quot;File&quot;</span>, menu=fileMenu)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.txt = Text(self)</span><br><span class=\"line\">        self.txt.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onOpen</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        ftypes = [(<span class=\"string\">&#x27;Python files&#x27;</span>, <span class=\"string\">&#x27;*.py&#x27;</span>), (<span class=\"string\">&#x27;All files&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>)]</span><br><span class=\"line\">        dlg = filedialog.Open(self, filetypes = ftypes)</span><br><span class=\"line\">        fl = dlg.show()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> fl != <span class=\"string\">&#x27;&#x27;</span>:</span><br><span class=\"line\">            text = self.readFile(fl)</span><br><span class=\"line\">            self.txt.insert(END, text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">readFile</span>(<span class=\"params\">self, filename</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            text = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;300x250+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在代码示例中，我们使用 <code>tkFileDialog</code> 对话框来选择一个文件，并在文本小部件中显示它的内容。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.txt = Text(self)</span><br></pre></td></tr></table></figure>\n<p>这是 <code>Text</code> 小部件，我们将在此显示选中文件的内容。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">ftypes = [(<span class=\"string\">&#x27;Python files&#x27;</span>, <span class=\"string\">&#x27;*.py&#x27;</span>), (<span class=\"string\">&#x27;All files&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>)]</span><br></pre></td></tr></table></figure>\n<p>这是文件过滤器。第一个显示仅限 Python 文件，其它的显示所有文件。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">dlg = filedialog.Open(self, filetypes = ftypes)</span><br><span class=\"line\">fl = dlg.show()</span><br></pre></td></tr></table></figure>\n<p>此对话框被创建，并显示在屏幕上。我们获得返回值，即选中文件的名称。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">text = self.readFile(fl)</span><br></pre></td></tr></table></figure>\n<p>我们读取文件的内容。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.txt.insert(END, text)</span><br></pre></td></tr></table></figure>\n<p>文本插入到 <code>Text</code> 小部件中。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/filedlg.png?ezimgfmt=rs:418x278/rscb1/ng:webp/ngcb1\" alt=\"File dialog\" loading=\"lazy\"><br>Figure: File dialog</p>\n<p>在 Tkinter 教程的这一部分，我们使用了对话框窗口。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL2RpYWxvZ3Mv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/menustoolbars\">上一章</a> <a href=\"/translation/zt-tkinter/drawing\">下一章</a></p>\n"},{"title":"Tkinter 教程","url":"/translation/zt-tkinter/index.html","content":"<blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-05-05</em></p>\n</blockquote>\n<p>这是 tkinter 教程。它包含了在 Python 中使用 tkinter 进行 GUI 编程的基础知识。本教程适用于初级和中级程序员。示例遵守 OOP 规范。源码和图像可在作者的 Github 仓库 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phbmJvZG5hci9Ua2ludGVyLUV4YW1wbGVz\">Tkinter-Examples<i class=\"fa fa-external-link-alt\"></i></span> 获取。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"introduction\">介绍</a></li>\n<li><a href=\"layout\">布局管理</a></li>\n<li><a href=\"attributes\">标准小部件属性</a></li>\n<li><a href=\"widgets\">小部件</a></li>\n<li><a href=\"menustoolbars\">菜单与工具栏</a></li>\n<li><a href=\"dialogs\">对话框</a></li>\n<li><a href=\"drawing\">绘图</a></li>\n<li><a href=\"snake\">贪吃蛇</a></li>\n</ul>\n<h2 id=\"tkinter\"><a href=\"#tkinter\" class=\"headerlink\" title=\"tkinter\"></a>tkinter</h2><p><em>Tkinter</em> 是 Tk Gui 工具包的一个 Python 绑定。Tk 是 Tcl 语言的原始 GUI 库。tkinter 是作为一个 Python 装饰器实现的，从而在 Python 解释器中嵌入完整的 Tcl 解释器。</p>\n<h2 id=\"电子书\"><a href=\"#电子书\" class=\"headerlink\" title=\"电子书\"></a>电子书</h2><p>在 ZetCode 上有一本独特的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9lYm9va3MvdGtpbnRlci8=\">tkinter 电子书<i class=\"fa fa-external-link-alt\"></i></span>教程；以 PDF 格式包含 200 页和 89 个代码示例。</p>\n<h2 id=\"相关教程\"><a href=\"#相关教程\" class=\"headerlink\" title=\"相关教程\"></a>相关教程</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXRob24vdGtpbnRlci8=\">tkinter 教程 - 过程式<i class=\"fa fa-external-link-alt\"></i></span>是一个关于过程式编程风格的 tkinter 教程。Python 的其它 GUI 工具包教程有 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9ndWkvcHlxdDUv\">PyQt5 教程<i class=\"fa fa-external-link-alt\"></i></span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS93eHB5dGhvbi8=\">wxPython 教程<i class=\"fa fa-external-link-alt\"></i></span>和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXRob24vZ3RrLw==\">Python Gtk 教程<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n"},{"title":"Tkinter 绘图","url":"/translation/zt-tkinter/drawing.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL2RyYXdpbmcv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/dialogs\">上一章</a> <a href=\"/translation/zt-tkinter/snake\">下一章</a></p>\n<blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-05-10</em></p>\n</blockquote>\n<p>在 Tkinter 教程的这一部分，我们将进行绘图。Tkinter 中的绘图在 <code>Canvas</code> 小部件上完成。<code>Canvas</code> 是用于在 Tkinter 中进行图形处理的高级工具。</p>\n<p>它能用于创建图表、自定义小部件或创建游戏。</p>\n<h2 id=\"Tkinter-Canavas-画布\"><a href=\"#Tkinter-Canavas-画布\" class=\"headerlink\" title=\"Tkinter Canavas 画布\"></a>Tkinter Canavas 画布</h2><p>画布小部件管理 2D 图形对象集：线、圆、图像或其它小部件。它适合绘图或建立更复杂的小部件。</p>\n<h2 id=\"Tkinter-画线\"><a href=\"#Tkinter-画线\" class=\"headerlink\" title=\"Tkinter 画线\"></a>Tkinter 画线</h2><p>线是简单的几何原语。<code>create_line()</code> 方法可在 <code>Canvas</code> 上创建线项。</p>\n<figure class=\"highlight py\"><figcaption><span>lines.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The example draws lines on the Canvas.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Canvas, Frame, BOTH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Lines&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas = Canvas(self)</span><br><span class=\"line\">        canvas.create_line(<span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">200</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">        canvas.create_line(<span class=\"number\">300</span>, <span class=\"number\">35</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, dash=(<span class=\"number\">4</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">        canvas.create_line(<span class=\"number\">55</span>, <span class=\"number\">85</span>, <span class=\"number\">155</span>, <span class=\"number\">85</span>, <span class=\"number\">105</span>, <span class=\"number\">180</span>, <span class=\"number\">55</span>, <span class=\"number\">85</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;400x250+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在代码示例中，我们绘制简单线。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.create_line(<span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">200</span>, <span class=\"number\">25</span>)</span><br></pre></td></tr></table></figure>\n<p><code>create_line()</code> 方法的参数，是线的起始点与结束点的 x 与 y 坐标。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.create_line(<span class=\"number\">300</span>, <span class=\"number\">35</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, dash=(<span class=\"number\">4</span>, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<p>绘制了垂直线。<code>dash</code> 选项可指定线的虚线样式。我们有一条线，它由交替的 4px 线段和 2px 空间组成。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.create_line(<span class=\"number\">55</span>, <span class=\"number\">85</span>, <span class=\"number\">155</span>, <span class=\"number\">85</span>, <span class=\"number\">105</span>, <span class=\"number\">180</span>, <span class=\"number\">55</span>, <span class=\"number\">85</span>)</span><br></pre></td></tr></table></figure>\n<p><code>create_line()</code> 方法可接收多个点。此线将绘制成三角形。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/lines.png?ezimgfmt=rs:402x276/rscb1/ng:webp/ngcb1\" alt=\"Lines\" loading=\"lazy\"><br>Figure: Lines</p>\n<h2 id=\"Tkinter-颜色\"><a href=\"#Tkinter-颜色\" class=\"headerlink\" title=\"Tkinter 颜色\"></a>Tkinter 颜色</h2><p>颜色是一个对象，它代表红绿蓝（RGB）的颜色强度值组合。</p>\n<figure class=\"highlight py\"><figcaption><span>colours.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program draws three</span></span><br><span class=\"line\"><span class=\"string\">rectangles filled with different</span></span><br><span class=\"line\"><span class=\"string\">colours.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Canvas, Frame, BOTH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Colours&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas = Canvas(self)</span><br><span class=\"line\">        canvas.create_rectangle(<span class=\"number\">30</span>, <span class=\"number\">10</span>, <span class=\"number\">120</span>, <span class=\"number\">80</span>,</span><br><span class=\"line\">            outline=<span class=\"string\">&quot;#fb0&quot;</span>, fill=<span class=\"string\">&quot;#fb0&quot;</span>)</span><br><span class=\"line\">        canvas.create_rectangle(<span class=\"number\">150</span>, <span class=\"number\">10</span>, <span class=\"number\">240</span>, <span class=\"number\">80</span>,</span><br><span class=\"line\">            outline=<span class=\"string\">&quot;#f50&quot;</span>, fill=<span class=\"string\">&quot;#f50&quot;</span>)</span><br><span class=\"line\">        canvas.create_rectangle(<span class=\"number\">270</span>, <span class=\"number\">10</span>, <span class=\"number\">370</span>, <span class=\"number\">80</span>,</span><br><span class=\"line\">            outline=<span class=\"string\">&quot;#05f&quot;</span>, fill=<span class=\"string\">&quot;#05f&quot;</span>)</span><br><span class=\"line\">        canvas.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;400x100+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在代码示例中，我们绘制三个矩形，并用不同的色值填充它们。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas = Canvas(self)</span><br></pre></td></tr></table></figure>\n<p>我们创建 <code>Canvas</code> 小部件。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.create_rectangle(<span class=\"number\">30</span>, <span class=\"number\">10</span>, <span class=\"number\">120</span>, <span class=\"number\">80</span>,</span><br><span class=\"line\">    outline=<span class=\"string\">&quot;#fb0&quot;</span>, fill=<span class=\"string\">&quot;#fb0&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>create_rectangle()</code> 方法在画布上创建一个矩形项。前四个参数是 x 与 y 坐标值，来自这两个边界点：左上和右下。使用 <code>outline</code> 参数，我们可控制矩形轮廓的颜色。同样地，<code>fill</code> 参数提供的颜色用于用于矩形内部。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/colours.png?ezimgfmt=rs:402x126/rscb1/ng:webp/ngcb1\" alt=\"Colours\" loading=\"lazy\"><br>Figure: Colours</p>\n<h2 id=\"Tkinter-几何形状\"><a href=\"#Tkinter-几何形状\" class=\"headerlink\" title=\"Tkinter 几何形状\"></a>Tkinter 几何形状</h2><p>我们可以在画布上绘制不同的形状。以下代码示例将显示其中一些。</p>\n<figure class=\"highlight py\"><figcaption><span>shapes.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we draw basic</span></span><br><span class=\"line\"><span class=\"string\">shapes on the canvas.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Canvas, Frame, BOTH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Shapes&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas = Canvas(self)</span><br><span class=\"line\">        canvas.create_oval(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">80</span>, <span class=\"number\">80</span>, outline=<span class=\"string\">&quot;#f11&quot;</span>,</span><br><span class=\"line\">            fill=<span class=\"string\">&quot;#1f1&quot;</span>, width=<span class=\"number\">2</span>)</span><br><span class=\"line\">        canvas.create_oval(<span class=\"number\">110</span>, <span class=\"number\">10</span>, <span class=\"number\">210</span>, <span class=\"number\">80</span>, outline=<span class=\"string\">&quot;#f11&quot;</span>,</span><br><span class=\"line\">            fill=<span class=\"string\">&quot;#1f1&quot;</span>, width=<span class=\"number\">2</span>)</span><br><span class=\"line\">        canvas.create_rectangle(<span class=\"number\">230</span>, <span class=\"number\">10</span>, <span class=\"number\">290</span>, <span class=\"number\">60</span>,</span><br><span class=\"line\">            outline=<span class=\"string\">&quot;#f11&quot;</span>, fill=<span class=\"string\">&quot;#1f1&quot;</span>, width=<span class=\"number\">2</span>)</span><br><span class=\"line\">        canvas.create_arc(<span class=\"number\">30</span>, <span class=\"number\">200</span>, <span class=\"number\">90</span>, <span class=\"number\">100</span>, start=<span class=\"number\">0</span>,</span><br><span class=\"line\">            extent=<span class=\"number\">210</span>, outline=<span class=\"string\">&quot;#f11&quot;</span>, fill=<span class=\"string\">&quot;#1f1&quot;</span>, width=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        points = [<span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">120</span>, <span class=\"number\">240</span>, <span class=\"number\">180</span>, <span class=\"number\">210</span>,</span><br><span class=\"line\">            <span class=\"number\">200</span>, <span class=\"number\">150</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>]</span><br><span class=\"line\">        canvas.create_polygon(points, outline=<span class=\"string\">&#x27;#f11&#x27;</span>,</span><br><span class=\"line\">            fill=<span class=\"string\">&#x27;#1f1&#x27;</span>, width=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;330x220+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>我们在窗口中绘制了五个不同的形状：圆、椭圆、矩形、弧和多边形。轮廓用红色绘制，内部用绿色。轮廓宽 2px。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.create_oval(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">80</span>, <span class=\"number\">80</span>, outline=<span class=\"string\">&quot;#f11&quot;</span>,</span><br><span class=\"line\">    fill=<span class=\"string\">&quot;#1f1&quot;</span>, width=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>此处 <code>create_oval()</code> 方法用于创建圆项。前四个参数是圆的边界框坐标。换句话说，它们是用于画圆的方框的左上与右下两点的 x 与 y 坐标。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.create_rectangle(<span class=\"number\">230</span>, <span class=\"number\">10</span>, <span class=\"number\">290</span>, <span class=\"number\">60</span>,</span><br><span class=\"line\">    outline=<span class=\"string\">&quot;#f11&quot;</span>, fill=<span class=\"string\">&quot;#1f1&quot;</span>, width=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>我们创建了一个矩形项。坐标指的来自绘制矩形的边界框。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.create_arc(<span class=\"number\">30</span>, <span class=\"number\">200</span>, <span class=\"number\">90</span>, <span class=\"number\">100</span>, start=<span class=\"number\">0</span>,</span><br><span class=\"line\">    extent=<span class=\"number\">210</span>, outline=<span class=\"string\">&quot;#f11&quot;</span>, fill=<span class=\"string\">&quot;#1f1&quot;</span>, width=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>这行代码创建一个弧，弧是圆周的一部分。我们提供边界框。<code>start</code> 参数是弧的起始角。<code>extend</code> 参数是角的大小。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">points = [<span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">120</span>, <span class=\"number\">240</span>, <span class=\"number\">180</span>, <span class=\"number\">210</span>,</span><br><span class=\"line\">    <span class=\"number\">200</span>, <span class=\"number\">150</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>]</span><br><span class=\"line\">canvas.create_polygon(points, outline=<span class=\"string\">&#x27;#f11&#x27;</span>,</span><br><span class=\"line\">    fill=<span class=\"string\">&#x27;#1f1&#x27;</span>, width=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>创建了一个多边形。它是一个拥有多个角的形状。为了在 Tkinter 中创建多边形，我们通过 <code>create_polygon()</code> 方法提供了多边形的坐标列表。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/shapes.png?ezimgfmt=rs:332x245/rscb1/ng:webp/ngcb1\" alt=\"Shapes\" loading=\"lazy\"><br>Figure: Shapes</p>\n<h2 id=\"Tkinter-绘制图像\"><a href=\"#Tkinter-绘制图像\" class=\"headerlink\" title=\"Tkinter 绘制图像\"></a>Tkinter 绘制图像</h2><p>在以下示例中，我们在画布上绘制一个图像项。</p>\n<figure class=\"highlight py\"><figcaption><span>draw_image.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we draw an image</span></span><br><span class=\"line\"><span class=\"string\">on the canvas.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Canvas, Frame, BOTH, NW</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageTk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;High Tatras&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.img = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;tatras.jpg&quot;</span>)</span><br><span class=\"line\">        self.tatras = ImageTk.PhotoImage(self.img)</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas = Canvas(self, width=self.img.size[<span class=\"number\">0</span>]+<span class=\"number\">20</span>,</span><br><span class=\"line\">           height=self.img.size[<span class=\"number\">1</span>]+<span class=\"number\">20</span>)</span><br><span class=\"line\">        canvas.create_image(<span class=\"number\">10</span>, <span class=\"number\">10</span>, anchor=NW, image=self.tatras)</span><br><span class=\"line\">        canvas.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>此示例在画布上显示一个图像。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageTk</span><br></pre></td></tr></table></figure>\n<p>从 PIL 模块中，我们引入了 <code>Image</code> 和 <code>ImageTk</code> 模块。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.img = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;tatras.jpg&quot;</span>)</span><br><span class=\"line\">self.tatras = ImageTk.PhotoImage(self.img)</span><br></pre></td></tr></table></figure>\n<p>Tkinter 内部不支持 JPG 图像。作为一种解决方法，我们用 <code>Image</code> 和 <code>ImageTk</code> 模块。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas = Canvas(self, width=self.img.size[<span class=\"number\">0</span>]+<span class=\"number\">20</span>,</span><br><span class=\"line\">    height=self.img.size[<span class=\"number\">1</span>]+<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<p>我们创建 <code>Canvas</code> 小部件。它考虑了图像的大小。它比实际图像宽 20px 高 20px。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.create_image(<span class=\"number\">10</span>, <span class=\"number\">10</span>, anchor=NW, image=self.tatras)</span><br></pre></td></tr></table></figure>\n<p>我们用 <code>create_image()</code> 方法在画布上创建图像项。为了显示完整图像，它被锚定在西北角。<code>image</code> 参数提供要显示的照片图像。</p>\n<h2 id=\"Tkinter-绘制文本\"><a href=\"#Tkinter-绘制文本\" class=\"headerlink\" title=\"Tkinter 绘制文本\"></a>Tkinter 绘制文本</h2><p>在最后的示例中，我们在窗口上绘制文本。</p>\n<figure class=\"highlight py\"><figcaption><span>draw_text.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we draw text</span></span><br><span class=\"line\"><span class=\"string\">on the window.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Canvas, Frame, BOTH, W</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Lyrics&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas = Canvas(self)</span><br><span class=\"line\">        canvas.create_text(<span class=\"number\">20</span>, <span class=\"number\">30</span>, anchor=W, font=<span class=\"string\">&quot;Purisa&quot;</span>,</span><br><span class=\"line\">            text=<span class=\"string\">&quot;Most relationships seem so transitory&quot;</span>)</span><br><span class=\"line\">        canvas.create_text(<span class=\"number\">20</span>, <span class=\"number\">60</span>, anchor=W, font=<span class=\"string\">&quot;Purisa&quot;</span>,</span><br><span class=\"line\">            text=<span class=\"string\">&quot;They&#x27;re good but not the permanent one&quot;</span>)</span><br><span class=\"line\">        canvas.create_text(<span class=\"number\">20</span>, <span class=\"number\">130</span>, anchor=W, font=<span class=\"string\">&quot;Purisa&quot;</span>,</span><br><span class=\"line\">            text=<span class=\"string\">&quot;Who doesn&#x27;t long for someone to hold&quot;</span>)</span><br><span class=\"line\">        canvas.create_text(<span class=\"number\">20</span>, <span class=\"number\">160</span>, anchor=W, font=<span class=\"string\">&quot;Purisa&quot;</span>,</span><br><span class=\"line\">            text=<span class=\"string\">&quot;Who knows how to love without being told&quot;</span>)</span><br><span class=\"line\">        canvas.create_text(<span class=\"number\">20</span>, <span class=\"number\">190</span>, anchor=W, font=<span class=\"string\">&quot;Purisa&quot;</span>,</span><br><span class=\"line\">            text=<span class=\"string\">&quot;Somebody tell me why I&#x27;m on my own&quot;</span>)</span><br><span class=\"line\">        canvas.create_text(<span class=\"number\">20</span>, <span class=\"number\">220</span>, anchor=W, font=<span class=\"string\">&quot;Purisa&quot;</span>,</span><br><span class=\"line\">            text=<span class=\"string\">&quot;If there&#x27;s a soulmate for everyone&quot;</span>)</span><br><span class=\"line\">        canvas.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;420x250+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>我们在窗口上绘制了一首哥的歌词。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.create_text(<span class=\"number\">20</span>, <span class=\"number\">30</span>, anchor=W, font=<span class=\"string\">&quot;Purisa&quot;</span>,</span><br><span class=\"line\">    text=<span class=\"string\">&quot;Most relationships seem so transitory&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>前两个参数是文本中心点的 x 与 y 坐标。如果我们将文本项锚定在西边，文本将从此位置开始。<code>font</code> 参数提供文本字体，<code>text</code> 参数是要显示的文本。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/lyrics.png?ezimgfmt=rs:422x276/rscb1/ng:webp/ngcb1\" alt=\"Drawing text\" loading=\"lazy\"><br>Figure: Drawing text</p>\n<p>在 Tkinter 教程的这一部分，我们进行了一些绘图。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL2RyYXdpbmcv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/dialogs\">上一章</a> <a href=\"/translation/zt-tkinter/snake\">下一章</a></p>\n"},{"title":"Tkinter 介绍","url":"/translation/zt-tkinter/introduction.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL2ludHJvZHVjdGlvbi8=\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/layout\">下一章</a></p>\n<blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-05-05</em></p>\n</blockquote>\n<p>在 Tkinter 教程的这一部分，我们介绍 Tkinter 工具包，并创建我们的第一个程序。</p>\n<p>本教程的目的是让你上手 Tkinter 工具包。</p>\n<h2 id=\"Tkinter\"><a href=\"#Tkinter\" class=\"headerlink\" title=\"Tkinter\"></a>Tkinter</h2><p>Tkinter 是 Tk Gui 工具包的一个 Python 绑定。Tk 是 Tcl 语言的原始 GUI 库。Tkinter 是作为一个 Python 装饰器实现的，从而在 Python 解释器中嵌入完整的 Tcl 解释器。也有其它流行的 Python GUI 工具包。最流行的是 wxPython、PyQt 和 PyGTK。</p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><p>Python 是一种通用的、动态的、面向对象的编程语言。它的设计目的在于强调程序员的生产力和代码的可读性。Python 最初由 Guido van Rossum 开发。它于 1991 年首次发行。Python 的灵感来自 ABC、Haskell、Java、Lisp、Icon 和 Perl 编程语言。<br>Python 是一种高级的、通用的、多平台的解释型语言。Python 非常适合学习 GUI 编程。</p>\n<p>Python 编程语言的官网是 <span class=\"exturl\" data-url=\"aHR0cDovL3B5dGhvbi5vcmcv\">python.org<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"Pillow\"><a href=\"#Pillow\" class=\"headerlink\" title=\"Pillow\"></a>Pillow</h2><p>Pillow 是一个 Python 库，用于打开、操作和保存许多不同的图像文件格式。本教程中一些示例使用了 Pillow。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python-pil.imagetk</span><br></pre></td></tr></table></figure>\n<p>在 Debain Linux 上，我们可以用它自带的包管理器安装 Pillow.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ yum install python-imaging</span><br></pre></td></tr></table></figure>\n<p>在使用 RPM 包格式的系统上，我们使用上述命令安装 Pillow。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pip install pillow</span><br></pre></td></tr></table></figure>\n<p>作为替代，我们还可以用 <code>pip</code> 安装 Pillow。</p>\n<h2 id=\"Tkinter-简单示例\"><a href=\"#Tkinter-简单示例\" class=\"headerlink\" title=\"Tkinter 简单示例\"></a>Tkinter 简单示例</h2><p>在我们第一个示例中，我们在屏幕上显示一个基础窗口。</p>\n<figure class=\"highlight py\"><figcaption><span>simple.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This script shows a simple window</span></span><br><span class=\"line\"><span class=\"string\">on the screen.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, BOTH</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Simple&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;250x150+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>虽然这段代码非常少，但应用程序窗口可以做很多事。它可以被重设尺寸、最大化或最小化。它涉及的所有复杂操作都对应用程序开发者隐藏了。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, BOTH</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame</span><br></pre></td></tr></table></figure>\n<p>此处我们引自 <code>Tk</code> 和 <code>Frame</code> 类，二者都是常量。<code>Tk</code> 类用于创建根窗口。<code>Frame</code> 是其它小部件的容器。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br></pre></td></tr></table></figure>\n<p>我们的示例类继承 <code>Frame</code> 容器小部件。在 <code>__init__</code> 构造方法中，我们调用继承类的构造函数。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.initUI()</span><br></pre></td></tr></table></figure>\n<p>我们将用户界面的创建委托给 <code>initUI</code> 方法。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.master.title(<span class=\"string\">&quot;Simple&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们用 <code>title()</code> 方法设置窗口的标题。<code>master</code> 属性允许我们访问根窗口（Tk）。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p><code>pack</code> 方法是 Tkinter 中的三个几何管理器之一。它将小部件组织到水平或垂直盒中。此处我们将通过 <code>self</code> 属性访问到的 <code>Frame</code> 小部件放入 Tk 根窗口中。它向两个方向扩展。换句话说，它占用整个根窗口的空间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">root = Tk()</span><br></pre></td></tr></table></figure>\n<p>根窗口已创建。根窗口是我们程序中的主应用程序窗口。它有标题栏和边框。这些由窗口管理器提供。它必须先于其它任何小部件被创建。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">root.geometry(<span class=\"string\">&quot;250x150+300+300&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>geometry()</code> 方法为窗口设置大小，并放置在屏幕上。前两个参数是窗口的宽度和高度，后两个参数是屏幕 x 与 y 坐标。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">app = Example()</span><br></pre></td></tr></table></figure>\n<p>此处我们创建应用程序实例。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">root.mainloop()</span><br></pre></td></tr></table></figure>\n<p>最后，我们进入主循环。事件处理从这里开始。主循环从窗口系统接收事件，并派发到应用程序小部件中。当我们点击标题栏的关闭按钮，或调用 <code>quit()</code> 方法时，它将被终止。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/simple.png?ezimgfmt=rs:252x175/rscb1/ng:webp/ngcb1\" alt=\"Simple\" loading=\"lazy\"><br>Figure: Simple window</p>\n<h2 id=\"Tkinter-窗口居中\"><a href=\"#Tkinter-窗口居中\" class=\"headerlink\" title=\"Tkinter 窗口居中\"></a>Tkinter 窗口居中</h2><p>此脚本使窗口在屏幕上居中。</p>\n<figure class=\"highlight py\"><figcaption><span>center_window.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This script centers a small</span></span><br><span class=\"line\"><span class=\"string\">window on the screen.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, BOTH</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Centered window&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.centerWindow()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">centerWindow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        w = <span class=\"number\">290</span></span><br><span class=\"line\">        h = <span class=\"number\">150</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sw = self.master.winfo_screenwidth()</span><br><span class=\"line\">        sh = self.master.winfo_screenheight()</span><br><span class=\"line\"></span><br><span class=\"line\">        x = (sw - w)/<span class=\"number\">2</span></span><br><span class=\"line\">        y = (sh - h)/<span class=\"number\">2</span></span><br><span class=\"line\">        self.master.geometry(<span class=\"string\">&#x27;%dx%d+%d+%d&#x27;</span> % (w, h, x, y))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>我们需要获得窗口和屏幕的尺寸，以便将窗口定位到显示器屏幕中央。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">w = <span class=\"number\">290</span></span><br><span class=\"line\">h = <span class=\"number\">150</span></span><br></pre></td></tr></table></figure>\n<p>这里是应用程序窗口的宽高值。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">sw = self.master.winfo_screenwidth()</span><br><span class=\"line\">sh = self.master.winfo_screenheight()</span><br></pre></td></tr></table></figure>\n<p>我们确定了屏幕的宽高。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = (sw - w)/<span class=\"number\">2</span></span><br><span class=\"line\">y = (sh - h)/<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>我们计算所需的 x 和 y 坐标。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.master.geometry(<span class=\"string\">&#x27;%dx%d+%d+%d&#x27;</span> % (w, h, x, y))</span><br></pre></td></tr></table></figure>\n<p>最后，<code>geometry()</code> 方法用于将窗口放置到屏幕中央。</p>\n<h2 id=\"Tkinter-Quit-button\"><a href=\"#Tkinter-Quit-button\" class=\"headerlink\" title=\"Tkinter Quit button\"></a>Tkinter Quit button</h2><p>在本章最后一个示例中，我们创建一个带有退出按钮的应用程序。当我们按下按钮时，应用程序终止。</p>\n<figure class=\"highlight py\"><figcaption><span>quit_button.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program creates a Quit</span></span><br><span class=\"line\"><span class=\"string\">button. When we press the button,</span></span><br><span class=\"line\"><span class=\"string\">the application terminates.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, BOTH</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Button, Style</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.style = Style()</span><br><span class=\"line\">        self.style.theme_use(<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Quit button&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        quitButton = Button(self, text=<span class=\"string\">&quot;Quit&quot;</span>,</span><br><span class=\"line\">            command=self.quit)</span><br><span class=\"line\">        quitButton.place(x=<span class=\"number\">50</span>, y=<span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;250x150+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>我们将 <code>Button</code> 定位到窗口上。点击按钮将终止此应用。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Button, Style</span><br></pre></td></tr></table></figure>\n<p>Tkinter 提供小部件的主题化。主题化小部件可以从 <code>ttk</code> 模块导入。在写作本文时，并非所有小部件都可以被主题化。例如，菜单和列表框就不受支持。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.style = Style()</span><br><span class=\"line\">self.style.theme_use(<span class=\"string\">&quot;default&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们为小部件应用一个主题。受支持的主题有 calm、default、alt 或 classic。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">quitButton = Button(self, text=<span class=\"string\">&quot;Quit&quot;</span>,</span><br><span class=\"line\">    command=self.quit)</span><br></pre></td></tr></table></figure>\n<p>我们创建一个 <code>Button</code> 小部件实例。按钮的父级是 <code>Frame</code> 容器。我们为按钮提供了标签和命令。该命令指定了当我们按下按钮时被调用的方法。在我们的示例中，<code>quit()</code> 方法被调用，它将终止应用程序。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">quitButton.place(x=<span class=\"number\">50</span>, y=<span class=\"number\">50</span>)</span><br></pre></td></tr></table></figure>\n<p>我们用 <code>place</code> 几何管理器来定位按钮的绝对坐标——距离窗口左上角 50x50px 处。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/quitbutton.png?ezimgfmt=rs:252x176/rscb1/ng:webp/ngcb1\" alt=\"Quit button\" loading=\"lazy\"><br>Figure: Quit button</p>\n<p>本部分介绍了 Tkinter 工具包。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL2ludHJvZHVjdGlvbi8=\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/layout\">下一章</a></p>\n"},{"title":"Tkinter 菜单与工具栏","url":"/translation/zt-tkinter/menustoolbars.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL21lbnVzdG9vbGJhcnMv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/widgets\">上一章</a> <a href=\"/translation/zt-tkinter/dialogs\">下一章</a></p>\n<blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-05-10</em></p>\n</blockquote>\n<p>在 Tkinter 教程的这一部分，我们将使用菜单和工具栏。</p>\n<p>菜单栏是一个应用程序的经典 UI 部分。它是一组位于各种菜单中的命令集。我们将大多数命令按逻辑性分组。有一些公认的标准，能够进一步降低学习新应用程序的时间成本。菜单组织那些我们可在应用程序中使用的命令。工具栏提供对最常用命令的快捷访问。</p>\n<h2 id=\"Tkinter-simple-menu\"><a href=\"#Tkinter-simple-menu\" class=\"headerlink\" title=\"Tkinter simple menu\"></a>Tkinter simple menu</h2><p>第一个示例显示了简单的菜单栏。</p>\n<figure class=\"highlight py\"><figcaption><span>simple_menu.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program shows a simple</span></span><br><span class=\"line\"><span class=\"string\">menu. It has one action, which</span></span><br><span class=\"line\"><span class=\"string\">will terminate the program, when</span></span><br><span class=\"line\"><span class=\"string\">selected.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Menu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Simple menu&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        menubar = Menu(self.master)</span><br><span class=\"line\">        self.master.config(menu=menubar)</span><br><span class=\"line\"></span><br><span class=\"line\">        fileMenu = Menu(menubar)</span><br><span class=\"line\">        fileMenu.add_command(label=<span class=\"string\">&quot;Exit&quot;</span>, command=self.onExit)</span><br><span class=\"line\">        menubar.add_cascade(label=<span class=\"string\">&quot;File&quot;</span>, menu=fileMenu)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onExit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.quit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;250x150+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>本示例将显示包含一项的菜单。通过选择退出菜单项，我们关闭应用程序。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">menubar = Menu(self.master)</span><br><span class=\"line\">self.master.config(menu=menubar)</span><br></pre></td></tr></table></figure>\n<p>此处我们创建一个菜单栏。它是一个常规 <code>Menu</code> 小部件，被配置为根窗口的菜单栏。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">fileMenu = Menu(menubar)</span><br></pre></td></tr></table></figure>\n<p>我们创建一个「文件」菜单对象。菜单是包含命令的下拉窗口。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">fileMenu.add_command(label=<span class=\"string\">&quot;Exit&quot;</span>, command=self.onExit)</span><br></pre></td></tr></table></figure>\n<p>我们添加命令到「文件」菜单中。此命令将调用 <code>onExit()</code> 方法。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">menubar.add_cascade(label=<span class=\"string\">&quot;File&quot;</span>, menu=fileMenu)</span><br></pre></td></tr></table></figure>\n<p>「文件」菜单通过 <code>add_cascade()</code> 方法添加到了菜单栏中。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/simplemenu.png?ezimgfmt=rs:252x206/rscb1/ng:webp/ngcb1\" alt=\"Simple menu\" loading=\"lazy\"><br>Figure: Simple menu</p>\n<h2 id=\"Tkinter-子菜单\"><a href=\"#Tkinter-子菜单\" class=\"headerlink\" title=\"Tkinter 子菜单\"></a>Tkinter 子菜单</h2><p>子菜单是插入到其它菜单中的菜单对象。下个示例将进行演示。</p>\n<figure class=\"highlight py\"><figcaption><span>submenu.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script we create a submenu</span></span><br><span class=\"line\"><span class=\"string\">a separator and keyboard shortcuts to menus.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Menu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Submenu&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        menubar = Menu(self.master)</span><br><span class=\"line\">        self.master.config(menu=menubar)</span><br><span class=\"line\"></span><br><span class=\"line\">        fileMenu = Menu(menubar)</span><br><span class=\"line\"></span><br><span class=\"line\">        submenu = Menu(fileMenu)</span><br><span class=\"line\">        submenu.add_command(label=<span class=\"string\">&quot;New feed&quot;</span>)</span><br><span class=\"line\">        submenu.add_command(label=<span class=\"string\">&quot;Bookmarks&quot;</span>)</span><br><span class=\"line\">        submenu.add_command(label=<span class=\"string\">&quot;Mail&quot;</span>)</span><br><span class=\"line\">        fileMenu.add_cascade(label=<span class=\"string\">&#x27;Import&#x27;</span>, menu=submenu, underline=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        fileMenu.add_separator()</span><br><span class=\"line\"></span><br><span class=\"line\">        fileMenu.add_command(label=<span class=\"string\">&quot;Exit&quot;</span>, underline=<span class=\"number\">0</span>, command=self.onExit)</span><br><span class=\"line\">        menubar.add_cascade(label=<span class=\"string\">&quot;File&quot;</span>, underline=<span class=\"number\">0</span>, menu=fileMenu)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onExit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.quit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;250x150+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在本示例中，我们在文件菜单的子菜单中有三个选项。我们创建了一个分隔符和键盘快捷键。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">submenu = Menu(fileMenu)</span><br><span class=\"line\">submenu.add_command(label=<span class=\"string\">&quot;New feed&quot;</span>)</span><br><span class=\"line\">submenu.add_command(label=<span class=\"string\">&quot;Bookmarks&quot;</span>)</span><br><span class=\"line\">submenu.add_command(label=<span class=\"string\">&quot;Mail&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们有一个包含三个命令的子菜单。该子菜单是常规菜单。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">fileMenu.add_cascade(label=<span class=\"string\">&#x27;Import&#x27;</span>, menu=submenu, underline=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>通过添加菜单到 <code>fileMenu</code> 而非菜单栏，我们就创建了子菜单。<code>underline</code> 参数创建键盘快捷键。它提供一个应标下划线字符的位置。在我们的例子中，它是首位。位置自零开始。当我们点击「文件」菜单时，显示弹出窗口。「导入」菜单有一个下划线字符。我们可以用鼠标指针或 Alt+I 快捷键选中它。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">fileMenu.add_separator()</span><br></pre></td></tr></table></figure>\n<p>分隔符是一条水平线，在视觉上划分菜单命令。通过这种方式，我们可以将菜单项按逻辑性分组。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/submenu.png?ezimgfmt=rs:252x206/rscb1/ng:webp/ngcb1\" alt=\"Submenu\" loading=\"lazy\"><br>Figure: Submenu</p>\n<h2 id=\"Tkinter-弹出菜单\"><a href=\"#Tkinter-弹出菜单\" class=\"headerlink\" title=\"Tkinter 弹出菜单\"></a>Tkinter 弹出菜单</h2><p>在下个示例中，我们创建一个弹出菜单。弹出菜单也称为上下文菜单。它可以显示在窗口的客户端区域的任何地方。</p>\n<figure class=\"highlight py\"><figcaption><span>popup_menu.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this program, we create</span></span><br><span class=\"line\"><span class=\"string\">a popup menu.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Menu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Popup menu&quot;</span>)</span><br><span class=\"line\">        self.menu = Menu(self.master, tearoff=<span class=\"number\">0</span>)</span><br><span class=\"line\">        self.menu.add_command(label=<span class=\"string\">&quot;Beep&quot;</span>, command=self.bell)</span><br><span class=\"line\">        self.menu.add_command(label=<span class=\"string\">&quot;Exit&quot;</span>, command=self.onExit)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.master.bind(<span class=\"string\">&quot;&lt;Button-3&gt;&quot;</span>, self.showMenu)</span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">showMenu</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        self.menu.post(e.x_root, e.y_root)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onExit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.quit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;250x150+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在本示例中，我们创建一个带两条命令的弹出菜单。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.menu = Menu(self.master, tearoff=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>上下文菜单是常规 <code>Menu</code> 小部件。<code>tearoff</code> 特性被关闭。现在它无法将窗口分离到顶层窗口中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.master.bind(<span class=\"string\">&quot;&lt;Button-3&gt;&quot;</span>, self.showMenu)</span><br></pre></td></tr></table></figure>\n<p>我们将 <code>&lt;Button-3&gt;</code> 事件绑定到 <code>showMenu()</code> 方法上。该事件将在我们右击窗口的客户端区域时生成。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">showMenu</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">    self.menu.post(e.x_root, e.y_root)</span><br></pre></td></tr></table></figure>\n<p><code>showMenu()</code> 方法显示上下文菜单。该弹出菜单显示在鼠标点击的 x 与 y 坐标出。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/popupmenu.png?ezimgfmt=rs:252x176/rscb1/ng:webp/ngcb1\" alt=\"Popup menu\" loading=\"lazy\"><br>Figure: Popup menu</p>\n<h2 id=\"Tkinter-工具栏\"><a href=\"#Tkinter-工具栏\" class=\"headerlink\" title=\"Tkinter 工具栏\"></a>Tkinter 工具栏</h2><p>菜单组织那些我们可在应用程序中使用的命令。工具栏提供对最常用命令的快捷访问。Tkinter 中没有工具栏小部件。</p>\n<figure class=\"highlight py\"><figcaption><span>toolbar.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this program, we create a toolbar.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageTk</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Menu, Button</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> LEFT, TOP, X, FLAT, RAISED</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Toolbar&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        menubar = Menu(self.master)</span><br><span class=\"line\">        self.fileMenu = Menu(self.master, tearoff=<span class=\"number\">0</span>)</span><br><span class=\"line\">        self.fileMenu.add_command(label=<span class=\"string\">&quot;Exit&quot;</span>, command=self.onExit)</span><br><span class=\"line\">        menubar.add_cascade(label=<span class=\"string\">&quot;File&quot;</span>, menu=self.fileMenu)</span><br><span class=\"line\"></span><br><span class=\"line\">        toolbar = Frame(self.master, bd=<span class=\"number\">1</span>, relief=RAISED)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.img = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;exit.png&quot;</span>)</span><br><span class=\"line\">        eimg = ImageTk.PhotoImage(self.img)</span><br><span class=\"line\"></span><br><span class=\"line\">        exitButton = Button(toolbar, image=eimg, relief=FLAT,</span><br><span class=\"line\">            command=self.quit)</span><br><span class=\"line\">        exitButton.image = eimg</span><br><span class=\"line\">        exitButton.pack(side=LEFT, padx=<span class=\"number\">2</span>, pady=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        toolbar.pack(side=TOP, fill=X)</span><br><span class=\"line\">        self.master.config(menu=menubar)</span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onExit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.quit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;250x150+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>我们的工具栏在框架上，我们将按钮放入其中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">toolbar = Frame(self.master, bd=<span class=\"number\">1</span>, relief=RAISED)</span><br></pre></td></tr></table></figure>\n<p>创建了一个菜单栏。它是一个框架。我们创建了一个凸起的边框，以便工具栏的边框可见。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.img = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;exit.png&quot;</span>)</span><br><span class=\"line\">eimg = ImageTk.PhotoImage(self.img)</span><br></pre></td></tr></table></figure>\n<p>创建了用于工具栏按钮的图像和照片图像。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">exitButton = Button(toolbar, image=eimg, relief=FLAT,</span><br><span class=\"line\">    command=self.quit)</span><br></pre></td></tr></table></figure>\n<p>创建了按钮小部件。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">exitButton.pack(side=LEFT, padx=<span class=\"number\">2</span>, pady=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>工具栏是一个框架，而框架是容器小部件。我们将按钮装入左侧，并在右侧加入填充。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">toolbar.pack(side=TOP, fill=X)</span><br></pre></td></tr></table></figure>\n<p>工具栏本身被打包到顶层菜单上；它水平伸展。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/toolbar.png?ezimgfmt=rs:252x206/rscb1/ng:webp/ngcb1\" alt=\"Toolbar\" loading=\"lazy\"><br>Figure: Toolbar</p>\n<p>在 Tkinter 教程的这一部分，我们使用了菜单和工具栏。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL21lbnVzdG9vbGJhcnMv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/widgets\">上一章</a> <a href=\"/translation/zt-tkinter/dialogs\">下一章</a></p>\n"},{"title":"Tkinter 布局管理","url":"/translation/zt-tkinter/layout.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL2xheW91dC8=\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/introduction\">上一章</a> <a href=\"/translation/zt-tkinter/attributes\">下一章</a></p>\n<blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-05-08</em></p>\n</blockquote>\n<p>在 Tkinter 教程的这一部分，我们介绍布局管理器。</p>\n<p>当我们设计应用程序的 GUI 时，我们要决定将使用哪些小部件，以及如何在应用程序中组织这些小部件。为了组织小部件，我们使用称为布局管理器的专用不可见对象。</p>\n<p>有两种小部件：容器和子小部件。容器将子小部件分组到合适的布局中。</p>\n<p>Tkinter 有三种内置管理器：<code>pack</code>、<code>grid</code>、<code>place</code>。其中 <code>place</code> 几何管理器通过水平和垂直盒组织小部件。<code>grid</code> 几何管理器使用二维网格中放置小部件。</p>\n<h2 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h2><p>在大多数情况下，程序员都应该使用布局管理器。在少数情况下，可以使用绝对定位。在绝对定位中，程序员应为以像素为单位，为每个小部件指定位置和大小。此时如果我们调整窗口大小，小部件的大小和位置不会改变。应用程序在不同平台上看起来不一样，并且在 Linux 上看着不错的应用程序，在 MacOS 上可能就不一样了。在应用程序中更改字体可能破坏布局。若将我们的应用程序翻译为语言，我们必须重做布局。</p>\n<figure class=\"highlight py\"><figcaption><span>absolute.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we lay out images</span></span><br><span class=\"line\"><span class=\"string\">using absolute positioning.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageTk</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, BOTH</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Label, Style</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Absolute positioning&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        Style().configure(<span class=\"string\">&quot;TFrame&quot;</span>, background=<span class=\"string\">&quot;#333&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        bard = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;bardejov.jpg&quot;</span>)</span><br><span class=\"line\">        bardejov = ImageTk.PhotoImage(bard)</span><br><span class=\"line\">        label1 = Label(self, image=bardejov)</span><br><span class=\"line\">        label1.image = bardejov</span><br><span class=\"line\">        label1.place(x=<span class=\"number\">20</span>, y=<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        rot = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;rotunda.jpg&quot;</span>)</span><br><span class=\"line\">        rotunda = ImageTk.PhotoImage(rot)</span><br><span class=\"line\">        label2 = Label(self, image=rotunda)</span><br><span class=\"line\">        label2.image = rotunda</span><br><span class=\"line\">        label2.place(x=<span class=\"number\">40</span>, y=<span class=\"number\">160</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        minc = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;mincol.jpg&quot;</span>)</span><br><span class=\"line\">        mincol = ImageTk.PhotoImage(minc)</span><br><span class=\"line\">        label3 = Label(self, image=mincol)</span><br><span class=\"line\">        label3.image = mincol</span><br><span class=\"line\">        label3.place(x=<span class=\"number\">170</span>, y=<span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;300x280+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>本示例中，我们使用绝对定位放置了三张图像。我们使用了 <code>place</code> 几何管理器。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageTk</span><br></pre></td></tr></table></figure>\n<p>我们使用 Python 成像库（PIL）中的 <code>Image</code> 和 <code>ImageTk</code> 模块。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">style = Style()</span><br><span class=\"line\">style.configure(<span class=\"string\">&quot;TFrame&quot;</span>, background=<span class=\"string\">&quot;#333&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们用样式将框架配置为深灰色背景。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">bard = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;bardejov.jpg&quot;</span>)</span><br><span class=\"line\">bardejov = ImageTk.PhotoImage(bard)</span><br></pre></td></tr></table></figure>\n<p>我们从当前工作路径下的图像创建一个图像对象和照片图像对象。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">label1 = Label(self, image=bardejov)</span><br></pre></td></tr></table></figure>\n<p>我们用图像创建一个 <code>Label</code>。标签可以包含文本或图像。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">label1.image = bardejov</span><br></pre></td></tr></table></figure>\n<p>我们必须保持对图像的引用，以防止图像被垃圾回收。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">label1.place(x=<span class=\"number\">20</span>, y=<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<p>标签旋转在框架内 x&#x3D;20 和 y&#x3D;30 坐标处。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/absolute.png?ezimgfmt=rs:302x306/rscb1/ng:webp/ngcb1\" alt=\"Absolute\" loading=\"lazy\"><br>Figure: Absolute positioning</p>\n<h2 id=\"Tkinter-Pack-管理器\"><a href=\"#Tkinter-Pack-管理器\" class=\"headerlink\" title=\"Tkinter Pack 管理器\"></a>Tkinter Pack 管理器</h2><p><code>pack</code> 几何管理器在水平盒与垂直盒中组织小部件。布局由 <code>fill</code>、<code>expand</code> 和 <code>side</code> 选项控制。</p>\n<h3 id=\"按钮示例\"><a href=\"#按钮示例\" class=\"headerlink\" title=\"按钮示例\"></a>按钮示例</h3><p>在下例中，我们定位两个按钮到窗口的右下角。我们使用 <code>pack</code> 管理器。</p>\n<figure class=\"highlight py\"><figcaption><span>buttons.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we use the pack manager</span></span><br><span class=\"line\"><span class=\"string\">to position two buttons in the</span></span><br><span class=\"line\"><span class=\"string\">bottom-right corner of the window.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, RIGHT, BOTH, RAISED</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Button, Style</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Buttons&quot;</span>)</span><br><span class=\"line\">        self.style = Style()</span><br><span class=\"line\">        self.style.theme_use(<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        frame = Frame(self, relief=RAISED, borderwidth=<span class=\"number\">1</span>)</span><br><span class=\"line\">        frame.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        closeButton = Button(self, text=<span class=\"string\">&quot;Close&quot;</span>)</span><br><span class=\"line\">        closeButton.pack(side=RIGHT, padx=<span class=\"number\">5</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\">        okButton = Button(self, text=<span class=\"string\">&quot;OK&quot;</span>)</span><br><span class=\"line\">        okButton.pack(side=RIGHT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;300x200+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>我们有两个框架。分别是基础框架和附加框架，附加框架在两个维度上展开，并将两个按钮推向基础框架的底部。按钮将被置于水平盒内右侧。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">frame = Frame(self, relief=RAISED, borderwidth=<span class=\"number\">1</span>)</span><br><span class=\"line\">frame.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>我们创建另一个 <code>Frame</code> 小部件。此小部件占据了大部分区域。我们修改框架的边界，使框架可见；默认情况下是扁平的。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">closeButton = Button(self, text=<span class=\"string\">&quot;Close&quot;</span>)</span><br><span class=\"line\">closeButton.pack(side=RIGHT, padx=<span class=\"number\">5</span>, pady=<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>创建一个 <code>closeButton</code>。它被放入水平盒中。<code>side</code> 参数使按钮被置于水平方向右侧。<code>padx</code> 和 <code>pady</code> 参数在小部件之间留出一些空间。<code>padx</code> 在按钮小部件之间和 <code>closeButton</code> 与根窗口右边框之间留出了一些空间。<code>pady</code> 在按钮小部件与框架边框、根窗口边框之间留出了一些空间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">okButton.pack(side=RIGHT)</span><br></pre></td></tr></table></figure>\n<p><code>okButton</code> 置于 <code>closeButton</code> 旁边，二者之间有 5px 空间。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/buttons.png?ezimgfmt=rs:302x226/rscb1/ng:webp/ngcb1\" alt=\"Buttons example\" loading=\"lazy\"><br>Figure: Buttons example</p>\n<h2 id=\"复习示例\"><a href=\"#复习示例\" class=\"headerlink\" title=\"复习示例\"></a>复习示例</h2><p><code>pack</code> 管理器是一个简单布局管理器。它可用于简单布局任务。为了创建更加复杂的布局，我们要使用更多框架，每个框架都有自己的包管理器。</p>\n<figure class=\"highlight py\"><figcaption><span>review.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we use the pack</span></span><br><span class=\"line\"><span class=\"string\">manager to create a review example.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Text, TOP, BOTH, X, N, LEFT</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Label, Entry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Review&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        frame1 = Frame(self)</span><br><span class=\"line\">        frame1.pack(fill=X)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl1 = Label(frame1, text=<span class=\"string\">&quot;Title&quot;</span>, width=<span class=\"number\">6</span>)</span><br><span class=\"line\">        lbl1.pack(side=LEFT, padx=<span class=\"number\">5</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        entry1 = Entry(frame1)</span><br><span class=\"line\">        entry1.pack(fill=X, padx=<span class=\"number\">5</span>, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        frame2 = Frame(self)</span><br><span class=\"line\">        frame2.pack(fill=X)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl2 = Label(frame2, text=<span class=\"string\">&quot;Author&quot;</span>, width=<span class=\"number\">6</span>)</span><br><span class=\"line\">        lbl2.pack(side=LEFT, padx=<span class=\"number\">5</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        entry2 = Entry(frame2)</span><br><span class=\"line\">        entry2.pack(fill=X, padx=<span class=\"number\">5</span>, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        frame3 = Frame(self)</span><br><span class=\"line\">        frame3.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl3 = Label(frame3, text=<span class=\"string\">&quot;Review&quot;</span>, width=<span class=\"number\">6</span>)</span><br><span class=\"line\">        lbl3.pack(side=LEFT, anchor=N, padx=<span class=\"number\">5</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        txt = Text(frame3)</span><br><span class=\"line\">        txt.pack(fill=BOTH, pady=<span class=\"number\">5</span>, padx=<span class=\"number\">5</span>, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;300x300+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>本示例展示了如何用若干框架和包管理器创建更复杂的布局。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>第一个框架是基础框架，用于置入其它框架。注意，除了在框架内组织子小部件外，我们还管理基础框架上的框架。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">frame1 = Frame(self)</span><br><span class=\"line\">frame1.pack(fill=X)</span><br><span class=\"line\"></span><br><span class=\"line\">lbl1 = Label(frame1, text=<span class=\"string\">&quot;Title&quot;</span>, width=<span class=\"number\">6</span>)</span><br><span class=\"line\">lbl1.pack(side=LEFT, padx=<span class=\"number\">5</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">entry1 = Entry(frame1)</span><br><span class=\"line\">entry1.pack(fill=X, padx=<span class=\"number\">5</span>, expand=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>前两个小部件放在第一个框架中。此入口根据 <code>fill</code> 和 <code>expand</code> 参数水平拉伸。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">frame3 = Frame(self)</span><br><span class=\"line\">frame3.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">lbl3 = Label(frame3, text=<span class=\"string\">&quot;Review&quot;</span>, width=<span class=\"number\">6</span>)</span><br><span class=\"line\">lbl3.pack(side=LEFT, anchor=N, padx=<span class=\"number\">5</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">txt = Text(frame3)</span><br><span class=\"line\">txt.pack(fill=BOTH, pady=<span class=\"number\">5</span>, padx=<span class=\"number\">5</span>, expand=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>在第三个框架内，我们置入标签小部件和文本小部件。标签固定在北边（上方）。文本小部件占据整个剩余区域。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/review.png?ezimgfmt=rs:302x326/rscb1/ng:webp/ngcb1\" alt=\"Review example\" loading=\"lazy\"><br>Figure: Review example</p>\n<h2 id=\"Tkinter-网格管理器\"><a href=\"#Tkinter-网格管理器\" class=\"headerlink\" title=\"Tkinter 网格管理器\"></a>Tkinter 网格管理器</h2><p>Tkinter 的 <code>grid</code> 几何管理器用于创建计算机的骨架。</p>\n<figure class=\"highlight py\"><figcaption><span>calculator.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we use the grid manager</span></span><br><span class=\"line\"><span class=\"string\">to create a skeleton of a calculator.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, W, E</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Button, Entry, Style</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Calculator&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        Style().configure(<span class=\"string\">&quot;TButton&quot;</span>, padding=(<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\">            font=<span class=\"string\">&#x27;serif 10&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.columnconfigure(<span class=\"number\">0</span>, pad=<span class=\"number\">3</span>)</span><br><span class=\"line\">        self.columnconfigure(<span class=\"number\">1</span>, pad=<span class=\"number\">3</span>)</span><br><span class=\"line\">        self.columnconfigure(<span class=\"number\">2</span>, pad=<span class=\"number\">3</span>)</span><br><span class=\"line\">        self.columnconfigure(<span class=\"number\">3</span>, pad=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.rowconfigure(<span class=\"number\">0</span>, pad=<span class=\"number\">3</span>)</span><br><span class=\"line\">        self.rowconfigure(<span class=\"number\">1</span>, pad=<span class=\"number\">3</span>)</span><br><span class=\"line\">        self.rowconfigure(<span class=\"number\">2</span>, pad=<span class=\"number\">3</span>)</span><br><span class=\"line\">        self.rowconfigure(<span class=\"number\">3</span>, pad=<span class=\"number\">3</span>)</span><br><span class=\"line\">        self.rowconfigure(<span class=\"number\">4</span>, pad=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        entry = Entry(self)</span><br><span class=\"line\">        entry.grid(row=<span class=\"number\">0</span>, columnspan=<span class=\"number\">4</span>, sticky=W+E)</span><br><span class=\"line\">        cls = Button(self, text=<span class=\"string\">&quot;Cls&quot;</span>)</span><br><span class=\"line\">        cls.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">0</span>)</span><br><span class=\"line\">        bck = Button(self, text=<span class=\"string\">&quot;Back&quot;</span>)</span><br><span class=\"line\">        bck.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">1</span>)</span><br><span class=\"line\">        lbl = Button(self)</span><br><span class=\"line\">        lbl.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">2</span>)</span><br><span class=\"line\">        clo = Button(self, text=<span class=\"string\">&quot;Close&quot;</span>)</span><br><span class=\"line\">        clo.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">3</span>)</span><br><span class=\"line\">        sev = Button(self, text=<span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\">        sev.grid(row=<span class=\"number\">2</span>, column=<span class=\"number\">0</span>)</span><br><span class=\"line\">        eig = Button(self, text=<span class=\"string\">&quot;8&quot;</span>)</span><br><span class=\"line\">        eig.grid(row=<span class=\"number\">2</span>, column=<span class=\"number\">1</span>)</span><br><span class=\"line\">        nin = Button(self, text=<span class=\"string\">&quot;9&quot;</span>)</span><br><span class=\"line\">        nin.grid(row=<span class=\"number\">2</span>, column=<span class=\"number\">2</span>)</span><br><span class=\"line\">        div = Button(self, text=<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">        div.grid(row=<span class=\"number\">2</span>, column=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        fou = Button(self, text=<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">        fou.grid(row=<span class=\"number\">3</span>, column=<span class=\"number\">0</span>)</span><br><span class=\"line\">        fiv = Button(self, text=<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\">        fiv.grid(row=<span class=\"number\">3</span>, column=<span class=\"number\">1</span>)</span><br><span class=\"line\">        six = Button(self, text=<span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">        six.grid(row=<span class=\"number\">3</span>, column=<span class=\"number\">2</span>)</span><br><span class=\"line\">        mul = Button(self, text=<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">        mul.grid(row=<span class=\"number\">3</span>, column=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        one = Button(self, text=<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">        one.grid(row=<span class=\"number\">4</span>, column=<span class=\"number\">0</span>)</span><br><span class=\"line\">        two = Button(self, text=<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">        two.grid(row=<span class=\"number\">4</span>, column=<span class=\"number\">1</span>)</span><br><span class=\"line\">        thr = Button(self, text=<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">        thr.grid(row=<span class=\"number\">4</span>, column=<span class=\"number\">2</span>)</span><br><span class=\"line\">        mns = Button(self, text=<span class=\"string\">&quot;-&quot;</span>)</span><br><span class=\"line\">        mns.grid(row=<span class=\"number\">4</span>, column=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        zer = Button(self, text=<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">        zer.grid(row=<span class=\"number\">5</span>, column=<span class=\"number\">0</span>)</span><br><span class=\"line\">        dot = Button(self, text=<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">        dot.grid(row=<span class=\"number\">5</span>, column=<span class=\"number\">1</span>)</span><br><span class=\"line\">        equ = Button(self, text=<span class=\"string\">&quot;=&quot;</span>)</span><br><span class=\"line\">        equ.grid(row=<span class=\"number\">5</span>, column=<span class=\"number\">2</span>)</span><br><span class=\"line\">        pls = Button(self, text=<span class=\"string\">&quot;+&quot;</span>)</span><br><span class=\"line\">        pls.grid(row=<span class=\"number\">5</span>, column=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>网格管理器用于在框架容器内组织按钮。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">Style().configure(<span class=\"string\">&quot;TButton&quot;</span>, padding=(<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\">    font=<span class=\"string\">&#x27;serif 10&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们为 <code>Button</code> 小部件指定字体，并包含内边距。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.columnconfigure(<span class=\"number\">0</span>, pad=<span class=\"number\">3</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\">self.rowconfigure(<span class=\"number\">0</span>, pad=<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>我们用 <code>columnconfigure()</code> 和 <code>rowconfigure()</code> 方法来定义网格列与行中的空间。这样，我们成功通过空间将按钮隔开。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">entry = Entry(self)</span><br><span class=\"line\">entry.grid(row=<span class=\"number\">0</span>, columnspan=<span class=\"number\">4</span>, sticky=W+E)</span><br></pre></td></tr></table></figure>\n<p><code>Entry</code> 小部件是显示数字的地方。该小部件被置于第一行且横跨四列。小部件可能不会占据网格分配给单元格的所有空间。<code>sticky</code> 参数向指定方向展开小部件。在本示例中，我们确保入口小部件向从左向右展开。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">cls = Button(self, text=<span class=\"string\">&quot;Cls&quot;</span>)</span><br><span class=\"line\">cls.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p><code>cls</code> 按钮被置于第二行第一列。注意行与列自零开始。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.pack()</span><br></pre></td></tr></table></figure>\n<p><code>pack()</code> 方法显示框架小部件并给出它的初始大小。若未给出其它参数，则大小将恰好足够显示所有子小部件。此方法将框架小部件打包到顶层根窗口，该窗口也是一个容器。<code>grid</code> 几何管理器用于组织框架小部件内的按钮。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/calculator.png?ezimgfmt=rs:322x220/rscb1/ng:webp/ngcb1\" alt=\"Calculator\" loading=\"lazy\"><br>Figure: Calculator</p>\n<h2 id=\"窗口示例\"><a href=\"#窗口示例\" class=\"headerlink\" title=\"窗口示例\"></a>窗口示例</h2><p>以下示例使用 <code>grid</code> 管理器创建窗口对话框。</p>\n<figure class=\"highlight py\"><figcaption><span>windows.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we use the grid</span></span><br><span class=\"line\"><span class=\"string\">manager to create a more complicated Windows</span></span><br><span class=\"line\"><span class=\"string\">layout.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Text, BOTH, W, N, E, S</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Button, Label, Style</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Windows&quot;</span>)</span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.columnconfigure(<span class=\"number\">1</span>, weight=<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.columnconfigure(<span class=\"number\">3</span>, pad=<span class=\"number\">7</span>)</span><br><span class=\"line\">        self.rowconfigure(<span class=\"number\">3</span>, weight=<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.rowconfigure(<span class=\"number\">5</span>, pad=<span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl = Label(self, text=<span class=\"string\">&quot;Windows&quot;</span>)</span><br><span class=\"line\">        lbl.grid(sticky=W, pady=<span class=\"number\">4</span>, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        area = Text(self)</span><br><span class=\"line\">        area.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">0</span>, columnspan=<span class=\"number\">2</span>, rowspan=<span class=\"number\">4</span>,</span><br><span class=\"line\">            padx=<span class=\"number\">5</span>, sticky=E+W+S+N)</span><br><span class=\"line\"></span><br><span class=\"line\">        abtn = Button(self, text=<span class=\"string\">&quot;Activate&quot;</span>)</span><br><span class=\"line\">        abtn.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        cbtn = Button(self, text=<span class=\"string\">&quot;Close&quot;</span>)</span><br><span class=\"line\">        cbtn.grid(row=<span class=\"number\">2</span>, column=<span class=\"number\">3</span>, pady=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        hbtn = Button(self, text=<span class=\"string\">&quot;Help&quot;</span>)</span><br><span class=\"line\">        hbtn.grid(row=<span class=\"number\">5</span>, column=<span class=\"number\">0</span>, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        obtn = Button(self, text=<span class=\"string\">&quot;OK&quot;</span>)</span><br><span class=\"line\">        obtn.grid(row=<span class=\"number\">5</span>, column=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;350x300+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>本示例中，我们使用一个 <code>Label</code> 小部件、一个 <code>Text</code> 小部件和四个按钮。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.columnconfigure(<span class=\"number\">1</span>, weight=<span class=\"number\">1</span>)</span><br><span class=\"line\">self.columnconfigure(<span class=\"number\">3</span>, pad=<span class=\"number\">7</span>)</span><br><span class=\"line\">self.rowconfigure(<span class=\"number\">3</span>, weight=<span class=\"number\">1</span>)</span><br><span class=\"line\">self.rowconfigure(<span class=\"number\">5</span>, pad=<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n<p>我们为网格上的小部件定义一些空间。<code>weight</code> 参数使第二列和第四列可伸展。该行与列被文本小部件占据，因此所有剩余空间都被归它所有。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">lbl = Label(self, text=<span class=\"string\">&quot;Windows&quot;</span>)</span><br><span class=\"line\">lbl.grid(sticky=W, pady=<span class=\"number\">4</span>, padx=<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>标签小部件被创建并置于网格中。如果未指定行或列，则假定为首行首列。标签贴在西边，周围有一些填充。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">area = Text(self)</span><br><span class=\"line\">area.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">0</span>, columnspan=<span class=\"number\">2</span>, rowspan=<span class=\"number\">4</span>,</span><br><span class=\"line\">    padx=<span class=\"number\">5</span>, sticky=E+W+S+N)</span><br></pre></td></tr></table></figure>\n<p>文本小部件被创建，起始点位于第二行第一列。它跨越两列四行。小部件和根窗口的左边框之间有 4px 空间。最后，小部件粘贴在四条边上。因此当窗口调整大小时，文本小部件可向各方向伸展。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">abtn = Button(self, text=<span class=\"string\">&quot;Activate&quot;</span>)</span><br><span class=\"line\">abtn.grid(row=<span class=\"number\">1</span>, column=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cbtn = Button(self, text=<span class=\"string\">&quot;Close&quot;</span>)</span><br><span class=\"line\">cbtn.grid(row=<span class=\"number\">2</span>, column=<span class=\"number\">3</span>, pady=<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>这两个按钮位于文本小部件旁边。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">hbtn = Button(self, text=<span class=\"string\">&quot;Help&quot;</span>)</span><br><span class=\"line\">hbtn.grid(row=<span class=\"number\">5</span>, column=<span class=\"number\">0</span>, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">obtn = Button(self, text=<span class=\"string\">&quot;OK&quot;</span>)</span><br><span class=\"line\">obtn.grid(row=<span class=\"number\">5</span>, column=<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>这两个按钮在文本小部件下方；帮助按钮在第一列，OK 按钮在最后一列。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/windows.png?ezimgfmt=rs:352x326/rscb1/ng:webp/ngcb1\" alt=\"Windows example\" loading=\"lazy\"><br>Figure: Windows example</p>\n<p>在 Tkinter 教程的这一部分，我们涵盖了小部件的布局管理器。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL2xheW91dC8=\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/introduction\">上一章</a> <a href=\"/translation/zt-tkinter/attributes\">下一章</a></p>\n"},{"title":"Tkinter 贪吃蛇","url":"/translation/zt-tkinter/snake.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL3NuYWtlLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/drawing\">上一章</a></p>\n<blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-05-10</em></p>\n</blockquote>\n<p>在 Tkinter 教程的这一部分，我们创建一个贪吃蛇游戏副本。</p>\n<p>贪吃蛇是一个古老而经典的电子游戏。它最初创建于 70 年代末。后来它被引入个人电脑。在这个游戏中，玩家控制一条蛇。目标是尽可能吃掉更多的苹果。每当蛇吃掉一颗苹果，身体就长长一点。蛇必须避开墙壁和自己的身体。</p>\n<h2 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h2><p>蛇身体每一节的大小是 10px。用光标键控制蛇。最初，蛇有三节。游戏立即开始。当游戏结束时，我们将在屏幕中间显示游戏结束和分数。</p>\n<p>我们使用 <code>Canvas</code> 小部件来创建此游戏。游戏中的对象是图像。我们用画布方法创建图像项。我们通过画布方法使用标签来找到画布上的项目，进行碰撞检测。</p>\n<figure class=\"highlight py\"><figcaption><span>snake.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This is a simple Snake game</span></span><br><span class=\"line\"><span class=\"string\">clone.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageTk</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Canvas, ALL, NW</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cons</span>:</span><br><span class=\"line\">    BOARD_WIDTH = <span class=\"number\">300</span></span><br><span class=\"line\">    BOARD_HEIGHT = <span class=\"number\">300</span></span><br><span class=\"line\">    DELAY = <span class=\"number\">100</span></span><br><span class=\"line\">    DOT_SIZE = <span class=\"number\">10</span></span><br><span class=\"line\">    MAX_RAND_POS = <span class=\"number\">27</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Board</span>(<span class=\"title class_ inherited__\">Canvas</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(width=Cons.BOARD_WIDTH, height=Cons.BOARD_HEIGHT,</span><br><span class=\"line\">            background=<span class=\"string\">&quot;black&quot;</span>, highlightthickness=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initGame()</span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initGame</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;initializes game&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.inGame = <span class=\"literal\">True</span></span><br><span class=\"line\">        self.dots = <span class=\"number\">3</span></span><br><span class=\"line\">        self.score = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># variables used to move snake object</span></span><br><span class=\"line\">        self.moveX = Cons.DOT_SIZE</span><br><span class=\"line\">        self.moveY = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># starting apple coordinates</span></span><br><span class=\"line\">        self.appleX = <span class=\"number\">100</span></span><br><span class=\"line\">        self.appleY = <span class=\"number\">190</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.loadImages()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.createObjects()</span><br><span class=\"line\">        self.locateApple()</span><br><span class=\"line\">        self.bind_all(<span class=\"string\">&quot;&lt;Key&gt;&quot;</span>, self.onKeyPressed)</span><br><span class=\"line\">        self.after(Cons.DELAY, self.onTimer)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">loadImages</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;loads images from the disk&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            self.idot = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;dot.png&quot;</span>)</span><br><span class=\"line\">            self.dot = ImageTk.PhotoImage(self.idot)</span><br><span class=\"line\">            self.ihead = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;head.png&quot;</span>)</span><br><span class=\"line\">            self.head = ImageTk.PhotoImage(self.ihead)</span><br><span class=\"line\">            self.iapple = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;apple.png&quot;</span>)</span><br><span class=\"line\">            self.apple = ImageTk.PhotoImage(self.iapple)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">            sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">createObjects</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;creates objects on Canvas&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.create_text(<span class=\"number\">30</span>, <span class=\"number\">10</span>, text=<span class=\"string\">&quot;Score: &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(self.score),</span><br><span class=\"line\">                         tag=<span class=\"string\">&quot;score&quot;</span>, fill=<span class=\"string\">&quot;white&quot;</span>)</span><br><span class=\"line\">        self.create_image(self.appleX, self.appleY, image=self.apple,</span><br><span class=\"line\">            anchor=NW, tag=<span class=\"string\">&quot;apple&quot;</span>)</span><br><span class=\"line\">        self.create_image(<span class=\"number\">50</span>, <span class=\"number\">50</span>, image=self.head, anchor=NW,  tag=<span class=\"string\">&quot;head&quot;</span>)</span><br><span class=\"line\">        self.create_image(<span class=\"number\">30</span>, <span class=\"number\">50</span>, image=self.dot, anchor=NW, tag=<span class=\"string\">&quot;dot&quot;</span>)</span><br><span class=\"line\">        self.create_image(<span class=\"number\">40</span>, <span class=\"number\">50</span>, image=self.dot, anchor=NW, tag=<span class=\"string\">&quot;dot&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">checkAppleCollision</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;checks if the head of snake collides with apple&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        apple = self.find_withtag(<span class=\"string\">&quot;apple&quot;</span>)</span><br><span class=\"line\">        head = self.find_withtag(<span class=\"string\">&quot;head&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        x1, y1, x2, y2 = self.bbox(head)</span><br><span class=\"line\">        overlap = self.find_overlapping(x1, y1, x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ovr <span class=\"keyword\">in</span> overlap:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> apple[<span class=\"number\">0</span>] == ovr:</span><br><span class=\"line\">                self.score += <span class=\"number\">1</span></span><br><span class=\"line\">                x, y = self.coords(apple)</span><br><span class=\"line\">                self.create_image(x, y, image=self.dot, anchor=NW, tag=<span class=\"string\">&quot;dot&quot;</span>)</span><br><span class=\"line\">                self.locateApple()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">moveSnake</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;moves the Snake object&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dots = self.find_withtag(<span class=\"string\">&quot;dot&quot;</span>)</span><br><span class=\"line\">        head = self.find_withtag(<span class=\"string\">&quot;head&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        items = dots + head</span><br><span class=\"line\"></span><br><span class=\"line\">        z = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> z &lt; <span class=\"built_in\">len</span>(items)-<span class=\"number\">1</span>:</span><br><span class=\"line\">            c1 = self.coords(items[z])</span><br><span class=\"line\">            c2 = self.coords(items[z+<span class=\"number\">1</span>])</span><br><span class=\"line\">            self.move(items[z], c2[<span class=\"number\">0</span>]-c1[<span class=\"number\">0</span>], c2[<span class=\"number\">1</span>]-c1[<span class=\"number\">1</span>])</span><br><span class=\"line\">            z += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.move(head, self.moveX, self.moveY)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">checkCollisions</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;checks for collisions&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dots = self.find_withtag(<span class=\"string\">&quot;dot&quot;</span>)</span><br><span class=\"line\">        head = self.find_withtag(<span class=\"string\">&quot;head&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        x1, y1, x2, y2 = self.bbox(head)</span><br><span class=\"line\">        overlap = self.find_overlapping(x1, y1, x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> dot <span class=\"keyword\">in</span> dots:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> over <span class=\"keyword\">in</span> overlap:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> over == dot:</span><br><span class=\"line\">                  self.inGame = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> x1 &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.inGame = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> x1 &gt; Cons.BOARD_WIDTH - Cons.DOT_SIZE:</span><br><span class=\"line\">            self.inGame = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> y1 &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.inGame = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> y1 &gt; Cons.BOARD_HEIGHT - Cons.DOT_SIZE:</span><br><span class=\"line\">            self.inGame = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">locateApple</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;places the apple object on Canvas&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        apple = self.find_withtag(<span class=\"string\">&quot;apple&quot;</span>)</span><br><span class=\"line\">        self.delete(apple[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        r = random.randint(<span class=\"number\">0</span>, Cons.MAX_RAND_POS)</span><br><span class=\"line\">        self.appleX = r * Cons.DOT_SIZE</span><br><span class=\"line\">        r = random.randint(<span class=\"number\">0</span>, Cons.MAX_RAND_POS)</span><br><span class=\"line\">        self.appleY = r * Cons.DOT_SIZE</span><br><span class=\"line\"></span><br><span class=\"line\">        self.create_image(self.appleX, self.appleY, anchor=NW,</span><br><span class=\"line\">            image=self.apple, tag=<span class=\"string\">&quot;apple&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onKeyPressed</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;controls direction variables with cursor keys&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        key = e.keysym</span><br><span class=\"line\"></span><br><span class=\"line\">        LEFT_CURSOR_KEY = <span class=\"string\">&quot;Left&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == LEFT_CURSOR_KEY <span class=\"keyword\">and</span> self.moveX &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.moveX = -Cons.DOT_SIZE</span><br><span class=\"line\">            self.moveY = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        RIGHT_CURSOR_KEY = <span class=\"string\">&quot;Right&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == RIGHT_CURSOR_KEY <span class=\"keyword\">and</span> self.moveX &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.moveX = Cons.DOT_SIZE</span><br><span class=\"line\">            self.moveY = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        RIGHT_CURSOR_KEY = <span class=\"string\">&quot;Up&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == RIGHT_CURSOR_KEY <span class=\"keyword\">and</span> self.moveY &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.moveX = <span class=\"number\">0</span></span><br><span class=\"line\">            self.moveY = -Cons.DOT_SIZE</span><br><span class=\"line\"></span><br><span class=\"line\">        DOWN_CURSOR_KEY = <span class=\"string\">&quot;Down&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == DOWN_CURSOR_KEY <span class=\"keyword\">and</span> self.moveY &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.moveX = <span class=\"number\">0</span></span><br><span class=\"line\">            self.moveY = Cons.DOT_SIZE</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onTimer</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;creates a game cycle each timer event&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.drawScore()</span><br><span class=\"line\">        self.checkCollisions()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.inGame:</span><br><span class=\"line\">            self.checkAppleCollision()</span><br><span class=\"line\">            self.moveSnake()</span><br><span class=\"line\">            self.after(Cons.DELAY, self.onTimer)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.gameOver()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">drawScore</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;draws score&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        score = self.find_withtag(<span class=\"string\">&quot;score&quot;</span>)</span><br><span class=\"line\">        self.itemconfigure(score, text=<span class=\"string\">&quot;Score: &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(self.score))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">gameOver</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;deletes all objects and draws game over message&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.delete(ALL)</span><br><span class=\"line\">        self.create_text(self.winfo_width() /<span class=\"number\">2</span>, self.winfo_height()/<span class=\"number\">2</span>,</span><br><span class=\"line\">            text=<span class=\"string\">&quot;Game Over with score &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(self.score), fill=<span class=\"string\">&quot;white&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Snake</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.master.title(<span class=\"string\">&#x27;Snake&#x27;</span>)</span><br><span class=\"line\">        self.board = Board()</span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    nib = Snake()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>首先我们定义一些用于游戏的常量。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cons</span>:</span><br><span class=\"line\">    BOARD_WIDTH = <span class=\"number\">300</span></span><br><span class=\"line\">    BOARD_HEIGHT = <span class=\"number\">300</span></span><br><span class=\"line\">    DELAY = <span class=\"number\">100</span></span><br><span class=\"line\">    DOT_SIZE = <span class=\"number\">10</span></span><br><span class=\"line\">    MAX_RAND_POS = <span class=\"number\">27</span></span><br></pre></td></tr></table></figure>\n<p><code>BOARD_WIDTH</code> 和 <code>BOARD_HEIGHT</code> 常量决定了板子的大小。<code>DELAY</code> 常量决定了游戏速度。<code>DOT_SIZE</code> 常量是苹果和蛇体节的大小。<code>MAX_RAND_POS</code> 常量用于计算苹果的随机位置。</p>\n<p><code>initGame()</code> 方法初始化变量、载入图像、开始倒计时函数。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.createObjects()</span><br><span class=\"line\">self.locateApple()</span><br></pre></td></tr></table></figure>\n<p><code>createObjects()</code> 方法在画布上创建项。<code>locateApple()</code> 在画布上随机放置一个苹果。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.bind_all(<span class=\"string\">&quot;&lt;Key&gt;&quot;</span>, self.onKeyPressed)</span><br></pre></td></tr></table></figure>\n<p>我们将键盘事件绑定到 <code>onKeyPressed()</code> 方法上。此游戏使用键盘光标键控制。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    self.idot = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;dot.png&quot;</span>)</span><br><span class=\"line\">    self.dot = ImageTk.PhotoImage(self.idot)</span><br><span class=\"line\">    self.ihead = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;head.png&quot;</span>)</span><br><span class=\"line\">    self.head = ImageTk.PhotoImage(self.ihead)</span><br><span class=\"line\">    self.iapple = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;apple.png&quot;</span>)</span><br><span class=\"line\">    self.apple = ImageTk.PhotoImage(self.iapple)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>在这几行中，我们载入图像。在贪吃蛇游戏中有三个图像：头、体节和苹果。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">createObjects</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;creates objects on Canvas&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    self.create_text(<span class=\"number\">30</span>, <span class=\"number\">10</span>, text=<span class=\"string\">&quot;Score: &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(self.score),</span><br><span class=\"line\">                        tag=<span class=\"string\">&quot;score&quot;</span>, fill=<span class=\"string\">&quot;white&quot;</span>)</span><br><span class=\"line\">    self.create_image(self.appleX, self.appleY, image=self.apple,</span><br><span class=\"line\">        anchor=NW, tag=<span class=\"string\">&quot;apple&quot;</span>)</span><br><span class=\"line\">    self.create_image(<span class=\"number\">50</span>, <span class=\"number\">50</span>, image=self.head, anchor=NW,  tag=<span class=\"string\">&quot;head&quot;</span>)</span><br><span class=\"line\">    self.create_image(<span class=\"number\">30</span>, <span class=\"number\">50</span>, image=self.dot, anchor=NW, tag=<span class=\"string\">&quot;dot&quot;</span>)</span><br><span class=\"line\">    self.create_image(<span class=\"number\">40</span>, <span class=\"number\">50</span>, image=self.dot, anchor=NW, tag=<span class=\"string\">&quot;dot&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>在 <code>createObjects()</code> 方法中，我们在画布上创建游戏对象。这些是画布项。它们有初始的 x 与 y 坐标。<code>image</code> 参数提供用于显示的图像。<code>anchor</code> 参数设置为 NW，这样画布项的坐标就在每个项目的左上点。如果我们希望能在根窗口边框附近显示图像，这一点就很重要。尝试删除锚点，看看会发生什么。<code>tag</code> 参数用于标识画布上的项。一个标签可用于多个画布项。</p>\n<p><code>checkAppleCollision()</code> 方法检测蛇是否碰到了苹果对象。若如此，我们增加得分、增长蛇体节并调用 <code>locateApp()</code> 方法。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">apple = self.find_withtag(<span class=\"string\">&quot;apple&quot;</span>)</span><br><span class=\"line\">head = self.find_withtag(<span class=\"string\">&quot;head&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>find_withtag()</code> 方法通过标签查找画布上的项。我们需要两个项：蛇头和苹果。注意，即使基于给定标签只有找到一个项，该方法也会返回一个元组。这是用于苹果项的示例。之后可通过以下方式访问苹果项：<code>apple[0]</code>。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">x1, y1, x2, y2 = self.bbox(head)</span><br><span class=\"line\">overlap = self.find_overlapping(x1, y1, x2, y2)</span><br></pre></td></tr></table></figure>\n<p><code>bbox()</code> 方法返回项的边界框顶点。<code>find_overlapping()</code> 方法查找给定坐标的碰撞项。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ovr <span class=\"keyword\">in</span> overlap:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> apple[<span class=\"number\">0</span>] == ovr:</span><br><span class=\"line\">        x, y = self.coords(apple)</span><br><span class=\"line\">        self.create_image(x, y, image=self.dot, anchor=NW, tag=<span class=\"string\">&quot;dot&quot;</span>)</span><br><span class=\"line\">        self.locateApple()</span><br></pre></td></tr></table></figure>\n<p>如果苹果碰撞到了头，我们就在苹果的坐标上创建一个新的体节项。我们调用 <code>locateApple()</code> 方法，它从画布上删除老的苹果项，并在创建且随机定位一个新的。</p>\n<p>在 <code>moveSnake()</code> 方法中，我们有游戏的关键算法。为了理解它，且看蛇是如何移动的。我们控制蛇的头部。我们可以用光标键改变它的方向。其它体节呈链条式移动。第二节移动到第一节的位置，第三节移动到第二节位置，如此循环。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">z = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> z &lt; <span class=\"built_in\">len</span>(items)-<span class=\"number\">1</span>:</span><br><span class=\"line\">    c1 = self.coords(items[z])</span><br><span class=\"line\">    c2 = self.coords(items[z+<span class=\"number\">1</span>])</span><br><span class=\"line\">    self.move(items[z], c2[<span class=\"number\">0</span>]-c1[<span class=\"number\">0</span>], c2[<span class=\"number\">1</span>]-c1[<span class=\"number\">1</span>])</span><br><span class=\"line\">    z += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>此代码将关键沿链条移动。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.move(head, self.moveX, self.moveY)</span><br></pre></td></tr></table></figure>\n<p>我们用 <code>move()</code> 方法移动头部。 <code>self.moveX</code> 和 <code>self.moveY</code> 变量在光标键按下时被设置。</p>\n<p>在 <code>checkCollisions()</code> 方法中，我们确定蛇是否碰撞到了身体或墙。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">x1, y1, x2, y2 = self.bbox(head)</span><br><span class=\"line\">overlap = self.find_overlapping(x1, y1, x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> dot <span class=\"keyword\">in</span> dots:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> over <span class=\"keyword\">in</span> overlap:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> over == dot:</span><br><span class=\"line\">          self.inGame = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>如果蛇头碰到了一个体节，那么游戏结束。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> y1 &gt; Cons.BOARD_HEIGHT - Cons.DOT_SIZE:</span><br><span class=\"line\">    self.inGame = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>如果蛇头碰到了板子的底边，那么游戏结束。</p>\n<p><code>locateApple()</code> 方法在板子上随机定位一个新苹果并删除旧苹果。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">apple = self.find_withtag(<span class=\"string\">&quot;apple&quot;</span>)</span><br><span class=\"line\">self.delete(apple[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<p>此处我们找到并删除被蛇吃掉的苹果。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">r = random.randint(<span class=\"number\">0</span>, Cons.MAX_RAND_POS)</span><br></pre></td></tr></table></figure>\n<p>我们获得一个 0 至 <code>MAX_RAND_POS</code> - 1 之间的随机数。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.appleX = r * Cons.DOT_SIZE</span><br><span class=\"line\">...</span><br><span class=\"line\">self.appleY = r * Cons.DOT_SIZE</span><br></pre></td></tr></table></figure>\n<p>这几行设置了苹果对象的 x 与 y 坐标。</p>\n<p>在 <code>onKeyPressed()</code> 方法中，我们在游戏过程中对按下的键作出反应。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">LEFT_CURSOR_KEY = <span class=\"string\">&quot;Left&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> key == LEFT_CURSOR_KEY <span class=\"keyword\">and</span> self.moveX &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">    self.moveX = -Cons.DOT_SIZE</span><br><span class=\"line\">    self.moveY = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>如果我们按下左光标键，我们就据此设置 <code>self.moveX</code> 和 <code>self.moveY</code> 变量。这些变量在 <code>moveSnake()</code> 方法中用于改变蛇对象的坐标。还要注意，当蛇向右移动时，我们不能立即转向左边。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">onTimer</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;creates a game cycle each timer event &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    self.drawScore()</span><br><span class=\"line\">    self.checkCollisions()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.inGame:</span><br><span class=\"line\">        self.checkAppleCollision()</span><br><span class=\"line\">        self.moveSnake()</span><br><span class=\"line\">        self.after(Cons.DELAY, self.onTimer)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        self.gameOver()</span><br></pre></td></tr></table></figure>\n<p>每经过 <code>DELAY</code> 毫秒，<code>onTimer()</code> 方法被调用。若我们在游戏中，我们调用三个方法来构建游戏逻辑。否则游戏将结束。计时器在 <code>after()</code> 方法基础上，每 <code>DELAY</code> 毫秒后只调用一次。为了我得调用计时器，我们递归调用 <code>onTimer()</code> 方法。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">drawScore</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;draws score&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    score = self.find_withtag(<span class=\"string\">&quot;score&quot;</span>)</span><br><span class=\"line\">    self.itemconfigure(score, text=<span class=\"string\">&quot;Score: &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(self.score))</span><br><span class=\"line\">The drawScore method draws score on the board.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gameOver</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;deletes all objects and draws game over message&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    self.delete(ALL)</span><br><span class=\"line\">    self.create_text(self.winfo_width() /<span class=\"number\">2</span>, self.winfo_height()/<span class=\"number\">2</span>,</span><br><span class=\"line\">        text=<span class=\"string\">&quot;Game Over with score &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(self.score), fill=<span class=\"string\">&quot;white&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>若游戏结束，我们就删除画布上的所有项。然后我们在屏幕中央绘制游戏结束和最终得分。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/snake.png?ezimgfmt=rs:302x326/rscb1/ng:webp/ngcb1\" alt=\"Snake\" loading=\"lazy\"><br>Figure: Snake</p>\n<p>这是用 Tkinter 创建的贪吃蛇电脑游戏。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL3NuYWtlLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/drawing\">上一章</a></p>\n"},{"title":"Tkinter 小部件","url":"/translation/zt-tkinter/widgets.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL3dpZGdldHMv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/attributes\">上一章</a> <a href=\"/translation/zt-tkinter/menustoolbars\">下一章</a></p>\n<blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-05-09</em></p>\n</blockquote>\n<p>在 Tkinter 教程的这一部件，我们将包含一些基本的 Tkinter 小部件。我们使用以下小部件：<code>Checkbutton</code>、<code>Label</code>、<code>Scale</code> 和 <code>Listbox</code>。</p>\n<p>小部件是一个 GUI 应用程序的基本构建块。多年来，一些小部件成为所有操作系统上所有工具包的标准，例如按钮、复选框或滚动条。其中一些可能具有不同名字。如在 Tkinter 中，复选框也称为复选按钮。Tkinter 有一小组小部件，可以满足基本的编程需求。更多专门的小部件可以作为自定义小部件来创建。</p>\n<h2 id=\"Tkinter-复选按钮\"><a href=\"#Tkinter-复选按钮\" class=\"headerlink\" title=\"Tkinter 复选按钮\"></a>Tkinter 复选按钮</h2><p><code>Checkbutton</code> 是一种具有开、关两种状态的小部件。开状态用一个勾选标记表示（某些主题可能有不同视觉效果）。它被用于表示一些布尔属性。<code>Checkbutton</code> 小部件提供一个复选框和一个文本标签。</p>\n<figure class=\"highlight py\"><figcaption><span>check_button.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program toggles the title of the</span></span><br><span class=\"line\"><span class=\"string\">window with the Checkbutton widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, Frame, Checkbutton</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> BooleanVar, BOTH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Checkbutton&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        self.var = BooleanVar()</span><br><span class=\"line\"></span><br><span class=\"line\">        cb = Checkbutton(self, text=<span class=\"string\">&quot;Show title&quot;</span>,</span><br><span class=\"line\">            variable=self.var, command=self.onClick)</span><br><span class=\"line\">        cb.select()</span><br><span class=\"line\">        cb.place(x=<span class=\"number\">50</span>, y=<span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onClick</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.var.get() == <span class=\"literal\">True</span>:</span><br><span class=\"line\">            self.master.title(<span class=\"string\">&quot;Checkbutton&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.master.title(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;250x150+300+300&quot;</span>)</span><br><span class=\"line\">    app = Example()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在本示例中，我们在窗口上放了一个复选按钮。该复选按钮显示或隐藏窗口的标题栏。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.var = BooleanVar()</span><br></pre></td></tr></table></figure>\n<p>我们创建一个 <code>BooleanVar</code> 对象。它是 Tkinter 中用于小部件的布尔值保持器。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">cb = Checkbutton(self, text=<span class=\"string\">&quot;Show title&quot;</span>,</span><br><span class=\"line\">    variable=self.var, command=self.onClick)</span><br></pre></td></tr></table></figure>\n<p>创建了一个 <code>Checkbutton</code> 的实例。值保持器通过 <code>variable</code> 参数连接到小部件。当我们点击复选按钮时，<code>onClick()</code> 方法被调用。这通过 <code>cammand</code> 参数完成。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">cb.select()</span><br></pre></td></tr></table></figure>\n<p>初始状态下，标题显示在标题栏中。所以在一开始，我们用 <code>select()</code> 方法使按钮被选中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> self.var.get() == <span class=\"literal\">True</span>:</span><br><span class=\"line\">    self.master.title(<span class=\"string\">&quot;Checkbutton&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    self.master.title(<span class=\"string\">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>在 <code>onClick()</code> 方法内部，我们根据 <code>self.var</code> 变量的值来显示或隐藏标题。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/checkbutton.png?ezimgfmt=rs:252x176/rscb1/ng:webp/ngcb1\" alt=\"Checkbutton\" loading=\"lazy\"><br>Figure: Checkbutton</p>\n<h2 id=\"Tkinter-标签\"><a href=\"#Tkinter-标签\" class=\"headerlink\" title=\"Tkinter 标签\"></a>Tkinter 标签</h2><p><code>Label</code> 小部件用于显示文本或图像。不提供可用的用户交互。</p>\n<figure class=\"highlight py\"><figcaption><span>label.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we use the Label</span></span><br><span class=\"line\"><span class=\"string\">widget to show an image.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageTk</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Label</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.loadImage()</span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">loadImage</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            self.img = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;tatras.jpg&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Unable to load image&quot;</span>)</span><br><span class=\"line\">            sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Label&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        tatras = ImageTk.PhotoImage(self.img)</span><br><span class=\"line\">        label = Label(self, image=tatras)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># reference must be stored</span></span><br><span class=\"line\">        label.image = tatras</span><br><span class=\"line\"></span><br><span class=\"line\">        label.pack()</span><br><span class=\"line\">        self.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setGeometry</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        w, h = self.img.size</span><br><span class=\"line\">        self.master.geometry((<span class=\"string\">&quot;%dx%d+300+300&quot;</span>) % (w, h))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    ex.setGeometry()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>本示例在窗口上显示图像。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageTk</span><br></pre></td></tr></table></figure>\n<p>默认地，<code>Label</code> 小部件只能显示一组有限的图像类型。要显示 JPG 图像，我们必须使用 PIL，Python 成像库模块。通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXRob24vcGlsbG93Lw==\">Pillow 教程<i class=\"fa fa-external-link-alt\"></i></span>可了解更多 PIL 相关信息。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.img = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;tatras.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们从现有工作目录中的图像文件创建一个 <code>Image</code> 对象。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">tatras = ImageTk.PhotoImage(self.img)</span><br></pre></td></tr></table></figure>\n<p>我们从图像中创建照片图像。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">label = Label(self, image=tatras)</span><br></pre></td></tr></table></figure>\n<p>此照片图像被赋值到标签部件的 <code>image</code> 参数。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">label.image = tatras</span><br></pre></td></tr></table></figure>\n<p>为了不被垃圾回收，图像引用必须被存储。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">w, h = self.img.size</span><br><span class=\"line\">self.master.geometry((<span class=\"string\">&quot;%dx%d+300+300&quot;</span>) % (w, h))</span><br></pre></td></tr></table></figure>\n<p>我们使窗口大小正好适合图像大小。</p>\n<h2 id=\"Tkinter-范围选择器\"><a href=\"#Tkinter-范围选择器\" class=\"headerlink\" title=\"Tkinter 范围选择器\"></a>Tkinter 范围选择器</h2><p><code>Scale</code> 是一个小部件，它允许用户在有限间隔内，通过滑动把手，图形化地选择一个值。我们的示例将在标签中显示选中的数字。</p>\n<figure class=\"highlight py\"><figcaption><span>scale.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we show how to</span></span><br><span class=\"line\"><span class=\"string\">use the Scale widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, BOTH, IntVar, LEFT</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Label, Scale, Style</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Scale&quot;</span>)</span><br><span class=\"line\">        self.style = Style()</span><br><span class=\"line\">        self.style.theme_use(<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        scale = Scale(self, from_=<span class=\"number\">0</span>, to=<span class=\"number\">100</span>,</span><br><span class=\"line\">            command=self.onScale)</span><br><span class=\"line\">        scale.pack(side=LEFT, padx=<span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.var = IntVar()</span><br><span class=\"line\">        self.label = Label(self, text=<span class=\"number\">0</span>, textvariable=self.var)</span><br><span class=\"line\">        self.label.pack(side=LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onScale</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        v = <span class=\"built_in\">int</span>(<span class=\"built_in\">float</span>(val))</span><br><span class=\"line\">        self.var.<span class=\"built_in\">set</span>(v)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;250x100+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在以上脚本中，我们有两个小部件：范围选择噐和标签。一个来自范围选择器小部件的值被显示在标签小部件上。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">scale = Scale(self, from_=<span class=\"number\">0</span>, to=<span class=\"number\">100</span>,</span><br><span class=\"line\">    command=self.onScale)</span><br></pre></td></tr></table></figure>\n<p>创建了一个范围选择器小部件。我们提供下界和上界。<code>from</code> 是一个常规 Python 关键字，因此在第一个参数后有一个下划线。当我们移动范围选择器上的把手时，<code>onScale()</code> 方法被调用。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.var = IntVar()</span><br><span class=\"line\">self.label = Label(self, text=<span class=\"number\">0</span>, textvariable=self.var)</span><br></pre></td></tr></table></figure>\n<p>创建了一个整数值保持器和一个标签小部件。来自保持器的值被显示到标签小部件中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">onScale</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">    v = <span class=\"built_in\">int</span>(<span class=\"built_in\">float</span>(val))</span><br><span class=\"line\">    self.var.<span class=\"built_in\">set</span>(v)</span><br></pre></td></tr></table></figure>\n<p><code>onScale()</code> 方法接收来自范围选择器小部件的当前选中值作为参数。该值先转换为浮点数，再转换为整数。最后，这个值被设置到标签部件的值保持器中。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/scale.png?ezimgfmt=rs:252x126/rscb1/ng:webp/ngcb1\" alt=\"Scale\" loading=\"lazy\"><br>Figure: Scale</p>\n<h2 id=\"Tkinter-列表框\"><a href=\"#Tkinter-列表框\" class=\"headerlink\" title=\"Tkinter 列表框\"></a>Tkinter 列表框</h2><p><code>Listbox</code> 是一个小部件，它显示对象列表。它允许用户选择一个或多个项。</p>\n<figure class=\"highlight py\"><figcaption><span>listbox.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode Tkinter tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this script, we show how to</span></span><br><span class=\"line\"><span class=\"string\">use the Listbox widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: www.zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> Tk, BOTH, Listbox, StringVar, END</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter.ttk <span class=\"keyword\">import</span> Frame, Label</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">Frame</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.master.title(<span class=\"string\">&quot;Listbox&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pack(fill=BOTH, expand=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        acts = [<span class=\"string\">&#x27;Scarlett Johansson&#x27;</span>, <span class=\"string\">&#x27;Rachel Weiss&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;Natalie Portman&#x27;</span>, <span class=\"string\">&#x27;Jessica Alba&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        lb = Listbox(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> acts:</span><br><span class=\"line\">            lb.insert(END, i)</span><br><span class=\"line\"></span><br><span class=\"line\">        lb.bind(<span class=\"string\">&quot;&lt;&lt;ListboxSelect&gt;&gt;&quot;</span>, self.onSelect)</span><br><span class=\"line\"></span><br><span class=\"line\">        lb.pack(pady=<span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.var = StringVar()</span><br><span class=\"line\">        self.label = Label(self, text=<span class=\"number\">0</span>, textvariable=self.var)</span><br><span class=\"line\">        self.label.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onSelect</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        sender = val.widget</span><br><span class=\"line\">        idx = sender.curselection()</span><br><span class=\"line\">        value = sender.get(idx)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.var.<span class=\"built_in\">set</span>(value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    root.geometry(<span class=\"string\">&quot;300x250+300+300&quot;</span>)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>在本示例中，我们在 <code>Listbox</code> 中显示女演员列表。当前选中的女演员被显示到标签小部件中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">acts = [<span class=\"string\">&#x27;Scarlett Johansson&#x27;</span>, <span class=\"string\">&#x27;Rachel Weiss&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Natalie Portman&#x27;</span>, <span class=\"string\">&#x27;Jessica Alba&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>这是将被显示到列表框中的女演员列表。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">lb = Listbox(self)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> acts:</span><br><span class=\"line\">    lb.insert(END, i)</span><br></pre></td></tr></table></figure>\n<p>我们创建一个 <code>Listbox</code> 实例，并插入上面提到的所有项。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">lb.bind(<span class=\"string\">&quot;&lt;&lt;ListboxSelect&gt;&gt;&quot;</span>, self.onSelect)</span><br></pre></td></tr></table></figure>\n<p>当我们选中列表框中的项时，<code>&lt;&lt;ListboxSelect&gt;&gt;</code> 事件将被生成。我们将 <code>onSelected()</code> 方法绑定到这个事件上。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.var = StringVar()</span><br><span class=\"line\">self.label = Label(self, text=<span class=\"number\">0</span>, textvariable=self.var)</span><br></pre></td></tr></table></figure>\n<p>创建了一个标签和它的值保持器。在此标签中我们将显示当前选中的项。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">sender = val.widget</span><br></pre></td></tr></table></figure>\n<p>我们获得事件发送器。它即是列表框小部件。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">idx = sender.curselection()</span><br></pre></td></tr></table></figure>\n<p>我们通过 <code>curselection()</code> 方法找出选中项的索引。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">value = sender.get(idx)</span><br></pre></td></tr></table></figure>\n<p>实际值通过 <code>get()</code> 方法获取，该方法接收项的索引。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.var.<span class=\"built_in\">set</span>(value)</span><br></pre></td></tr></table></figure>\n<p>最后，标签将被更新。</p>\n<p><img src=\"https://zetcode.com/img/gui/tkinter/listbox.png?ezimgfmt=rs:302x276/rscb1/ng:webp/ngcb1\" alt=\"Listbox widget\" loading=\"lazy\"><br>Figure: Listbox widget</p>\n<p>在 Tkinter 教程的这一部件，我们介绍了几种 Tkinter 小部件。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyL3dpZGdldHMv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-tkinter\">目录</a> <a href=\"/translation/zt-tkinter/attributes\">上一章</a> <a href=\"/translation/zt-tkinter/menustoolbars\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/customwidgets.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9jdXN0b213aWRnZXRzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/painting\">上一章</a> <a href=\"/translation/zt-pyqt6/tetris\">下一章</a></p>\n<h1 id=\"PyQt6-自定义小部件\"><a href=\"#PyQt6-自定义小部件\" class=\"headerlink\" title=\"PyQt6 自定义小部件\"></a>PyQt6 自定义小部件</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-28</em></p>\n</blockquote>\n<p>PyQt6 有一套丰富的小部件。然而，没有哪个工具包能提供程序员需要用于其应用程序的所有小部件。工具包通常只提供最常见的小部件，如按钮、文本或滑块小部件。如果需要更专业化的小部件，我们必须自己创建。</p>\n<p>自定义小部件通过工具包提供的绘图工具创建。基本上有两种可能：程序员可以修改或增强现有小部件，或从零开始创建自定义小部件。</p>\n<h2 id=\"PyQt6-烧录小部件\"><a href=\"#PyQt6-烧录小部件\" class=\"headerlink\" title=\"PyQt6 烧录小部件\"></a>PyQt6 烧录小部件</h2><p>此小部件我们可以在 Nero，K3B 或其它 CD&#x2F;DVD 烧录软件中看到。</p>\n<figure class=\"highlight py\"><figcaption><span>burning_widget.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we create a custom widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QSlider, QApplication, QHBoxLayout, QVBoxLayout)</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QObject, Qt, pyqtSignal</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QPainter, QFont, QColor, QPen</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Communicate</span>(<span class=\"title class_ inherited__\">QObject</span>):</span><br><span class=\"line\">updateBW = pyqtSignal(<span class=\"built_in\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BurningWidget</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.setMinimumSize(<span class=\"number\">1</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">        self.value = <span class=\"number\">75</span></span><br><span class=\"line\">        self.num = [<span class=\"number\">75</span>, <span class=\"number\">150</span>, <span class=\"number\">225</span>, <span class=\"number\">300</span>, <span class=\"number\">375</span>, <span class=\"number\">450</span>, <span class=\"number\">525</span>, <span class=\"number\">600</span>, <span class=\"number\">675</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setValue</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">paintEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        qp = QPainter()</span><br><span class=\"line\">        qp.begin(self)</span><br><span class=\"line\">        self.drawWidget(qp)</span><br><span class=\"line\">        qp.end()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">drawWidget</span>(<span class=\"params\">self, qp</span>):</span><br><span class=\"line\">        MAX_CAPACITY = <span class=\"number\">700</span></span><br><span class=\"line\">        OVER_CAPACITY = <span class=\"number\">750</span></span><br><span class=\"line\"></span><br><span class=\"line\">        font = QFont(<span class=\"string\">&#x27;Serif&#x27;</span>, <span class=\"number\">7</span>, QFont.Weight.Light)</span><br><span class=\"line\">        qp.setFont(font)</span><br><span class=\"line\"></span><br><span class=\"line\">        size = self.size()</span><br><span class=\"line\">        w = size.width()</span><br><span class=\"line\">        h = size.height()</span><br><span class=\"line\"></span><br><span class=\"line\">        step = <span class=\"built_in\">int</span>(<span class=\"built_in\">round</span>(w / <span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        till = <span class=\"built_in\">int</span>(((w / OVER_CAPACITY) * self.value))</span><br><span class=\"line\">        full = <span class=\"built_in\">int</span>(((w / OVER_CAPACITY) * MAX_CAPACITY))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.value &gt;= MAX_CAPACITY:</span><br><span class=\"line\">            qp.setPen(QColor(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>))</span><br><span class=\"line\">            qp.setBrush(QColor(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">184</span>))</span><br><span class=\"line\">            qp.drawRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, full, h)</span><br><span class=\"line\">            qp.setPen(QColor(<span class=\"number\">255</span>, <span class=\"number\">175</span>, <span class=\"number\">175</span>))</span><br><span class=\"line\">            qp.setBrush(QColor(<span class=\"number\">255</span>, <span class=\"number\">175</span>, <span class=\"number\">175</span>))</span><br><span class=\"line\">            qp.drawRect(full, <span class=\"number\">0</span>, till - full, h)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            qp.setPen(QColor(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>))</span><br><span class=\"line\">            qp.setBrush(QColor(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">184</span>))</span><br><span class=\"line\">            qp.drawRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, till, h)</span><br><span class=\"line\"></span><br><span class=\"line\">        pen = QPen(QColor(<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">20</span>), <span class=\"number\">1</span>,</span><br><span class=\"line\">                   Qt.PenStyle.SolidLine)</span><br><span class=\"line\"></span><br><span class=\"line\">        qp.setPen(pen)</span><br><span class=\"line\">        qp.setBrush(Qt.BrushStyle.NoBrush)</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w - <span class=\"number\">1</span>, h - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        j = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(step, <span class=\"number\">10</span> * step, step):</span><br><span class=\"line\">            qp.drawLine(i, <span class=\"number\">0</span>, i, <span class=\"number\">5</span>)</span><br><span class=\"line\">            metrics = qp.fontMetrics()</span><br><span class=\"line\">            fw = metrics.horizontalAdvance(<span class=\"built_in\">str</span>(self.num[j]))</span><br><span class=\"line\"></span><br><span class=\"line\">            x, y = <span class=\"built_in\">int</span>(i - fw/<span class=\"number\">2</span>), <span class=\"built_in\">int</span>(h / <span class=\"number\">2</span>)</span><br><span class=\"line\">            qp.drawText(x, y, <span class=\"built_in\">str</span>(self.num[j]))</span><br><span class=\"line\">            j = j + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        OVER_CAPACITY = <span class=\"number\">750</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sld = QSlider(Qt.Orientations.Horizontal, self)</span><br><span class=\"line\">        sld.setFocusPolicy(Qt.FocusPolicy.NoFocus)</span><br><span class=\"line\">        sld.setRange(<span class=\"number\">1</span>, OVER_CAPACITY)</span><br><span class=\"line\">        sld.setValue(<span class=\"number\">75</span>)</span><br><span class=\"line\">        sld.setGeometry(<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">150</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.c = Communicate()</span><br><span class=\"line\">        self.wid = BurningWidget()</span><br><span class=\"line\">        self.c.updateBW[<span class=\"built_in\">int</span>].connect(self.wid.setValue)</span><br><span class=\"line\"></span><br><span class=\"line\">        sld.valueChanged[<span class=\"built_in\">int</span>].connect(self.changeValue)</span><br><span class=\"line\">        hbox = QHBoxLayout()</span><br><span class=\"line\">        hbox.addWidget(self.wid)</span><br><span class=\"line\">        vbox = QVBoxLayout()</span><br><span class=\"line\">        vbox.addStretch(<span class=\"number\">1</span>)</span><br><span class=\"line\">        vbox.addLayout(hbox)</span><br><span class=\"line\">        self.setLayout(vbox)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">390</span>, <span class=\"number\">210</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Burning widget&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">changeValue</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.c.updateBW.emit(value)</span><br><span class=\"line\">        self.wid.repaint()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例中，我们有一个 <code>QSlider</code> 和一个自定义小部件。滑块控制这个自定义小部件。它图形地显示介质的总容量和可用空闲空间。这个自定义小部件的最小值是 1，最大值是 <code>OVER_CAPACITY</code>。如果达到了 <code>MAX_CAPACITY</code>，我们将使用红色绘制。这通常表示过烧。</p>\n<p>此烧录小部件被置于窗口的底部。这通过使用一个 <code>QHBoxLayout</code> 和一个 <code>QVBoxLayout</code> 实现。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BurningWidget</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br></pre></td></tr></table></figure>\n\n<p>烧录小部件基于 <code>QWidget</code> 小部件。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.setMinimumSize(<span class=\"number\">1</span>, <span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们更改小部件的最小尺寸（高度）。默认值对我们来说有点儿小。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">font = QFont(<span class=\"string\">&#x27;Serif&#x27;</span>, <span class=\"number\">7</span>, QFont.Weight.Light)</span><br><span class=\"line\">qp.setFont(font)</span><br></pre></td></tr></table></figure>\n\n<p>我们使用比默认字体小的字体。这更符合我们的需要。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">size = self.size()</span><br><span class=\"line\">w = size.width()</span><br><span class=\"line\">h = size.height()</span><br><span class=\"line\"></span><br><span class=\"line\">step = <span class=\"built_in\">int</span>(<span class=\"built_in\">round</span>(w / <span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">till = <span class=\"built_in\">int</span>(((w / OVER_CAPACITY) _ self.value))</span><br><span class=\"line\">full = <span class=\"built_in\">int</span>(((w / OVER_CAPACITY) _ MAX_CAPACITY))</span><br></pre></td></tr></table></figure>\n\n<p>我们动态绘制小部件。窗口超大，烧录小部件就越大，反之亦然。这就是为什么我们必须计算小部件的尺寸，因为我们要在上面绘制自定义小部件。<code>till</code> 参数决定要绘制的总尺寸。这个值来自于滑块。它整个区域的比例。<code>full</code> 参数决定何时开始用红色绘制。</p>\n<p>实际绘制包含三步。我们绘制黄色或红黄相间矩形。然后我们绘制垂直线，将小部件划分为若干份。最后我们绘制表示介质容量的数字。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">metrics = qp.fontMetrics()</span><br><span class=\"line\">fw = metrics.horizontalAdvance(<span class=\"built_in\">str</span>(self.num[j]))</span><br><span class=\"line\"></span><br><span class=\"line\">x, y = <span class=\"built_in\">int</span>(i - fw/<span class=\"number\">2</span>), <span class=\"built_in\">int</span>(h / <span class=\"number\">2</span>)</span><br><span class=\"line\">qp.drawText(x, y, <span class=\"built_in\">str</span>(self.num[j]))</span><br></pre></td></tr></table></figure>\n\n<p>我们使用字体度量来绘制文本。我们必须知道文本的宽度，以使它相对垂直线水平居中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">changeValue</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">    self.c.updateBW.emit(value)</span><br><span class=\"line\">    self.wid.repaint()</span><br></pre></td></tr></table></figure>\n\n<p>当我们移动滑块时，<code>changeValue()</code> 方法被调用。在方法内，我们发出一个自定义的 <code>updateBW</code> 信号并携带参数。参数是滑块当前的值。此值稍后将用于计算要绘制的烧录小部件的容量。然后重绘此自定义小部件。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/burning.png?ezimgfmt=rs:392x235/rscb1/ng:webp/ngcb1\" alt=\"The burning widget\" loading=\"lazy\"><br>Figure: The burning widget</p>\n<p>在 PyQt6 教程的这一部分中，我们创建了一个自定义小小部件。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9jdXN0b213aWRnZXRzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/painting\">上一章</a> <a href=\"/translation/zt-pyqt6/tetris\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/datetime.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9kYXRldGltZS8=\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/introduction\">上一章</a> <a href=\"/translation/zt-pyqt6/firstprograms\">下一章</a></p>\n<h1 id=\"PyQt6-日期与时间\"><a href=\"#PyQt6-日期与时间\" class=\"headerlink\" title=\"PyQt6 日期与时间\"></a>PyQt6 日期与时间</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-23</em></p>\n</blockquote>\n<p>本部分教程展示了如何使用 PyQt6 的日期与时间相关类。</p>\n<h2 id=\"QDate、QTime、QDateTime\"><a href=\"#QDate、QTime、QDateTime\" class=\"headerlink\" title=\"QDate、QTime、QDateTime\"></a>QDate、QTime、QDateTime</h2><p>PyQt6 提供了 <code>QDate</code>、<code>QDateTime</code>、<code>QTime</code> 类用于处理日期与时间. <code>QDate</code> 类用于处理公历日期，提供了用于确定日期、比较日期及操作日期的方法。<br><code>QTime</code> 类用于处理时钟时间，提供了用于确定时间、比较时间和许多其它操作时间的方法。<code>QDateTime</code> 是将 <code>QDate</code> 类和 <code>QTime</code> 类合二为一的类。</p>\n<h2 id=\"PyQt-当前日期与时间\"><a href=\"#PyQt-当前日期与时间\" class=\"headerlink\" title=\"PyQt 当前日期与时间\"></a>PyQt 当前日期与时间</h2><p>PyQt6 提供 <code>currentDate()</code>、<code>currentTime()</code> 和 <code>currentDateTime()</code> 方法，用于确定当前的日期与时间。</p>\n<figure class=\"highlight py\"><figcaption><span>current_date_time.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QDate, QTime, QDateTime, Qt</span><br><span class=\"line\"></span><br><span class=\"line\">now = QDate.currentDate()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(now.toString(Qt.DateFormat.ISODate))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(now.toString(Qt.DateFormat.RFC2822Date))</span><br><span class=\"line\"></span><br><span class=\"line\">datetime = QDateTime.currentDateTime()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(datetime.toString())</span><br><span class=\"line\"></span><br><span class=\"line\">time = QTime.currentTime()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(time.toString(Qt.DateFormat.ISODate))</span><br></pre></td></tr></table></figure>\n\n<p>本示例分别以几种格式打印当前日期、当前日期与时间、当前时间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">now = QDate.currentDate()</span><br></pre></td></tr></table></figure>\n\n<p><code>currentDate()</code> 方法返回当前日期。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(now.toString(Qt.DateFormat.ISODate))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(now.toString(Qt.DateFormat.RFC2822Date))</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>Qt.DateFormat.ISODate</code>、<code>Qt.DateFormat.RFC2822Date</code> 两种值传递给 <code>toString()</code> 方法，可以以两种格式打印日期。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">datetime = QDateTime.currentDateTime()</span><br></pre></td></tr></table></figure>\n\n<p><code>currentDateTime()</code> 方法返回当前日期与时间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">time = QTime.currentTime()</span><br></pre></td></tr></table></figure>\n\n<p>最后，由 <code>currentTime()</code> 方法返回当前时间。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./current_date_time.py</span><br><span class=\"line\">2022-08-01</span><br><span class=\"line\">01 Aug 2022</span><br><span class=\"line\">Mon Aug 1 11:54:43 2022</span><br><span class=\"line\">11:54:43</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PyQt6-UTC-时间\"><a href=\"#PyQt6-UTC-时间\" class=\"headerlink\" title=\"PyQt6 UTC 时间\"></a>PyQt6 UTC 时间</h2><p>我们所在的地球是一颗球体，它绕着轴心旋转。地球是西向东旋转的，所以太阳总于不同时间在不同地点升起。因此，世界被划分为 24 个时区，每个时区都具有不同的当地时间，且有时随着夏令时而调整。</p>\n<p>因此需要一个全球统一时间。全球统一时间有助于避免航空时区与与夏令时的混淆。协调世界时（Universal Coordinated Time, UTC）被选定为主要时间标准。UTC 主要用于航空、天气预报、飞行计划、空中交通管制放行许可、以及地图等领域。不同于本地时间，UTC 不随季节变化而变化。</p>\n<figure class=\"highlight py\"><figcaption><span>utc_local.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QDateTime, Qt</span><br><span class=\"line\"></span><br><span class=\"line\">now = QDateTime.currentDateTime()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Local datetime: &#x27;</span>, now.toString(Qt.DateFormat.ISODate))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Universal datetime: &#x27;</span>, now.toUTC().toString(Qt.DateFormat.ISODate))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;The offset from UTC is: <span class=\"subst\">&#123;now.offsetFromUtc()&#125;</span> seconds&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>本示例确定当前全球和本地的日期与时间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Local datetime: &#x27;</span>, now.toString(Qt.DateFormat.ISODate))</span><br></pre></td></tr></table></figure>\n\n<p><code>currentDateTime()</code> 方法可返回本地的当前日期与时间，使用 <code>toLocalTime()</code> 可将世界时间转换为本地时间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Universal datetime: &#x27;</span>, now.toUTC().toString(Qt.DateFormat.ISODate))</span><br></pre></td></tr></table></figure>\n\n<p><code>toUTC()</code> 方法可从时间对象中获取世界时间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;The offset from UTC is: <span class=\"subst\">&#123;now.offsetFromUtc()&#125;</span> seconds&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>offsetFromUtc()</code> 方法给出了世界时间与本地时间之前的差值，单位为秒。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./utc_local.py</span><br><span class=\"line\">Local datetime: 2022-08-01T11:55:55</span><br><span class=\"line\">Universal datetime: 2022-08-01T09:55:55Z</span><br><span class=\"line\">The offset from UTC is: 7200 seconds</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"PyQt6-天数\"><a href=\"#PyQt6-天数\" class=\"headerlink\" title=\"PyQt6 天数\"></a>PyQt6 天数</h1><p>具体月份的天数由 <code>daysInMonth()</code> 方法返回，一年的天数由 <code>daysInYear()</code> 方法返回。</p>\n<figure class=\"highlight py\"><figcaption><span>n_of_days.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QDate</span><br><span class=\"line\"></span><br><span class=\"line\">d = QDate(<span class=\"number\">1945</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Days in month: <span class=\"subst\">&#123;d.daysInMonth()&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Days in year: <span class=\"subst\">&#123;d.daysInYear()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>本示例打印指定日期所在月份与年度的天数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./n_of_days.py</span><br><span class=\"line\">Days <span class=\"keyword\">in</span> month: 31</span><br><span class=\"line\">Days <span class=\"keyword\">in</span> year: 365</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PyQt6-天数差\"><a href=\"#PyQt6-天数差\" class=\"headerlink\" title=\"PyQt6 天数差\"></a>PyQt6 天数差</h2><p><code>daysTo()</code> 方法一个日期到另一日期的天数。</p>\n<figure class=\"highlight py\"><figcaption><span>xmas.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QDate, Qt</span><br><span class=\"line\"></span><br><span class=\"line\">now = QDate.currentDate()</span><br><span class=\"line\">y = now.year()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;today is <span class=\"subst\">&#123;now.toString(Qt.DateFormat.ISODate)&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">xmas1 = QDate(y-<span class=\"number\">1</span>, <span class=\"number\">12</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">xmas2 = QDate(y, <span class=\"number\">12</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dayspassed = xmas1.daysTo(now)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;dayspassed&#125;</span> days have passed since last XMas&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">nofdays = now.daysTo(xmas2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;There are <span class=\"subst\">&#123;nofdays&#125;</span> days until next XMas&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>本示例计算去年圣诞节起到今天的天数，以及自今天起到明年圣诞节的天数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./xmas.py</span><br><span class=\"line\">today is 2022-08-01</span><br><span class=\"line\">219 days have passed since last XMas</span><br><span class=\"line\">There are 146 days <span class=\"keyword\">until</span> next XMas</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PyQt6-日期时间运算\"><a href=\"#PyQt6-日期时间运算\" class=\"headerlink\" title=\"PyQt6 日期时间运算\"></a>PyQt6 日期时间运算</h2><p>我们经常需要在日期时间值上增减秒数、天数、年数等。</p>\n<figure class=\"highlight py\"><figcaption><span>arithmetic.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QDateTime, Qt</span><br><span class=\"line\"></span><br><span class=\"line\">now = QDateTime.currentDateTime()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Today: <span class=\"subst\">&#123;now.toString(Qt.DateFormat.ISODate)&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Adding 12 days: <span class=\"subst\">&#123;now.addDays(<span class=\"number\">12</span>).toString(Qt.DateFormat.ISODate)&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Subtracting 22 days: <span class=\"subst\">&#123;now.addDays(-<span class=\"number\">22</span>).toString(Qt.DateFormat.ISODate)&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Adding 50 seconds: <span class=\"subst\">&#123;now.addSecs(<span class=\"number\">50</span>).toString(Qt.DateFormat.ISODate)&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Adding 3 months: <span class=\"subst\">&#123;now.addMonths(<span class=\"number\">3</span>).toString(Qt.DateFormat.ISODate)&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Adding 12 years: <span class=\"subst\">&#123;now.addYears(<span class=\"number\">12</span>).toString(Qt.DateFormat.ISODate)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>本示例确定当前日期时间，并增减了天数、秒数、月数、年数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./arithmetic.py</span><br><span class=\"line\">Today: 2022-08-01T11:57:13</span><br><span class=\"line\">Adding 12 days: 2022-08-13T11:57:13</span><br><span class=\"line\">Subtracting 22 days: 2022-07-10T11:57:13</span><br><span class=\"line\">Adding 50 seconds: 2022-08-01T11:58:03</span><br><span class=\"line\">Adding 3 months: 2022-11-01T11:57:13</span><br><span class=\"line\">Adding 12 years: 2034-08-01T11:57:13</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PyQt6-夏令时\"><a href=\"#PyQt6-夏令时\" class=\"headerlink\" title=\"PyQt6 夏令时\"></a>PyQt6 夏令时</h2><p>夏令时（Daylight Saving Time, DST）是在夏季将时钟提前，以便延长晚间日照时长。时间在春季开始时向前调整一小时，在秋季向后调整到标准时间。</p>\n<figure class=\"highlight py\"><figcaption><span>daylight_saving.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QDateTime, QTimeZone, Qt</span><br><span class=\"line\"></span><br><span class=\"line\">now = QDateTime.currentDateTime()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Time zone: <span class=\"subst\">&#123;now.timeZoneAbbreviation()&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> now.isDaylightTime():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;The current date falls into DST time&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;The current date does not fall into DST time&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>本示例检查日期时间是否在夏令时内。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Time zone: <span class=\"subst\">&#123;now.timeZoneAbbreviation()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>timeZoneAbbreviation()</code> 方法返回日期时间的时区缩写。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> now.isDaylightTime():</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p><code>isDaylightTime()</code> 方法返回日期时间是否在夏令时内。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./daylight_saving.py</span><br><span class=\"line\">Time zone: CEST</span><br></pre></td></tr></table></figure>\n\n<p>当前日期为夏令时。本程序在夏季执行于中欧城市布拉迪斯拉发（斯洛伐克共和国首都）。欧洲中部夏令时（CEST）比世界时间早 2 小时。该时区是夏令时时区，用于欧洲与南极洲。冬季使用的标准时间是中欧时间（CET）。</p>\n<h2 id=\"PyQt6-Unix-纪元\"><a href=\"#PyQt6-Unix-纪元\" class=\"headerlink\" title=\"PyQt6 Unix 纪元\"></a>PyQt6 Unix 纪元</h2><p>一个纪元是指时间上的某个瞬间，被选为一个特定时代的起源。如在西方基督教国家，时间纪元从耶稣出生的第 0 天开始。另一个例子是使用了 12 年的法国共和历法。该纪元是法国共和时代的开始，于 1792 年 9 月 22 日宣布，这一日法兰西第一共和国宣布成立，并废除了君主制。</p>\n<p>计算机也有自己的纪元，最流行的是 Unix 纪元。它位于 1970-01-01 00:00:00 UTC（或 1970-01-01T00:00:00Z ISO 8601）。计算机中的日期和时间是根据该计算机或平台的定义纪元以来，经过的秒数或时钟滴答数来确定的。</p>\n<p>Unix 时间是指从 Unix 纪元开始经过的秒数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">date</span> +%s</span><br><span class=\"line\">1659347883</span><br></pre></td></tr></table></figure>\n\n<p>Unix date 命令可用于获取 Unix 时间。在当前这个特殊时刻（原文写作时间），从 Unix 纪元到现在已经过去了 1659347883 秒。</p>\n<figure class=\"highlight py\"><figcaption><span>unix_time.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QDateTime, Qt</span><br><span class=\"line\"></span><br><span class=\"line\">now = QDateTime.currentDateTime()</span><br><span class=\"line\">unix_time = now.toSecsSinceEpoch()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(unix_time)</span><br><span class=\"line\"></span><br><span class=\"line\">d = QDateTime.fromSecsSinceEpoch(unix_time)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d.toString(Qt.DateFormat.ISODate))</span><br></pre></td></tr></table></figure>\n\n<p>本示例打印 Unix 时间并将其转换为 <code>QDateTime</code>。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">now = QDateTime.currentDateTime()</span><br></pre></td></tr></table></figure>\n\n<p>首先，我们检索当前日期与时间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">unix_time = now.toSecsSinceEpoch()</span><br></pre></td></tr></table></figure>\n\n<p><code>toSecsSinceEpoch()</code> 方法返回 Unix 时间。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">d = QDateTime.fromSecsSinceEpoch(unix_time)</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>fromSecsSinceEpoch()</code> 方法可将 Unix 时间转换为 <code>QDateTime</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./unix_time.py</span><br><span class=\"line\">1659347924</span><br><span class=\"line\">2022-08-01T11:58:44</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PyQt6-儒略日\"><a href=\"#PyQt6-儒略日\" class=\"headerlink\" title=\"PyQt6 儒略日\"></a>PyQt6 儒略日</h2><p>儒略日是指自儒略周期以来连续的天数。它主要被天文学家使用。它不应与儒略历混淆。儒略周期始于公元前 4713 年。儒略日 0 日被分配在公元前 4713 年 1 月 1 日正午。</p>\n<p>儒略日数（Julian Day Number, JDN）是该周期开始以来所经过的天数。任何时刻的儒略日期（Julian Date, JD）是前一个正午的儒略日数加上自该时刻起的一天的分数（Qt 不计算此分数）。除天文学，儒略历也经常被军事和主机程序所使用。</p>\n<blockquote>\n<p>由译者摘自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODQlOTIlRTclOTUlQTUlRTYlOTclQTUvNjkzNDc0I3JlZmVyZW5jZS1bMV0tMzc0OTctd3JhcA==\">儒略日_百度百科<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>儒略日（Julian Day）是在儒略周期内以连续的日数计算时间的计时法，主要是天文学家在使用。</p>\n<p>儒略日数（Julian Day Number，JDN）的计算是从格林威治标准时间的中午开始，包含一个整天的时间，起点的时间（0 日）回溯至儒略历的公元前 4713 年 1 月 1 日中午 12 点（在格里历是公元前 4714 年 11 月 24 日），这个日期是三种多年周期的共同起点，且是历史上最接近现代的一个起点。例如，2000 年 1 月 1 日的 UT12:00 是儒略日 2,451,545。</p>\n<p>儒略日期（Julian date，JD）是以格林威治标准时中午 12:00 的儒略日加上那一天的瞬时时间的分数。儒略日期是儒略日添加小数部分所表示的儒略日数。例如，2013 年 1 月 1 日 00:30:00（UT）是儒略日期 2,456,293.520833。</p>\n<p>儒略周期（Julian Period）是开始于公元前 4713 年，长达 7980 年的纪年法，被用于历史上各种不同历法的日期转换。公元 2018 年是儒略周期的 6731 年，下一个儒略周期将开始于公元 3268 年。</p>\n</blockquote>\n<figure class=\"highlight py\"><figcaption><span>julian_day.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QDate, Qt</span><br><span class=\"line\"></span><br><span class=\"line\">now = QDate.currentDate()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Gregorian date for today:&#x27;</span>, now.toString(Qt.DateFormat.ISODate))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Julian day for today:&#x27;</span>, now.toJulianDay())</span><br></pre></td></tr></table></figure>\n\n<p>本示例中，我们计算今天的格林尼治日期（公历日期）和儒略日期。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Julian day for today:&#x27;</span>, now.toJulianDay())</span><br></pre></td></tr></table></figure>\n\n<p><code>toJulianDay()</code> 方法返回儒略日。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./julian_day.py</span><br><span class=\"line\">Gregorian <span class=\"built_in\">date</span> <span class=\"keyword\">for</span> <span class=\"built_in\">today</span>: <span class=\"number\">2022</span><span class=\"number\">-08</span><span class=\"number\">-01</span></span><br><span class=\"line\">Julian <span class=\"built_in\">day</span> <span class=\"keyword\">for</span> <span class=\"built_in\">today</span>: <span class=\"number\">2459793</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"历史上的战争\"><a href=\"#历史上的战争\" class=\"headerlink\" title=\"历史上的战争\"></a>历史上的战争</h2><p>有了儒略日，就可以进行跨越几个世纪的计算。</p>\n<figure class=\"highlight py\"><figcaption><span>battles.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QDate, Qt</span><br><span class=\"line\"></span><br><span class=\"line\">borodino_battle = QDate(<span class=\"number\">1812</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">slavkov_battle = QDate(<span class=\"number\">1805</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">now = QDate.currentDate()</span><br><span class=\"line\"></span><br><span class=\"line\">j_today = now.toJulianDay()</span><br><span class=\"line\">j_borodino = borodino_battle.toJulianDay()</span><br><span class=\"line\">j_slavkov = slavkov_battle.toJulianDay()</span><br><span class=\"line\"></span><br><span class=\"line\">d1 = j_today - j_slavkov</span><br><span class=\"line\">d2 = j_today - j_borodino</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Days since Slavkov battle: <span class=\"subst\">&#123;d1&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Days since Borodino battle: <span class=\"subst\">&#123;d2&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>本示例计算了自两个历史事件以来的日期。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">borodino_battle = QDate(<span class=\"number\">1812</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">slavkov_battle = QDate(<span class=\"number\">1805</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们有拿破仑时代两次战役的日期。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">j_today = now.toJulianDay()</span><br><span class=\"line\">j_borodino = borodino_battle.toJulianDay()</span><br><span class=\"line\">j_slavkov = slavkov_battle.toJulianDay()</span><br></pre></td></tr></table></figure>\n\n<p>我们计算今天的儒略日以及 Slavkov 战役和 Borodino 战役的儒略日。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">d1 = j_today - j_slavkov</span><br><span class=\"line\">d2 = j_today - j_borodino</span><br></pre></td></tr></table></figure>\n\n<p>我们计算两次战役以来的天数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./battles.py</span><br><span class=\"line\">Days since Slavkov battle: 79135</span><br><span class=\"line\">Days since Borodino battle: 76664</span><br></pre></td></tr></table></figure>\n\n<p>当我们运行这个脚本时（原文写作时间），距离 Slavkov 战役已经过去了 79135 天，距离 Borodino 战役已经过去了 76664 天。</p>\n<p>在 PyQt6 教程的这一部分中，我们使用了日期和时间。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9kYXRldGltZS8=\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/introduction\">上一章</a> <a href=\"/translation/zt-pyqt6/firstprograms\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/dialogs.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9kaWFsb2dzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/eventssignals\">上一章</a> <a href=\"/translation/zt-pyqt6/widgets\">下一章</a></p>\n<h1 id=\"PyQt6-对话框\"><a href=\"#PyQt6-对话框\" class=\"headerlink\" title=\"PyQt6 对话框\"></a>PyQt6 对话框</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-25</em></p>\n</blockquote>\n<p>对话被定义为两个以上人之间的交谈。在计算机应用程序中，对话框是用来与应用程序“对话”的窗口。对话框用于从用户获取数据、更改应用程序设置等。</p>\n<h2 id=\"PyQt6-QInputDialog-输入对话框\"><a href=\"#PyQt6-QInputDialog-输入对话框\" class=\"headerlink\" title=\"PyQt6 QInputDialog 输入对话框\"></a>PyQt6 QInputDialog 输入对话框</h2><p><code>QInputDialog</code> 提供一个简单的对话框，用于从用户获取单个值。输入值可以是字符串、数值或列表项。</p>\n<figure class=\"highlight py\"><figcaption><span>input_dialog.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we receive data from</span></span><br><span class=\"line\"><span class=\"string\">a QInputDialog dialog.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Aauthor: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QPushButton, QLineEdit,</span><br><span class=\"line\">        QInputDialog, QApplication)</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.btn = QPushButton(<span class=\"string\">&#x27;Dialog&#x27;</span>, self)</span><br><span class=\"line\">        self.btn.move(<span class=\"number\">20</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">        self.btn.clicked.connect(self.showDialog)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.le = QLineEdit(self)</span><br><span class=\"line\">        self.le.move(<span class=\"number\">130</span>, <span class=\"number\">22</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">450</span>, <span class=\"number\">350</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Input dialog&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">showDialog</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        text, ok = QInputDialog.getText(self, <span class=\"string\">&#x27;Input Dialog&#x27;</span>, <span class=\"string\">&#x27;Enter your name:&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ok:</span><br><span class=\"line\">            self.le.setText(<span class=\"built_in\">str</span>(text))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>该示例包含一个按钮和一个单行文本框小部件。按钮用于显示获取文本的输入对话框。输入的文本将显示在单选文本框小部件中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">text, ok = QInputDialog.getText(self, <span class=\"string\">&#x27;Input Dialog&#x27;</span>, <span class=\"string\">&#x27;Enter your name:&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这一行显示了输入对话框。第一个字符串是对话框标题，第二个是对话框内的消息。对话框返回一个文本和一个布尔值。若点击了 OK 按钮，则布尔值为 True。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ok:</span><br><span class=\"line\">    self.le.setText(<span class=\"built_in\">str</span>(text))</span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>setText()</code> 方法，将我们从对话框接收的文本设置到单行文本框中。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/inputdialog.png?ezimgfmt=rs:202x126/rscb1/ng:webp/ngcb1\" alt=\"Input dialog\" loading=\"lazy\"><br>Figure: Input dialog</p>\n<h2 id=\"PyQt6-QColorDialog\"><a href=\"#PyQt6-QColorDialog\" class=\"headerlink\" title=\"PyQt6 QColorDialog\"></a>PyQt6 QColorDialog</h2><p><code>QColorDialog</code> 提供用于选择颜色值的对话框。</p>\n<blockquote>\n<p>译注：根据平台不同，颜色选择对话框的内容也不同。</p>\n</blockquote>\n<figure class=\"highlight py\"><figcaption><span>color_dialog.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we select a color value</span></span><br><span class=\"line\"><span class=\"string\">from the QColorDialog and change the background</span></span><br><span class=\"line\"><span class=\"string\">color of a QFrame widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QPushButton, QFrame,</span><br><span class=\"line\">        QColorDialog, QApplication)</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QColor</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        col = QColor(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.btn = QPushButton(<span class=\"string\">&#x27;Dialog&#x27;</span>, self)</span><br><span class=\"line\">        self.btn.move(<span class=\"number\">20</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.btn.clicked.connect(self.showDialog)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.frm = QFrame(self)</span><br><span class=\"line\">        self.frm.setStyleSheet(<span class=\"string\">&quot;QWidget &#123; background-color: %s &#125;&quot;</span></span><br><span class=\"line\">                               % col.name())</span><br><span class=\"line\">        self.frm.setGeometry(<span class=\"number\">130</span>, <span class=\"number\">22</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">450</span>, <span class=\"number\">350</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Color dialog&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">showDialog</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        col = QColorDialog.getColor()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> col.isValid():</span><br><span class=\"line\">            self.frm.setStyleSheet(<span class=\"string\">&quot;QWidget &#123; background-color: %s &#125;&quot;</span></span><br><span class=\"line\">                                   % col.name())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>此应用程序示例显示了一个按钮和一个 <code>QFrame</code>。小部件背景色为黑色。使用 <code>QColorDialog</code> 可以更改它的背景。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">col = QColor(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这是 <code>QFrame</code> 的初始背景色。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">col = QColorDialog.getColor()</span><br></pre></td></tr></table></figure>\n\n<p>这行弹出 <code>QColorDialog</code>。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> col.isValid():</span><br><span class=\"line\">    self.frm.setStyleSheet(<span class=\"string\">&quot;QWidget &#123; background-color: %s &#125;&quot;</span></span><br><span class=\"line\">                           % col.name())</span><br></pre></td></tr></table></figure>\n\n<p>检查颜色是否可用。如果点击过取消按钮，则无可用颜色返回。如果颜色可用，则使用样式表修改背景色。</p>\n<h2 id=\"PyQt6-QFontDialog-颜色选择对话框\"><a href=\"#PyQt6-QFontDialog-颜色选择对话框\" class=\"headerlink\" title=\"PyQt6 QFontDialog 颜色选择对话框\"></a>PyQt6 QFontDialog 颜色选择对话框</h2><p><code>QFontDialog</code> 是用于选择字体的小部件。</p>\n<figure class=\"highlight py\"><figcaption><span>font_dialog.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we select a font name</span></span><br><span class=\"line\"><span class=\"string\">and change the font of a label.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QVBoxLayout, QPushButton,</span><br><span class=\"line\">        QSizePolicy, QLabel, QFontDialog, QApplication)</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        vbox = QVBoxLayout()</span><br><span class=\"line\"></span><br><span class=\"line\">        btn = QPushButton(<span class=\"string\">&#x27;Dialog&#x27;</span>, self)</span><br><span class=\"line\">        btn.setSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Fixed)</span><br><span class=\"line\">        btn.move(<span class=\"number\">20</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        vbox.addWidget(btn)</span><br><span class=\"line\"></span><br><span class=\"line\">        btn.clicked.connect(self.showDialog)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.lbl = QLabel(<span class=\"string\">&#x27;Knowledge only matters&#x27;</span>, self)</span><br><span class=\"line\">        self.lbl.move(<span class=\"number\">130</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        vbox.addWidget(self.lbl)</span><br><span class=\"line\">        self.setLayout(vbox)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">450</span>, <span class=\"number\">350</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Font dialog&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">showDialog</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        font, ok = QFontDialog.getFont()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ok:</span><br><span class=\"line\">            self.lbl.setFont(font)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例中，我们有一个按钮和一个标签。使用 <code>QFontDialog</code> 可以更改标签的字体。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">font, ok = QFontDialog.getFont()</span><br></pre></td></tr></table></figure>\n\n<p>此处弹出字体对话框。<code>getFont()</code> 方法返回字体名称和 OK 参数。若点击了 OK 则参数值为 True，否则为 False。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ok:</span><br><span class=\"line\">    self.label.setFont(font)</span><br></pre></td></tr></table></figure>\n\n<p>如果点击 OK，将使用 <code>setFont()</code> 方法修改标签字体。</p>\n<h2 id=\"PyQt6-QFileDialog-文件选择对话框\"><a href=\"#PyQt6-QFileDialog-文件选择对话框\" class=\"headerlink\" title=\"PyQt6 QFileDialog 文件选择对话框\"></a>PyQt6 QFileDialog 文件选择对话框</h2><p><code>QFileDialog</code> 是允许用户选择文件或目录的对话框。文件可以选择用于打开或保存。</p>\n<figure class=\"highlight py\"><figcaption><span>file_dialog.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we select a file with a</span></span><br><span class=\"line\"><span class=\"string\">QFileDialog and display its contents</span></span><br><span class=\"line\"><span class=\"string\">in a QTextEdit.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QMainWindow, QTextEdit,</span><br><span class=\"line\">        QFileDialog, QApplication)</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QIcon, QAction</span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.textEdit = QTextEdit()</span><br><span class=\"line\">        self.setCentralWidget(self.textEdit)</span><br><span class=\"line\">        self.statusBar()</span><br><span class=\"line\"></span><br><span class=\"line\">        openFile = QAction(QIcon(<span class=\"string\">&#x27;open.png&#x27;</span>), <span class=\"string\">&#x27;Open&#x27;</span>, self)</span><br><span class=\"line\">        openFile.setShortcut(<span class=\"string\">&#x27;Ctrl+O&#x27;</span>)</span><br><span class=\"line\">        openFile.setStatusTip(<span class=\"string\">&#x27;Open new File&#x27;</span>)</span><br><span class=\"line\">        openFile.triggered.connect(self.showDialog)</span><br><span class=\"line\"></span><br><span class=\"line\">        menubar = self.menuBar()</span><br><span class=\"line\">        fileMenu = menubar.addMenu(<span class=\"string\">&#x27;&amp;File&#x27;</span>)</span><br><span class=\"line\">        fileMenu.addAction(openFile)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">550</span>, <span class=\"number\">450</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;File dialog&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">showDialog</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        home_dir = <span class=\"built_in\">str</span>(Path.home())</span><br><span class=\"line\">        fname = QFileDialog.getOpenFileName(self, <span class=\"string\">&#x27;Open file&#x27;</span>, home_dir)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> fname[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            f = <span class=\"built_in\">open</span>(fname[<span class=\"number\">0</span>], <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">with</span> f:</span><br><span class=\"line\">                data = f.read()</span><br><span class=\"line\">                self.textEdit.setText(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本示例显示了菜单栏、居中的单行文本框和状态栏。菜单项显示用于选择文件的 <code>QFileDialog</code>。文件内容将被加载到单行文本框中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br></pre></td></tr></table></figure>\n\n<p>此示例基于 <code>QMainWindow</code> 小部件，因为我们要将单行文本框居中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">home_dir = <span class=\"built_in\">str</span>(Path.home())</span><br><span class=\"line\">fname = QFileDialog.getOpenFileName(self, <span class=\"string\">&#x27;Open file&#x27;</span>, home_dir)</span><br></pre></td></tr></table></figure>\n\n<p>此处我们弹出 <code>QFileDialog</code>。<code>getOpenFileName()</code> 方法参数中第一个字符串是标题。第二个字符串指定对话框工作目录。我们通过 <code>Path</code> 模块确定用户主目录。默认情况下，文件类型过滤器设置为所有文件(<code>*</code>)</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> fname[<span class=\"number\">0</span>]:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(fname[<span class=\"number\">0</span>], <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> f:</span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">        self.textEdit.setText(data)</span><br></pre></td></tr></table></figure>\n\n<p>读取选定的文件名，并将文件内容设置到单行文本框小部件。</p>\n<p>在 PyQt6 教程的这一部分中，我们使用了对话框。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9kaWFsb2dzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/eventssignals\">上一章</a> <a href=\"/translation/zt-pyqt6/widgets\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/dragdrop.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9kcmFnZHJvcC8=\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/widgets2\">上一章</a> <a href=\"/translation/zt-pyqt6/painting\">下一章</a></p>\n<h1 id=\"PyQt6-拖放\"><a href=\"#PyQt6-拖放\" class=\"headerlink\" title=\"PyQt6 拖放\"></a>PyQt6 拖放</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-27</em></p>\n</blockquote>\n<p>在 PyQt6 教程的这一部分，我们将介绍拖放操作。</p>\n<p>在计算机图形用户界面中，拖放是指单击一个虚拟对象，并拖动到另一位置或虚拟对象上的动作（或对这种动作的支持）。一般来说，它可于调用多种其它动作，或在两个抽象对象之间建立各种关联。</p>\n<p>拖动和放下是图形用户界面的一部分。拖放操作使用户可以直观地完成复杂操作。</p>\n<p>通常，我们可以拖放两种东西：数据或图形化对象。如果我们将图像从一个应用程序拖放到另一个中，则实际拖放的是二进制数据。如果我们在 Firefox 中拖放一个选项卡，则实际拖放的是图形组件。</p>\n<h2 id=\"QDrag-拖动\"><a href=\"#QDrag-拖动\" class=\"headerlink\" title=\"QDrag 拖动\"></a>QDrag 拖动</h2><p><code>QDrag</code> 为基于 MIME 的拖放数据传输提供了支持。它处理拖放操作中的大部分细节。传输的数据包含在 <code>QMimeData</code> 对象中。</p>\n<h2 id=\"PyQt6-中的简单拖放示例\"><a href=\"#PyQt6-中的简单拖放示例\" class=\"headerlink\" title=\"PyQt6 中的简单拖放示例\"></a>PyQt6 中的简单拖放示例</h2><p>在第一个例子中，我们有一个 <code>QLineEdit</code> 和一个 <code>QPushButton</code>。我们从单行文本编辑器中拖放文本到按钮小部件上。按钮标签将改变。</p>\n<figure class=\"highlight py\"><figcaption><span>simple.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This is a simple drag and</span></span><br><span class=\"line\"><span class=\"string\">drop example.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QPushButton, QWidget, QLineEdit, QApplication)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Button</span>(<span class=\"title class_ inherited__\">QPushButton</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, title, parent</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(title, parent)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setAcceptDrops(<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">dragEnterEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> e.mimeData().hasFormat(<span class=\"string\">&#x27;text/plain&#x27;</span>):</span><br><span class=\"line\">            e.accept()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            e.ignore()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">dropEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        self.setText(e.mimeData().text())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        edit = QLineEdit(<span class=\"string\">&#x27;&#x27;</span>, self)</span><br><span class=\"line\">        edit.setDragEnabled(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        edit.move(<span class=\"number\">30</span>, <span class=\"number\">65</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        button = Button(<span class=\"string\">&quot;Button&quot;</span>, self)</span><br><span class=\"line\">        button.move(<span class=\"number\">190</span>, <span class=\"number\">65</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Simple drag and drop&#x27;</span>)</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">150</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    ex.show()</span><br><span class=\"line\">    app.<span class=\"built_in\">exec</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本示例展示了一个简单的拖放操作。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Button</span>(<span class=\"title class_ inherited__\">QPushButton</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, title, parent</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(title, parent)</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n\n<p>为了拖放文本到 <code>QPushButton</code> 小部件上，我们必须重新实现一些方法。因此我们先创建自己的 <code>Button</code> 类，它继承 <code>QPushButton</code> 类。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.setAcceptDrops(<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们通过 <code>setAcceptDrops()</code> 方法为小部件启用了放下事件。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dragEnterEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> e.mimeData().hasFormat(<span class=\"string\">&#x27;text/plain&#x27;</span>):</span><br><span class=\"line\">        e.accept()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        e.ignore()</span><br></pre></td></tr></table></figure>\n\n<p>首先，我们重新实现 <code>dragEnterEvent()</code> 方法。我们告知所接收数据的类型。在本例中，它是纯文本。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dropEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">    self.setText(e.mimeData().text())</span><br></pre></td></tr></table></figure>\n\n<p>通过重新实现 <code>dropEvent()</code> 方法，我们定义了在放下事件触发时会发生的事。此处我们改变按钮小部件上的文本。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">edit = QLineEdit(<span class=\"string\">&#x27;&#x27;</span>, self)</span><br><span class=\"line\">edit.setDragEnabled(<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>QLineEdit</code> 小部件内置了对拖动操作的支持。我们需要做的是调用 <code>setDragEnabled()</code> 方法来启用它。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/dragdrop.png?ezimgfmt=rs:302x175/rscb1/ng:webp/ngcb1\" alt=\"Simple drag and drop\" loading=\"lazy\"><br>Figure: Simple drag and drop</p>\n<h2 id=\"拖放按钮小部件\"><a href=\"#拖放按钮小部件\" class=\"headerlink\" title=\"拖放按钮小部件\"></a>拖放按钮小部件</h2><p>以下示例演示了如何拖放按钮小部件。</p>\n<figure class=\"highlight py\"><figcaption><span>drag_button.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this program, we can press on a button with a left mouse</span></span><br><span class=\"line\"><span class=\"string\">click or drag and drop the button with  the right mouse click.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt, QMimeData</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QDrag</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QPushButton, QWidget, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Button</span>(<span class=\"title class_ inherited__\">QPushButton</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, title, parent</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(title, parent)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mouseMoveEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> e.buttons() != Qt.MouseButtons.RightButton:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        mimeData = QMimeData()</span><br><span class=\"line\"></span><br><span class=\"line\">        drag = QDrag(self)</span><br><span class=\"line\">        drag.setMimeData(mimeData)</span><br><span class=\"line\"></span><br><span class=\"line\">        drag.setHotSpot(e.position().toPoint() - self.rect().topLeft())</span><br><span class=\"line\"></span><br><span class=\"line\">        dropAction = drag.<span class=\"built_in\">exec</span>(Qt.DropActions.MoveAction)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mousePressEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().mousePressEvent(e)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> e.button() == Qt.MouseButtons.LeftButton:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;press&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.setAcceptDrops(<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.button = Button(<span class=\"string\">&#x27;Button&#x27;</span>, self)</span><br><span class=\"line\">        self.button.move(<span class=\"number\">100</span>, <span class=\"number\">65</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Click or Move&#x27;</span>)</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">550</span>, <span class=\"number\">450</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">dragEnterEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        e.accept()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">dropEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        position = e.position()</span><br><span class=\"line\">        self.button.move(position.toPoint())</span><br><span class=\"line\"></span><br><span class=\"line\">        e.setDropAction(Qt.DropActions.MoveAction)</span><br><span class=\"line\">        e.accept()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    ex.show()</span><br><span class=\"line\">    app.<span class=\"built_in\">exec</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>在代码示例中，窗口上有一个 <code>QPushButton</code>。如果我们使用鼠标左键点击它，<code>press</code> 消息将被打印到控制台。通过右击并移动按钮，我们将执行一次在按钮小部件上的拖放操作。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Button</span>(<span class=\"title class_ inherited__\">QPushButton</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, title, parent</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(title, parent)</span><br></pre></td></tr></table></figure>\n\n<p>我们创建了一个 <code>Button</code> 类，它派生自 <code>QPushButton</code>。我们还重新实现了 <code>QPushButton</code> 的两个方法：<code>mouseMoveEvent()</code> 和 <code>mousePresEvent()</code>。其中 <code>mouseMoveEvent()</code> 方法是拖放操作开始的地方。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> e.buttons() != Qt.MouseButtons.RightButton:</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n\n<p>在此，我们决定只能使用鼠标右键来进行拖放操作。鼠标左键保留用于单击按钮。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">drag = QDrag(self)</span><br><span class=\"line\">drag.setMimeData(mimeData)</span><br><span class=\"line\"></span><br><span class=\"line\">drag.setHotSpot(e.position().toPoint() - self.rect().topLeft())</span><br></pre></td></tr></table></figure>\n\n<p><code>QDrag</code> 对象已创建。这个类提供对基于 MIME 拖放数据传输的支持。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">dropAction = drag.<span class=\"built_in\">exec</span>(Qt.DropActions.MoveAction)</span><br></pre></td></tr></table></figure>\n\n<p>拖动对象的 <code>exec()</code> 方法开始了拖放操作。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mousePressEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">    <span class=\"built_in\">super</span>().mousePressEvent(e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> e.button() == Qt.MouseButtons.LeftButton:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;press&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果我们用鼠标左键单击按钮，将打印 <code>press</code> 到控制台。注意我们同时通过父级调用了 <code>mousePressEvent()</code> 方法。否则我们无法看到按钮被按下。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">position = e.pos()</span><br><span class=\"line\">self.button.move(position)</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>dropEvent()</code> 方法中，我们指定了释放鼠标并完完成放下操作后会发生的事。在本例中，我们找到当前鼠标指针坐标，并据此移动按钮。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">e.setDropAction(Qt.MoveAction)</span><br><span class=\"line\">e.accept()</span><br></pre></td></tr></table></figure>\n\n<p>我们用 <code>setDropAction()</code> 方法指定放下操作的类型。在本例中，它是移动动作。</p>\n<p>PyQt6 教程的这一部分专门介绍拖放操作。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9kcmFnZHJvcC8=\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/widgets2\">上一章</a> <a href=\"/translation/zt-pyqt6/painting\">下一章</a></p>\n"},{"title":"Python PyQt6","url":"/translation/zt-pyqt6/index.html","content":"<p>这是 PyQt6 教程。本教程适合初学者和中级程序员。阅读本教程后，您将能够写出不平凡的 PyQt6 应用程序。代码示例可以在作者的 <a href=\"https%EF%BC%9A//github.com/janbodnar/PyQt6-Tutorial-Examples\">PyQt 6-Tutorial-Examples</a>代码库中找到。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"/introduction\">介绍</a></li>\n<li><a href=\"/datetime\">时间与日期</a></li>\n<li><a href=\"/firstprograms\">第一个应用程序</a></li>\n<li><a href=\"/menustoolbars\">菜单栏与工具栏</a></li>\n<li><a href=\"/layout\">布局管理</a></li>\n<li><a href=\"/eventssignals\">事件与信号</a></li>\n<li><a href=\"/dialogs\">对话框</a></li>\n<li><a href=\"/widgets\">小部件一</a></li>\n<li><a href=\"/widgets2\">小部件二</a></li>\n<li><a href=\"/dragdrop\">拖放</a></li>\n<li><a href=\"/painting\">绘图</a></li>\n<li><a href=\"/customwidgets\">自定义小部件</a></li>\n<li><a href=\"/tetris\">俄罗斯方块游戏</a></li>\n</ul>\n<h2 id=\"电子书\"><a href=\"#电子书\" class=\"headerlink\" title=\"电子书\"></a>电子书</h2><p>一本独特的电子书，包含了 PyQt5 库的高级特性：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9lYm9va3MvYWR2YW5jZWRweXF0NS8=\">《PyQt5 进阶》<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h2 id=\"相关教程\"><a href=\"#相关教程\" class=\"headerlink\" title=\"相关教程\"></a>相关教程</h2><p>PyQt5 教程涵盖了 PyQt 早期版本。其它流行的 Python GUI 教程有 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS93eHB5dGhvbi8=\">wxPython 教程<i class=\"fa fa-external-link-alt\"></i></span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXRob24vZ3RrLw==\">Python Gtk 教程<i class=\"fa fa-external-link-alt\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS90a2ludGVyLw==\">Tkinter 教程<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n"},{"url":"/translation/zt-pyqt6/firstprograms.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9maXJzdHByb2dyYW1zLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/datetime\">上一章</a> <a href=\"/translation/zt-pyqt6/menustoolbars\">下一章</a></p>\n<h1 id=\"PyQt6-第一个程序\"><a href=\"#PyQt6-第一个程序\" class=\"headerlink\" title=\"PyQt6 第一个程序\"></a>PyQt6 第一个程序</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-24</em></p>\n</blockquote>\n<p>在 PyQt6 教程的这一部分中，我们将学习一些基本功能。这些示例包含工具提示、关闭窗口、显示消息框和桌面窗口居中。</p>\n<h2 id=\"PyQt6-简单示例\"><a href=\"#PyQt6-简单示例\" class=\"headerlink\" title=\"PyQt6 简单示例\"></a>PyQt6 简单示例</h2><p>这是一个显示小窗口的简单示例。然而我们可以用这个窗口做很多事。我们可以调整它的尺寸、使它最大化或最小化。这原本需要大量编码，但有人已经编写好了这些功能。因为它在大多数应用程序中都是重复的，所以不需要再重复编码。PyQt6 是一个高级工具包。如果我们在一个较低级别的工具包中编码，以下代码将轻易超过数百行。</p>\n<figure class=\"highlight py\"><figcaption><span>simple.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 教程</span></span><br><span class=\"line\"><span class=\"string\">在本例中，我们使用 PyQt6 创建一个简单窗口</span></span><br><span class=\"line\"><span class=\"string\">作者: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">网站: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QApplication, QWidget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">    w = QWidget()</span><br><span class=\"line\">    w.resize(<span class=\"number\">250</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">    w.move(<span class=\"number\">300</span>, <span class=\"number\">300</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    w.setWindowTitle(<span class=\"string\">&#x27;Simple&#x27;</span>)</span><br><span class=\"line\">    w.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>上述代码示例在屏幕上显示了一个小窗口。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QApplication, QWidget</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们提供几个必要的导入。基础小部件位于 <code>PyQt6.QtWidgets</code> 模块中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">app = QApplication(sys.argv)</span><br></pre></td></tr></table></figure>\n\n<p>每个 PyQt6 应用程序都必须创建一个应用程序对象。<code>sys.argv</code> 参数是来自命令行的参数列表。Python 脚本可以在 Shell 中运行，这是一种控制脚本启动的方式。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">w = QWidget()</span><br></pre></td></tr></table></figure>\n\n<p><code>QWdiget</code> 小部件类是 PyQt6 中所有用户界面对象的基类。我们为 <code>QWidget</code> 提供默认构造函数。默认构造函数没有父类。没有父小部件的小部件称为窗口。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">w.resize(<span class=\"number\">250</span>, <span class=\"number\">150</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>resize()</code> 方法调整小部件的尺寸，宽 250px，高 150px。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">w.move(<span class=\"number\">300</span>, <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>move()</code> 方法移动小部件的位置到屏幕上 x&#x3D;300，y&#x3D;300 坐标处。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">w.setWindowTitle(<span class=\"string\">&#x27;Simple&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们通过 <code>setWindowTitle()</code> 方法设置窗口的标题。标题显示在标题栏中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">w.show()</span><br></pre></td></tr></table></figure>\n\n<p><code>show()</code> 方法将小部件显示在屏幕上。小部件先创建于内存中，再显示在屏幕上。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">sys.exit(app.<span class=\"built_in\">exec</span>())</span><br></pre></td></tr></table></figure>\n\n<p>最后，我们进入应用程序的主循环。事件处理从这里开始。主循环从窗口系统接收事件，并将它们派发给应用程序小部件。当我们调用 <code>exit()</code> 方法或主小部件被销毁时，主循环结束。<code>system.exit()</code> 方法确保程序干净地退出。环境将被告知应用程序是如何结束的。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/simple.png?ezimgfmt=rs:252x176/rscb1/ng:webp/ngcb1\" alt=\"Simple\" loading=\"lazy\"><br>Figure: Simple</p>\n<h2 id=\"PyQt6-工具提示\"><a href=\"#PyQt6-工具提示\" class=\"headerlink\" title=\"PyQt6 工具提示\"></a>PyQt6 工具提示</h2><p>我们可以为任何小部件提供气球帮助。</p>\n<figure class=\"highlight py\"><figcaption><span>tooltip.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example shows a tooltip on</span></span><br><span class=\"line\"><span class=\"string\">a window and a button.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QToolTip,</span><br><span class=\"line\">QPushButton, QApplication)</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QFont</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        QToolTip.setFont(QFont(<span class=\"string\">&#x27;SansSerif&#x27;</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setToolTip(<span class=\"string\">&#x27;This is a &lt;b&gt;QWidget&lt;/b&gt; widget&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        btn = QPushButton(<span class=\"string\">&#x27;Button&#x27;</span>, self)</span><br><span class=\"line\">        btn.setToolTip(<span class=\"string\">&#x27;This is a &lt;b&gt;QPushButton&lt;/b&gt; widget&#x27;</span>)</span><br><span class=\"line\">        btn.resize(btn.sizeHint())</span><br><span class=\"line\">        btn.move(<span class=\"number\">50</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Tooltips&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本示例中，我们为 PyQt6 小部件显示了一个工具提示。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">QToolTip.setFont(QFont(<span class=\"string\">&#x27;SansSerif&#x27;</span>, <span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<p>此静态方法设置用于渲染工具提示的字体。我们使用 10pt SansFerif 字体。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.setToolTip(<span class=\"string\">&#x27;This is a &lt;b&gt;QWidget&lt;/b&gt; widget&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>要创建工具提示，我们调用 <code>setTooltip()</code> 方法。我们可以使用富文本格式。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">btn = QPushButton(<span class=\"string\">&#x27;Button&#x27;</span>, self)</span><br><span class=\"line\">btn.setToolTip(<span class=\"string\">&#x27;This is a &lt;b&gt;QPushButton&lt;/b&gt; widget&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们创建了一个按钮小部件，并为它设置工具提示。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">btn.resize(btn.sizeHint())</span><br><span class=\"line\">btn.move(<span class=\"number\">50</span>, <span class=\"number\">50</span>)</span><br></pre></td></tr></table></figure>\n\n<p>此按钮将被调整尺寸，并在窗口上移动。<code>sezeHint()</code> 方法为按钮提供一个推荐的尺寸。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/tooltips.png?ezimgfmt=rs:302x226/rscb1/ng:webp/ngcb1\" alt=\"Tooltips\" loading=\"lazy\"><br>Figure: Tooltips</p>\n<h2 id=\"PyQt6-退出按钮\"><a href=\"#PyQt6-退出按钮\" class=\"headerlink\" title=\"PyQt6 退出按钮\"></a>PyQt6 退出按钮</h2><p>关闭窗口最明显的方法是单击标题栏中的 X 标记。在下一个示例中，我们将展示如何以编程方式关闭窗口。我们将简要地接触信号和槽。</p>\n<p>下面是我们在示例中使用的 <code>QPushButton</code> 小部件的构建函数。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">QPushButton(string text, QWidget parent = <span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>text</code> 参数是将要显示在按钮上的文本。<code>parent</code> 是我们放置按钮的小部件。在我们的例子中，它将是一个 <code>QWidget</code> 对象。应用程序的小部件形成层次结构。在这个层次结构中，大多数小部件都拥有它们的父小部件。没有父小部件的小部件是顶层窗口。</p>\n<figure class=\"highlight py\"><figcaption><span>quit_button.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program creates a quit</span></span><br><span class=\"line\"><span class=\"string\">button. When we press the button,</span></span><br><span class=\"line\"><span class=\"string\">the application terminates.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QPushButton, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        qbtn = QPushButton(<span class=\"string\">&#x27;Quit&#x27;</span>, self)</span><br><span class=\"line\">        qbtn.clicked.connect(QApplication.instance().quit)</span><br><span class=\"line\">        qbtn.resize(qbtn.sizeHint())</span><br><span class=\"line\">        qbtn.move(<span class=\"number\">50</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Quit button&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本示例中，我们创建了一个退出按钮。点击此按钮后，应用程序将终止。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qbtn = QPushButton(<span class=\"string\">&#x27;Quit&#x27;</span>, self)</span><br></pre></td></tr></table></figure>\n\n<p>我们创建了一个按钮。按钮是 <code>QPushButton</code> 类的实例。构建函数中第一个参数是按钮的标签。第二个参数是父小部件。此处父小部件是 <code>Example</code> ，继承自 <code>QWidget</code>。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qbtn.clicked.connect(QApplication.instance().quit)</span><br></pre></td></tr></table></figure>\n\n<p>PyQt6 的事件处理系统基于信号与槽机制构建。若我们点击按钮，将发送 <code>clicked</code> 信号。槽可以是 Qt 槽或其它任意 Python 可调用内容。</p>\n<p>通过 <code>QApplication.instance()</code> 得到的 <code>QCoreApplication</code> 对象包含主事件循环——用于可处理和调度所有事件。<code>clicked</code> 信号已连接到 <code>quit()</code> 方法上，此方法可终止应用程序。通信需要在两个对象之间完成：发送方和接收方。此处发送方是按钮，接收方是应用程序对象。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/quitbutton.png?ezimgfmt=rs:252x176/rscb1/ng:webp/ngcb1\" alt=\"Quit button\" loading=\"lazy\"><br>Figure: Quit button</p>\n<h2 id=\"PyQt6-消息框\"><a href=\"#PyQt6-消息框\" class=\"headerlink\" title=\"PyQt6 消息框\"></a>PyQt6 消息框</h2><p>默认情况下，如果我们点击标题栏上的 X 按钮，<code>QWidget</code> 将被关闭。有时我们希望修改此默认行为。例如，如果我们在编辑器中打开了一个文件，并做出了一些修改，我们将显示一个消息框以确认操作。</p>\n<figure class=\"highlight py\"><figcaption><span>messagebox.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program shows a confirmation</span></span><br><span class=\"line\"><span class=\"string\">message box when we click on the close</span></span><br><span class=\"line\"><span class=\"string\">button of the application window.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QMessageBox, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Message box&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">closeEvent</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">        reply = QMessageBox.question(self, <span class=\"string\">&#x27;Message&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Are you sure to quit?&quot;</span>, QMessageBox.StandardButton.Yes |</span><br><span class=\"line\">                    QMessageBox.StandardButton.No, QMessageBox.StandardButton.No)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> reply == QMessageBox.StandardButton.Yes:</span><br><span class=\"line\">            event.accept()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            event.ignore()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>如果我们关闭一个 <code>QWidget</code>，将生成一个 <code>QCloseEvent</code>。要修改小部件的默认行为，我们需要重新实现 <code>closeEvent()</code> 事件处理器。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">reply = QMessageBox.question(</span><br><span class=\"line\">    self,</span><br><span class=\"line\">    <span class=\"string\">&quot;Message&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Are you sure to quit?&quot;</span>,</span><br><span class=\"line\">    QMessageBox.Yes | QMessageBox.No,</span><br><span class=\"line\">    QMessageBox.No,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>我们显示了一个带有 Yes 和 No 两个按钮的消息框。第一个字符串出现在标题栏上。第二个字符串是对话框显示的消息文本。第三个参数指定了出现在对话框中的按钮组。最后一个参数是默认按钮。此按钮最早具有键盘焦点。返回值储存在 <code>reply</code> 变量中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> reply == QMessageBox.StandardButton.Yes:</span><br><span class=\"line\">    event.accept()</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    event.ignore()</span><br></pre></td></tr></table></figure>\n\n<p>现在我们测试返回值。如果我们点击 Yes 按钮，我们将接收一个导致小部件关闭和应用程序终止的事件。否则我们将忽略关闭事件。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/messagebox.png?ezimgfmt=rs:200x113/rscb1/ng:webp/ngcb1\" alt=\"Message box\" loading=\"lazy\"><br>Figure: Message box</p>\n<h1 id=\"PyQt6-居中窗口\"><a href=\"#PyQt6-居中窗口\" class=\"headerlink\" title=\"PyQt6 居中窗口\"></a>PyQt6 居中窗口</h1><p>下面的脚本展示了如何在桌面屏幕上居中显示窗口。</p>\n<figure class=\"highlight py\"><figcaption><span>center.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program centers a window</span></span><br><span class=\"line\"><span class=\"string\">on the screen.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.resize(<span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.center()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Center&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">center</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        qr = self.frameGeometry()</span><br><span class=\"line\">        cp = self.screen().availableGeometry().center()</span><br><span class=\"line\"></span><br><span class=\"line\">        qr.moveCenter(cp)</span><br><span class=\"line\">        self.move(qr.topLeft())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p><code>QScreen</code> 类用于查询屏幕属性。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.center()</span><br></pre></td></tr></table></figure>\n\n<p>将窗口居中的代码旋转在自定义的 <code>center()</code> 方法中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qr = self.frameGeometry()</span><br></pre></td></tr></table></figure>\n\n<p>我们得到一个指定了窗口形状的矩形。它包含任何窗口框架。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp = self.screen().availableGeometry().center()</span><br></pre></td></tr></table></figure>\n\n<p>我们计算出显示器的分辨率。基于此分辨率，我们得到了中心点。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qr.moveCenter(cp)</span><br></pre></td></tr></table></figure>\n\n<p>我们的矩形已经具有自己的宽高。现在我们设置矩形的中心为屏幕的中心。矩形尺寸未变。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.move(qr.topLeft())</span><br></pre></td></tr></table></figure>\n\n<p>我们将应用程序窗口的左上角移动到 <code>qr</code> 矩形的左上角，从而使窗口在屏幕上居中。</p>\n<blockquote>\n<p>译注，窗口居中的流程是：获取窗口对应矩形，获取屏幕，矩形对齐屏幕，窗口对齐矩形。</p>\n</blockquote>\n<p>在 PyQt6 教程的这一部分中，我们用 PyQt6 创建了简单的代码示例。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9maXJzdHByb2dyYW1zLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/datetime\">上一章</a> <a href=\"/translation/zt-pyqt6/menustoolbars\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/eventssignals.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9ldmVudHNzaWduYWxzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/layout\">上一章</a> <a href=\"/translation/zt-pyqt6/dialogs\">下一章</a></p>\n<h1 id=\"PyQt6-事件与信号\"><a href=\"#PyQt6-事件与信号\" class=\"headerlink\" title=\"PyQt6 事件与信号\"></a>PyQt6 事件与信号</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-25</em></p>\n</blockquote>\n<p>在 PyQt6 编程教程的这一部分中，我们将探讨应用程序中发生的事件和信号。</p>\n<h2 id=\"PyQt6-中的事件\"><a href=\"#PyQt6-中的事件\" class=\"headerlink\" title=\"PyQt6 中的事件\"></a>PyQt6 中的事件</h2><p>GUI 应用程序的事件驱动的。事件主要由应用程序的用户生成。但它们也可以通过其它方式生成；比如，网络连接、窗口管理器或计时器。当我们调用应用程序的 <code>exec()</code> 方法时，应用程序就进入主循环。主循环获取事件并将其发送给具体对象。</p>\n<p>在事件模型中，有这三个参与者：</p>\n<ul>\n<li>事件源</li>\n<li>事件对象</li>\n<li>事件目标</li>\n</ul>\n<p><em>事件源</em>即状态发生改变的对象。它生成事件。_事件对象_（事件）封装了事件源中的状态变化。<em>事件目标</em>即需要被通知的对象。事件源将处理事件的任务委托给事件目标。</p>\n<p>PyQt6 拥有一个独特的信号与槽机制来处理事件。信号与槽用于对象之间的通信。当特定事件发生时，<em>信号</em>被发出。<em>槽</em>可以是任何 Python 可调用对象。当它连接的信号被发出时，一个槽被调用。</p>\n<h2 id=\"PyQt6-信号与槽\"><a href=\"#PyQt6-信号与槽\" class=\"headerlink\" title=\"PyQt6 信号与槽\"></a>PyQt6 信号与槽</h2><p>这是一个 PyQt6 中信号与槽的简单示例。</p>\n<figure class=\"highlight py\"><figcaption><span>signals_slots.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we connect a signal</span></span><br><span class=\"line\"><span class=\"string\">of a QSlider to a slot of a QLCDNumber.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QLCDNumber, QSlider,</span><br><span class=\"line\">QVBoxLayout, QApplication)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        lcd = QLCDNumber(self)</span><br><span class=\"line\">        sld = QSlider(Qt.Orientation.Horizontal, self)</span><br><span class=\"line\">        vbox = QVBoxLayout()</span><br><span class=\"line\">        vbox.addWidget(lcd)</span><br><span class=\"line\">        vbox.addWidget(sld)</span><br><span class=\"line\">        self.setLayout(vbox)</span><br><span class=\"line\">        sld.valueChanged.connect(lcd.display)</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Signal and slot&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>在本例中， 我们显示了一个 <code>QtGui.QLCDNumber</code> 和一个 <code>QtGui.QSlider</code>。我们通过拖动滑块来改变 LCD 中的数字。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">sld.valueChanged.connect(lcd.display)</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们将滑块的 <code>valueChangec</code> 信号连接到 <code>lcd</code> 数字的 <code>display</code> 槽中。</p>\n<p><em>发送方</em>是发送信号的对象。<em>接收方</em>是接收信号的对象。槽是对信号作出反应的方法。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/sigslot.png?ezimgfmt=rs:252x175/rscb1/ng:webp/ngcb1\" alt=\"Signal &amp; slot\" loading=\"lazy\"><br>Figure: Signal &amp; slot</p>\n<h2 id=\"PyQt6-重新实现事件处理器\"><a href=\"#PyQt6-重新实现事件处理器\" class=\"headerlink\" title=\"PyQt6 重新实现事件处理器\"></a>PyQt6 重新实现事件处理器</h2><p>PyQt6 中的事件通常通过重新实现事件处理器来处理。</p>\n<figure class=\"highlight py\"><figcaption><span>reimplement_handler.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we reimplement an</span></span><br><span class=\"line\"><span class=\"string\">event handler.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Event handler&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">keyPressEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> e.key() == Qt.Key.Key_Escape.value:</span><br><span class=\"line\">            self.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>在本例中，我们重新实现了 <code>keyPressEvent</code> 事件处理器。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">keyPressEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> e.key() == Qt.Key.Key_Escape.value:</span><br><span class=\"line\">        self.close()</span><br></pre></td></tr></table></figure>\n\n<p>如果我们点击 ESC 按钮，应用程序将终止。</p>\n<h2 id=\"PyQt6-事件对象\"><a href=\"#PyQt6-事件对象\" class=\"headerlink\" title=\"PyQt6 事件对象\"></a>PyQt6 事件对象</h2><p>事件对象是一个 Python 对象，它包含许多用于描述事件的属性。事件对象特定于生成的事件类型。</p>\n<figure class=\"highlight py\"><figcaption><span>event_object.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we display the x and y</span></span><br><span class=\"line\"><span class=\"string\">coordinates of a mouse pointer in a label widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QApplication, QGridLayout, QLabel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        grid = QGridLayout()</span><br><span class=\"line\"></span><br><span class=\"line\">        x = <span class=\"number\">0</span></span><br><span class=\"line\">        y = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.text = <span class=\"string\">f&#x27;x: <span class=\"subst\">&#123;x&#125;</span>,  y: <span class=\"subst\">&#123;y&#125;</span>&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.label = QLabel(self.text, self)</span><br><span class=\"line\">        grid.addWidget(self.label, <span class=\"number\">0</span>, <span class=\"number\">0</span>, Qt.AlignmentFlag.AlignTop)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setMouseTracking(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        self.setLayout(grid)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">450</span>, <span class=\"number\">300</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Event object&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mouseMoveEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        x = <span class=\"built_in\">int</span>(e.position().x())</span><br><span class=\"line\">        y = <span class=\"built_in\">int</span>(e.position().y())</span><br><span class=\"line\"></span><br><span class=\"line\">        text = <span class=\"string\">f&#x27;x: <span class=\"subst\">&#123;x&#125;</span>,  y: <span class=\"subst\">&#123;y&#125;</span>&#x27;</span></span><br><span class=\"line\">        self.label.setText(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例中，我们在一个标签小部件中显示了鼠标指针的 x 与 y 坐标。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.setMouseTracking(<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>默认禁用追踪鼠标，因此移动鼠标时，至少要按下一个鼠标按钮，小部件才会接收鼠标移动事件。如果启用鼠标追踪，则即使没有按钮被按下，小部件也能接收到鼠标移动事件。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mouseMoveEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">    x = <span class=\"built_in\">int</span>(e.position().x())</span><br><span class=\"line\">    y = <span class=\"built_in\">int</span>(e.position().y())</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p><code>e</code> 是事件对象；它包含关于被触发事件的数据。在本例中是鼠标移动事件。通过 <code>position().x()</code> 和 <code>position().y()</code> 方法，我们确定了鼠标指针的 x 和 y 坐标。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.text = <span class=\"string\">f&#x27;x: <span class=\"subst\">&#123;x&#125;</span>, y: <span class=\"subst\">&#123;y&#125;</span>&#x27;</span></span><br><span class=\"line\">self.label = QLabel(self.text, self)</span><br></pre></td></tr></table></figure>\n\n<p>x 与 y 坐标显示在 <code>QLabel</code> 小部件中。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/eventobject.png?ezimgfmt=rs:352x225/rscb1/ng:webp/ngcb1\" alt=\"Event object\" loading=\"lazy\"><br>Figure: Event object</p>\n<h2 id=\"PyQt6-事件发送方\"><a href=\"#PyQt6-事件发送方\" class=\"headerlink\" title=\"PyQt6 事件发送方\"></a>PyQt6 事件发送方</h2><p>有时知道哪个小部件是信号的发送方会很便利。为此，PyQt6 有 <code>sender()</code> 方法。</p>\n<figure class=\"highlight py\"><figcaption><span>event_sender.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we determine the event sender</span></span><br><span class=\"line\"><span class=\"string\">object.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QMainWindow, QPushButton, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        btn1 = QPushButton(<span class=\"string\">&quot;Button 1&quot;</span>, self)</span><br><span class=\"line\">        btn1.move(<span class=\"number\">30</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\">        btn2 = QPushButton(<span class=\"string\">&quot;Button 2&quot;</span>, self)</span><br><span class=\"line\">        btn2.move(<span class=\"number\">150</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\">        btn1.clicked.connect(self.buttonClicked)</span><br><span class=\"line\">        btn2.clicked.connect(self.buttonClicked)</span><br><span class=\"line\">        self.statusBar()</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">450</span>, <span class=\"number\">350</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Event sender&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">buttonClicked</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        sender = self.sender()</span><br><span class=\"line\">        msg = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;sender.text()&#125;</span> was pressed&#x27;</span></span><br><span class=\"line\">        self.statusBar().showMessage(msg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>在本例中我们有两个按钮。在 <code>buttonClicked()</code> 方法中，我们通过调用 <code>sender()</code> 方法来确定我们点击了哪个按钮。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">btn1.clicked.connect(self.buttonClicked)</span><br><span class=\"line\">btn2.clicked.connect(self.buttonClicked)</span><br></pre></td></tr></table></figure>\n\n<p>两个按钮都连接到同一个槽。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">buttonClicked</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    sender = self.sender()</span><br><span class=\"line\">    msg = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;sender.text()&#125;</span> was pressed&#x27;</span></span><br><span class=\"line\">    self.statusBar().showMessage(msg)</span><br></pre></td></tr></table></figure>\n\n<p>我们通过调用 <code>sendr()</code> 方法来确定事件源。在应用程序的状态栏中，我们显示了所按下按钮的标签。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/eventsender.png?ezimgfmt=rs:292x176/rscb1/ng:webp/ngcb1\" alt=\"Event sender\" loading=\"lazy\"><br>Figure: Event sender</p>\n<h2 id=\"PyQt6-发出信号\"><a href=\"#PyQt6-发出信号\" class=\"headerlink\" title=\"PyQt6 发出信号\"></a>PyQt6 发出信号</h2><p>通过 <code>QObject</code> 创建的对象可以发送信号。以下示例展示了如何发送自定义信号。</p>\n<figure class=\"highlight py\"><figcaption><span>custom_signal.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we show how to</span></span><br><span class=\"line\"><span class=\"string\">emit a custom signal.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> pyqtSignal, QObject</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QMainWindow, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Communicate</span>(<span class=\"title class_ inherited__\">QObject</span>):</span><br><span class=\"line\">    closeApp = pyqtSignal()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.c = Communicate()</span><br><span class=\"line\">        self.c.closeApp.connect(self.close)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">450</span>, <span class=\"number\">350</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Emit signal&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mousePressEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        self.c.closeApp.emit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>我们创建了一个名为 <code>closeApp</code>的新信号。该信号在鼠标按下事件期间发出。信号连接到 <code>QMainWindow</code> 的 <code>close</code> 槽中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Communicate</span>(<span class=\"title class_ inherited__\">QObject</span>):</span><br><span class=\"line\">    closeApp = pyqtSignal()</span><br></pre></td></tr></table></figure>\n\n<p>信号是将 <code>pyqtSignal</code> 作为外面的 <code>Communicate</code> 类的属性来创建的。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.c = Communicate()</span><br><span class=\"line\">self.c.closeApp.connect(self.close)</span><br></pre></td></tr></table></figure>\n\n<p>自定义的 <code>closeApp</code> 信号连接到 <code>QMainWindow</code> 的 <code>close</code> 槽。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mousePressEvent</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">    self.c.closeApp.emit()</span><br></pre></td></tr></table></figure>\n\n<p>当我们用鼠标指针点击窗口时，会发出 <code>closeApp</code> 信号。应用程序将终止。</p>\n<p>在 PyQt6 教程的这一部分中，我们讨论了信号和槽。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9ldmVudHNzaWduYWxzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/layout\">上一章</a> <a href=\"/translation/zt-pyqt6/dialogs\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/introduction.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9pbnRyb2R1Y3Rpb24v\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/datetime\">下一章</a></p>\n<h1 id=\"PyQt6-介绍\"><a href=\"#PyQt6-介绍\" class=\"headerlink\" title=\"PyQt6 介绍\"></a>PyQt6 介绍</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-23</em></p>\n</blockquote>\n<p>这是一个介绍性的 PyQt6 教程。本教程的目的是帮助您开始使用 PyQt6 工具包。</p>\n<h2 id=\"关于-PyQt6\"><a href=\"#关于-PyQt6\" class=\"headerlink\" title=\"关于 PyQt6\"></a>关于 PyQt6</h2><p>PyQt6 是 Digia 为 Qt6 应用程序框架提供的一组 Python 绑定。Qt 库是最强大的 GUI 库之一。PyQt6 的官方主页是<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucml2ZXJiYW5rY29tcHV0aW5nLmNvLnVrL25ld3M=\">www.riverbankcomputing.co.uk/news<i class=\"fa fa-external-link-alt\"></i></span>。PyQt6 是由 Riverbank Computing 开发的。</p>\n<p>PyQt6 被实现为一组 Python 模块。它是一个多平台工具包，可以在所有主要的操作系统上运行，包括 Unix、Windows 和 Mac OS。PyQt6 是双重许可的;开发人员可以在 GPL 和商业许可证之间进行选择。</p>\n<h2 id=\"PyQt6-安装\"><a href=\"#PyQt6-安装\" class=\"headerlink\" title=\"PyQt6 安装\"></a>PyQt6 安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pip install PyQt6</span><br></pre></td></tr></table></figure>\n\n<p>我们可以用 <code>pip</code> 工具安装 PyQt6。</p>\n<h2 id=\"PyQt6-模块\"><a href=\"#PyQt6-模块\" class=\"headerlink\" title=\"PyQt6 模块\"></a>PyQt6 模块</h2><p>PyQt6 的类分为几个模块，包括：</p>\n<ul>\n<li>QtCore</li>\n<li>QtGui</li>\n<li>QtWidgets</li>\n<li>QtDBus</li>\n<li>QtNetwork</li>\n<li>QtHelp</li>\n<li>QtXml</li>\n<li>QtSvg</li>\n<li>QtSql</li>\n<li>QtTest</li>\n</ul>\n<p><code>QtCore</code> 模块包含核心非 GUI 功能。该模块用于处理时间、文件与目录、各种数据类型、流、URL、MIME 类型、线程或进程。<code>QtGui</code> 类包含窗口系统集成、事件处理、2D 图形、基础图像、字体和文本相关的类。<code>QtWidgets</code> 模块包含了一些类，这些类提供了一组 UI 元素用于创建经典桌面风格用户界面。</p>\n<p><code>QtBus</code> 模块包含使用 D-Bus 协议以支持 IPC 的类。<code>QtNetwork</code> 模块包含用于网络编程的类。这些类通过使网络编程更容易、更便携，促进了 TCP&#x2F;IP 与 UDP 的客户端与服务器端编码。<code>QtHelp</code> 模块包含用于创建和查看可搜索文档的类。</p>\n<p><code>QtXml</code> 模块包含处理 XML 文件的类。该模块提供了 SAX API 和 DOM API 的实现。<code>QtSvg</code> 模块提供了用于显示 SVG 文件内容的类。可绽放矢量图形（Scalable Vector Graphics, SVG）是一种用 XML 描述二维图形和图形应用程序的语言。<code>QtSql</code> 模块提供了处理数据库的类。<code>QtTest</code> 包含能够对 PyQt6 应用程序进行单元测试的函数。</p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><p>Python 是一种通用的、动态的、面向对象的编程语言。Python 语言的设计目的在于强调程序员生产力和代码可读性。它首次发布于 1991 年。Python 的灵感源自 ABC、Haskell、Java、Lisp、Icon 和 Perl 编程语言。Python 是一种高级的、通用的、多平台的解释型语言。它是由世界各地的一大群志愿者维护的。</p>\n<p>Python 编程语言的官方网站是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXRob24ub3JnLw==\">python.org<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<h2 id=\"PyQt6-版本\"><a href=\"#PyQt6-版本\" class=\"headerlink\" title=\"PyQt6 版本\"></a>PyQt6 版本</h2><p><code>QT_VERSION_STR</code> 提供了 Qt 的版本，<code>PYQT_VERSION_STR</code> 提供了 PyQt6 的版本。</p>\n<figure class=\"highlight py\"><figcaption><span>version.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QT_VERSION_STR</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> PYQT_VERSION_STR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(QT_VERSION_STR)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(PYQT_VERSION_STR)</span><br></pre></td></tr></table></figure>\n\n<p>我们打印 Qt 库和 PyQt6 模块的版本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">./version.py</span></span><br><span class=\"line\">6.3.1</span><br><span class=\"line\">6.3.1</span><br></pre></td></tr></table></figure>\n\n<p>本章是 PyQt6 工具箱的介绍。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9pbnRyb2R1Y3Rpb24v\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/datetime\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/layout.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9sYXlvdXQv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/menustoolbars\">上一章</a> <a href=\"/translation/zt-pyqt6/eventssignals\">下一章</a></p>\n<h1 id=\"PyQt6-布局管理\"><a href=\"#PyQt6-布局管理\" class=\"headerlink\" title=\"PyQt6 布局管理\"></a>PyQt6 布局管理</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-25</em></p>\n</blockquote>\n<p>布局管理即我们在应用程序窗口中放置小部件的方式。我们可以使用绝对定位或布局类来放置小部件。使用布局管理器来管理布局是组织小部件的首选方式。</p>\n<h2 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h2><p>程序员以像素为单位指定每个小部件的位置和尺寸。使用绝对定位时，我们必须知道以下局限性：</p>\n<ul>\n<li>若调整窗口尺寸，小部件的尺寸和位置不会改变</li>\n<li>应用程序在不同平台上可能看起来不同</li>\n<li>在应用程序中改变字体可能破坏布局</li>\n<li>如果我们决定改变布局，必须完全重做布局，十分繁琐和耗时</li>\n</ul>\n<p>以下示例使用绝对坐标定位小部件。</p>\n<figure class=\"highlight py\"><figcaption><span>absolute.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example shows three labels on a window</span></span><br><span class=\"line\"><span class=\"string\">using absolute positioning.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QLabel, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        lbl1 = QLabel(<span class=\"string\">&#x27;ZetCode&#x27;</span>, self)</span><br><span class=\"line\">        lbl1.move(<span class=\"number\">15</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl2 = QLabel(<span class=\"string\">&#x27;tutorials&#x27;</span>, self)</span><br><span class=\"line\">        lbl2.move(<span class=\"number\">35</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl3 = QLabel(<span class=\"string\">&#x27;for programmers&#x27;</span>, self)</span><br><span class=\"line\">        lbl3.move(<span class=\"number\">55</span>, <span class=\"number\">70</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Absolute&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>我们使用 <code>move()</code> 方法来定位小部件。在本例中指这些标签。我们提供 x 和 y 坐标来定位它们。坐标系的原点在左上角。x 值向右增长，y 值向下增长。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">lbl1 = QLabel(<span class=\"string\">&#x27;ZetCode&#x27;</span>, self)</span><br><span class=\"line\">lbl1.move(<span class=\"number\">15</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>此标签小部件定位于 <code>x=15</code> 和 <code>y=10</code> 处。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/absolute.png?ezimgfmt=rs:252x176/rscb1/ng:webp/ngcb1\" alt=\"Absolute positioning\" loading=\"lazy\"><br>Figure: Absolute positioning</p>\n<h2 id=\"PyQt6-QHBoxLayout-水平布局\"><a href=\"#PyQt6-QHBoxLayout-水平布局\" class=\"headerlink\" title=\"PyQt6 QHBoxLayout 水平布局\"></a>PyQt6 QHBoxLayout 水平布局</h2><p><code>QHBoxLayout</code> 和 <code>QVBoxLayout</code> 是水平或垂直排列小部件的基础布局类。</p>\n<p>假设我们要将两个按钮旋转在右下角。要创建这样的布局，我们使用一个水平盒和一个垂直盒。为了生成必要的空间，我们还添加了拉伸因子。</p>\n<figure class=\"highlight py\"><figcaption><span>box_layout.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we position two push</span></span><br><span class=\"line\"><span class=\"string\">buttons in the bottom-right corner</span></span><br><span class=\"line\"><span class=\"string\">of the window.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QPushButton,</span><br><span class=\"line\">QHBoxLayout, QVBoxLayout, QApplication)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        okButton = QPushButton(<span class=\"string\">&quot;OK&quot;</span>)</span><br><span class=\"line\">        cancelButton = QPushButton(<span class=\"string\">&quot;Cancel&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        hbox = QHBoxLayout()</span><br><span class=\"line\">        hbox.addStretch(<span class=\"number\">1</span>)</span><br><span class=\"line\">        hbox.addWidget(okButton)</span><br><span class=\"line\">        hbox.addWidget(cancelButton)</span><br><span class=\"line\"></span><br><span class=\"line\">        vbox = QVBoxLayout()</span><br><span class=\"line\">        vbox.addStretch(<span class=\"number\">1</span>)</span><br><span class=\"line\">        vbox.addLayout(hbox)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setLayout(vbox)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Buttons&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本示例将两个按钮放置在窗口的底部右侧角落。当窗口调整尺寸时，它们仍在那里。我们同时使用了 <code>QHBoxLayout</code> 和 <code>QVBoxLayout</code>。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">okButton = QPushButton(<span class=\"string\">&quot;OK&quot;</span>)</span><br><span class=\"line\">cancelButton = QPushButton(<span class=\"string\">&quot;Cancel&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>此处创建两个按钮。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">hbox = QHBoxLayout()</span><br><span class=\"line\">hbox.addStretch(<span class=\"number\">1</span>)</span><br><span class=\"line\">hbox.addWidget(okButton)</span><br><span class=\"line\">hbox.addWidget(cancelButton)</span><br></pre></td></tr></table></figure>\n\n<p>我们创建一个水平盒，先添加拉伸因子，再添加两个按钮。拉伸因子在两个按钮前加入一个可伸缩空间。这将把它们推到窗口的右边。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">vbox = QVBoxLayout()</span><br><span class=\"line\">vbox.addStretch(<span class=\"number\">1</span>)</span><br><span class=\"line\">vbox.addLayout(hbox)</span><br></pre></td></tr></table></figure>\n\n<p>水平布局放置在垂直布局中。垂直盒中的拉伸因子将带有按钮的水平盒推到窗口的底部。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.setLayout(vbox)</span><br></pre></td></tr></table></figure>\n\n<p>最后，我们为窗口设置主布局。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/buttons.png?ezimgfmt=rs:302x176/rscb1/ng:webp/ngcb1\" alt=\"Buttons\" loading=\"lazy\"><br>Figure: Buttons</p>\n<h2 id=\"PyQt6-QGridLayout-网格布局\"><a href=\"#PyQt6-QGridLayout-网格布局\" class=\"headerlink\" title=\"PyQt6 QGridLayout 网格布局\"></a>PyQt6 QGridLayout 网格布局</h2><p><code>QGridLayout</code> 是最通用的布局类。它将空间划分为行和列。</p>\n<figure class=\"highlight py\"><figcaption><span>calculator.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we create a skeleton</span></span><br><span class=\"line\"><span class=\"string\">of a calculator using QGridLayout.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QGridLayout,</span><br><span class=\"line\">QPushButton, QApplication)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        grid = QGridLayout()</span><br><span class=\"line\">        self.setLayout(grid)</span><br><span class=\"line\"></span><br><span class=\"line\">        names = [<span class=\"string\">&#x27;Cls&#x27;</span>, <span class=\"string\">&#x27;Bck&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;Close&#x27;</span>,</span><br><span class=\"line\">                 <span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">                 <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\">                 <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>,</span><br><span class=\"line\">                 <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;=&#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        positions = [(i, j) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> position, name <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(positions, names):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> name == <span class=\"string\">&#x27;&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            button = QPushButton(name)</span><br><span class=\"line\">            grid.addWidget(button, *position)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.move(<span class=\"number\">300</span>, <span class=\"number\">150</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Calculator&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本示例中，我们创建了一个按钮网格。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">grid = QGridLayout()</span><br><span class=\"line\">self.setLayout(grid)</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 <code>QGridLayout</code> 的实例，并设置它为窗口的主布局。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">&#x27;Cls&#x27;</span>, <span class=\"string\">&#x27;Bck&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;Close&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;=&#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>这些是稍后用于按钮的标签。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">positions = [(i,j) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>)]</span><br></pre></td></tr></table></figure>\n\n<p>我们创建了一个网格坐标的列表。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> position, name <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(positions, names):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> name == <span class=\"string\">&#x27;&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    button = QPushButton(name)</span><br><span class=\"line\">    grid.addWidget(button, *position)</span><br></pre></td></tr></table></figure>\n\n<p>创建按钮，并通过 <code>addWidget()</code> 方法加入布局。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/calculator.png?ezimgfmt=rs:382x207/rscb1/ng:webp/ngcb1\" alt=\"Calculator skeleton\" loading=\"lazy\"><br>Figure: Calculator skeleton</p>\n<h2 id=\"示例：评论\"><a href=\"#示例：评论\" class=\"headerlink\" title=\"示例：评论\"></a>示例：评论</h2><p>小部件可以跨越网格中的若干行或列。在下例中，我们将对此进行说明。</p>\n<figure class=\"highlight py\"><figcaption><span>review.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we create a bit</span></span><br><span class=\"line\"><span class=\"string\">more complicated window layout using</span></span><br><span class=\"line\"><span class=\"string\">the QGridLayout manager.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QLabel, QLineEdit,</span><br><span class=\"line\">QTextEdit, QGridLayout, QApplication)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        title = QLabel(<span class=\"string\">&#x27;Title&#x27;</span>)</span><br><span class=\"line\">        author = QLabel(<span class=\"string\">&#x27;Author&#x27;</span>)</span><br><span class=\"line\">        review = QLabel(<span class=\"string\">&#x27;Review&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        titleEdit = QLineEdit()</span><br><span class=\"line\">        authorEdit = QLineEdit()</span><br><span class=\"line\">        reviewEdit = QTextEdit()</span><br><span class=\"line\"></span><br><span class=\"line\">        grid = QGridLayout()</span><br><span class=\"line\">        grid.setSpacing(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        grid.addWidget(title, <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        grid.addWidget(titleEdit, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        grid.addWidget(author, <span class=\"number\">2</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        grid.addWidget(authorEdit, <span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        grid.addWidget(review, <span class=\"number\">3</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        grid.addWidget(reviewEdit, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setLayout(grid)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">300</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Review&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>我们创建一个窗口，其中包含三个标签、两个单行文本框和一个多行文本框小部件。布局使用 <code>QGridLayout</code> 完成。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">grid = QGridLayout()</span><br><span class=\"line\">grid.setSpacing(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>创建一个网格布局，并设置小部件间距。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">grid.addWidget(reviewEdit, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果我们要向网格布局添加小部件，那么我们可以同时指定小部件的行跨度和列跨度。在本例中，我们使 <code>reviewEdit</code> 小部件跨越 5 行。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/review.png?ezimgfmt=rs:352x326/rscb1/ng:webp/ngcb1\" alt=\"Review example\" loading=\"lazy\"><br>Figure: Review example</p>\n<p>PyQt6 教程的这一部分专门讨论布局管理。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9sYXlvdXQv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/menustoolbars\">上一章</a> <a href=\"/translation/zt-pyqt6/eventssignals\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/painting.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9wYWludGluZy8=\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/dragdrop\">上一章</a> <a href=\"/translation/zt-pyqt6/customwidgets\">下一章</a></p>\n<h1 id=\"PyQt6-绘图\"><a href=\"#PyQt6-绘图\" class=\"headerlink\" title=\"PyQt6 绘图\"></a>PyQt6 绘图</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-28</em></p>\n</blockquote>\n<p>PyQt6 绘图系统可以渲染矢量图形、图像和轮廓基于字体的文本。当我们想更改或增强现有小部件时，或如果我们从零开始创建自定义小部件，就需要在应用程序进行绘制。要进行绘制，我们应使用 PyQt6 工具包提供的绘图 API。</p>\n<h2 id=\"QPainter\"><a href=\"#QPainter\" class=\"headerlink\" title=\"QPainter\"></a>QPainter</h2><p><code>QPainter</code> 在小部件或其它设备上执行低级别绘制。它可以画出从简单线条到复制形状的一切内容。</p>\n<h2 id=\"paintEvent-方法\"><a href=\"#paintEvent-方法\" class=\"headerlink\" title=\"paintEvent 方法\"></a>paintEvent 方法</h2><p>绘制在 <code>paintEvent()</code> 方法中完成。绘制代码位于 <code>QPainter</code> 对象的 <code>begin()</code> 和 <code>end()</code> 方法之间。它在小部件或其它设备上执行低级别绘制。</p>\n<h2 id=\"PyQt6-绘制文本\"><a href=\"#PyQt6-绘制文本\" class=\"headerlink\" title=\"PyQt6 绘制文本\"></a>PyQt6 绘制文本</h2><p>我们首先在窗口的用户区绘制一些 Unicode 文本。</p>\n<figure class=\"highlight py\"><figcaption><span>draw_text.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we draw text in Russian Cylliric.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QPainter, QColor, QFont</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.text = <span class=\"string\">&quot;Лев Николаевич Толстой\\nАнна Каренина&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">300</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Drawing text&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">paintEvent</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">        qp = QPainter()</span><br><span class=\"line\">        qp.begin(self)</span><br><span class=\"line\">        self.drawText(event, qp)</span><br><span class=\"line\">        qp.end()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">drawText</span>(<span class=\"params\">self, event, qp</span>):</span><br><span class=\"line\">        qp.setPen(QColor(<span class=\"number\">168</span>, <span class=\"number\">34</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">        qp.setFont(QFont(<span class=\"string\">&#x27;Decorative&#x27;</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">        qp.drawText(event.rect(), Qt.Alignment.AlignCenter, self.text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例中，我们用西里尔文绘制了一些文本。这些文本水平和垂直均对齐。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">paintEvent</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>在绘制事件中完成绘画。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qp = QPainter()</span><br><span class=\"line\">qp.begin(self)</span><br><span class=\"line\">self.drawText(event, qp)</span><br><span class=\"line\">qp.end()</span><br></pre></td></tr></table></figure>\n\n<p><code>QPainter</code> 类负责所有低级别绘制。所有绘制方法都位于 <code>begin()</code> 和 <code>end()</code> 方法之间。实际的绘制被委托给 <code>drawText()</code> 方法。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qp.setPen(QColor(<span class=\"number\">168</span>, <span class=\"number\">34</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">qp.setFont(QFont(<span class=\"string\">&#x27;Decorative&#x27;</span>, <span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<p>此处我们定义用于绘制文本的笔和字体。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qp.drawText(event.rect(), Qt.Alignment.AlignCenter, self.text)</span><br></pre></td></tr></table></figure>\n\n<p><code>drawText()</code> 方法在窗口上绘制文本。绘制事件的 <code>rect()</code> 方法返回需要更新的矩形。我们使用 <code>Qt.Alignment.AlignCenter</code> 在两个维度上对齐文本。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/drawingtext.png?ezimgfmt=rs:282x195/rscb1/ng:webp/ngcb1\" alt=\"Drawing text\" loading=\"lazy\"><br>Figure: Drawing text</p>\n<h2 id=\"PyQt6-绘制点\"><a href=\"#PyQt6-绘制点\" class=\"headerlink\" title=\"PyQt6 绘制点\"></a>PyQt6 绘制点</h2><p>点是能被画出的最简单的图形对象。它是窗口上的一个小斑点。</p>\n<figure class=\"highlight py\"><figcaption><span>draw_points.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In the example, we draw randomly 1000 red points</span></span><br><span class=\"line\"><span class=\"string\">on the window.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QPainter</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.setMinimumSize(<span class=\"number\">50</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">300</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Points&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">paintEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        qp = QPainter()</span><br><span class=\"line\">        qp.begin(self)</span><br><span class=\"line\">        self.drawPoints(qp)</span><br><span class=\"line\">        qp.end()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">drawPoints</span>(<span class=\"params\">self, qp</span>):</span><br><span class=\"line\">        qp.setPen(Qt.GlobalColor.red)</span><br><span class=\"line\">        size = self.size()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000</span>):</span><br><span class=\"line\">            x = random.randint(<span class=\"number\">1</span>, size.width() - <span class=\"number\">1</span>)</span><br><span class=\"line\">            y = random.randint(<span class=\"number\">1</span>, size.height() - <span class=\"number\">1</span>)</span><br><span class=\"line\">            qp.drawPoint(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>在本例中，我们在窗口的用户区随机绘制 1000 个红点。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qp.setPen(Qt.GlobalColor.red)</span><br></pre></td></tr></table></figure>\n\n<p>我们设置笔的颜色为红色。我们使用预定义的 <code>Qt.GlobalColor.red</code> 颜色常量。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">size = self.size()</span><br></pre></td></tr></table></figure>\n\n<p>每次我们重设窗口尺寸时，都会产生绘制事件。我们用 <code>size()</code> 方法获得当前窗口尺寸。我们基于窗口尺寸将点分布到整个窗口用户区。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qp.drawPoint(x, y)</span><br></pre></td></tr></table></figure>\n\n<p>我们用 <code>drawPoint()</code> 方法绘制点。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/points.png?ezimgfmt=rs:302x215/rscb1/ng:webp/ngcb1\" alt=\"Points\" loading=\"lazy\"><br>Figure: Points</p>\n<h2 id=\"PyQt6-颜色\"><a href=\"#PyQt6-颜色\" class=\"headerlink\" title=\"PyQt6 颜色\"></a>PyQt6 颜色</h2><p>颜色是一个代表红、绿、蓝（RGB）强度值组合的对象。有效的 RGB 值在 0 到 255 范围内。我们可以用多种方式定义颜色。最常见的是定义 RGB 的十进制值或十六进制值。我们还可以使用 RGBA 值，它代表红、绿、蓝和 Alpha 通道。此处我们添加些关于透明度的额外信息。Alphat 值是 255 时表示完全不透明，0 时表示完全透明。例如，该颜色是不可见的。</p>\n<figure class=\"highlight py\"><figcaption><span>colours.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example draws three rectangles in three</span></span><br><span class=\"line\"><span class=\"string\">different colours.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QPainter, QColor</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Colours&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">paintEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        qp = QPainter()</span><br><span class=\"line\">        qp.begin(self)</span><br><span class=\"line\">        self.drawRectangles(qp)</span><br><span class=\"line\">        qp.end()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">drawRectangles</span>(<span class=\"params\">self, qp</span>):</span><br><span class=\"line\">        col = QColor(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        col.setNamedColor(<span class=\"string\">&#x27;#d4d4d4&#x27;</span>)</span><br><span class=\"line\">        qp.setPen(col)</span><br><span class=\"line\"></span><br><span class=\"line\">        qp.setBrush(QColor(<span class=\"number\">200</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        qp.setBrush(QColor(<span class=\"number\">255</span>, <span class=\"number\">80</span>, <span class=\"number\">0</span>, <span class=\"number\">160</span>))</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">130</span>, <span class=\"number\">15</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        qp.setBrush(QColor(<span class=\"number\">25</span>, <span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">200</span>))</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">250</span>, <span class=\"number\">15</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例中，我们绘制三个彩色矩形。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">color = QColor(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">color.setNamedColor(<span class=\"string\">&#x27;#d4d4d4&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>此处我们使用十六进制表示法定义颜色。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qp.setBrush(QColor(<span class=\"number\">200</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">qp.drawRect(<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br></pre></td></tr></table></figure>\n\n<p>此处我们定义一个笔刷并绘制矩形。笔刷是一个基本的图形对象，用于绘制形状的背景。<code>drawRect()</code> 方法接收四个参数，前两个是轴上的 x 与 y 值。第三和第四个参数是矩形的宽和高。此方法使用当前笔和笔刷绘制矩形。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/colours.png?ezimgfmt=rs:352x125/rscb1/ng:webp/ngcb1\" alt=\"Colours\" loading=\"lazy\"><br>Figure: Colours</p>\n<h2 id=\"PyQt6-QPen-画笔\"><a href=\"#PyQt6-QPen-画笔\" class=\"headerlink\" title=\"PyQt6 QPen 画笔\"></a>PyQt6 QPen 画笔</h2><p><code>QPen</code> 是一个基础图形对象。它用于绘制直线、曲线，以及矩形、椭圆、多边形或其它形状的轮廓。</p>\n<figure class=\"highlight py\"><figcaption><span>pens.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example we draw 6 lines using</span></span><br><span class=\"line\"><span class=\"string\">different pen styles.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QPainter, QPen</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">280</span>, <span class=\"number\">270</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Pen styles&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">paintEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        qp = QPainter()</span><br><span class=\"line\">        qp.begin(self)</span><br><span class=\"line\">        self.drawLines(qp)</span><br><span class=\"line\">        qp.end()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">drawLines</span>(<span class=\"params\">self, qp</span>):</span><br><span class=\"line\">        pen = QPen(Qt.GlobalColor.black, <span class=\"number\">2</span>, Qt.PenStyle.SolidLine)</span><br><span class=\"line\"></span><br><span class=\"line\">        qp.setPen(pen)</span><br><span class=\"line\">        qp.drawLine(<span class=\"number\">20</span>, <span class=\"number\">40</span>, <span class=\"number\">250</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        pen.setStyle(Qt.PenStyle.DashLine)</span><br><span class=\"line\">        qp.setPen(pen)</span><br><span class=\"line\">        qp.drawLine(<span class=\"number\">20</span>, <span class=\"number\">80</span>, <span class=\"number\">250</span>, <span class=\"number\">80</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        pen.setStyle(Qt.PenStyle.DashDotLine)</span><br><span class=\"line\">        qp.setPen(pen)</span><br><span class=\"line\">        qp.drawLine(<span class=\"number\">20</span>, <span class=\"number\">120</span>, <span class=\"number\">250</span>, <span class=\"number\">120</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        pen.setStyle(Qt.PenStyle.DotLine)</span><br><span class=\"line\">        qp.setPen(pen)</span><br><span class=\"line\">        qp.drawLine(<span class=\"number\">20</span>, <span class=\"number\">160</span>, <span class=\"number\">250</span>, <span class=\"number\">160</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        pen.setStyle(Qt.PenStyle.DashDotDotLine)</span><br><span class=\"line\">        qp.setPen(pen)</span><br><span class=\"line\">        qp.drawLine(<span class=\"number\">20</span>, <span class=\"number\">200</span>, <span class=\"number\">250</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        pen.setStyle(Qt.PenStyle.CustomDashLine)</span><br><span class=\"line\">        pen.setDashPattern([<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\">        qp.setPen(pen)</span><br><span class=\"line\">        qp.drawLine(<span class=\"number\">20</span>, <span class=\"number\">240</span>, <span class=\"number\">250</span>, <span class=\"number\">240</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例中，我们绘制六条直线。这些线使用六种不同样式的笔绘制。有五种预设的笔样式。我们还可以创建自定义笔样式。最后一条线使用自定义笔样式绘制。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">pen = QPen(Qt.GlobalColor.black, <span class=\"number\">2</span>, Qt.PenStyle.SolidLine)</span><br></pre></td></tr></table></figure>\n\n<p>我们创建一个 <code>QPen</code> 对象。颜色为黑色。宽度设置为 2px 以便我们观察笔样式之间的差异。<code>Qt.SolidLine</code> 是一种预设的笔样式。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">pen.setStyle(Qt.PenStyle.CustomDashLine)</span><br><span class=\"line\">pen.setDashPattern([<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\">qp.setPen(pen)</span><br></pre></td></tr></table></figure>\n\n<p>此处我们自定义笔样式。我们使用 <code>Qt.PenStyleCustomDashLine</code> 笔样式，并调用 <code>setDashPattern()</code> 方法。列表中的数字定义了一种样式。必须有偶数个数字。奇数位定义短横，偶数位定义空间。数字越大，短横或空间就越大。我们的图案是 1px 的短横，接 4px 的空间，再接 5px 的短横，再接 4px 的空间。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/penstyles.png?ezimgfmt=rs:282x295/rscb1/ng:webp/ngcb1\" alt=\"Pen styles\" loading=\"lazy\"><br>Figure: Pen styles</p>\n<h2 id=\"PyQt6-QBrush-笔刷\"><a href=\"#PyQt6-QBrush-笔刷\" class=\"headerlink\" title=\"PyQt6 QBrush 笔刷\"></a>PyQt6 QBrush 笔刷</h2><p><code>QPrush</code> 是一种基础图形对象。它用于绘制图形形状（如矩形、椭圆或多边形）的背景。笔刷可以有三种类型：预定义笔刷、渐变或纹理。</p>\n<figure class=\"highlight py\"><figcaption><span>brushes.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example draws nine rectangles in different</span></span><br><span class=\"line\"><span class=\"string\">brush styles.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QPainter, QBrush</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">355</span>, <span class=\"number\">280</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Brushes&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">paintEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        qp = QPainter()</span><br><span class=\"line\">        qp.begin(self)</span><br><span class=\"line\">        self.drawBrushes(qp)</span><br><span class=\"line\">        qp.end()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">drawBrushes</span>(<span class=\"params\">self, qp</span>):</span><br><span class=\"line\">        brush = QBrush(Qt.BrushStyle.SolidPattern)</span><br><span class=\"line\">        qp.setBrush(brush)</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        brush.setStyle(Qt.BrushStyle.Dense1Pattern)</span><br><span class=\"line\">        qp.setBrush(brush)</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">130</span>, <span class=\"number\">15</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        brush.setStyle(Qt.BrushStyle.Dense2Pattern)</span><br><span class=\"line\">        qp.setBrush(brush)</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">250</span>, <span class=\"number\">15</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        brush.setStyle(Qt.BrushStyle.DiagCrossPattern)</span><br><span class=\"line\">        qp.setBrush(brush)</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">10</span>, <span class=\"number\">105</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        brush.setStyle(Qt.BrushStyle.Dense5Pattern)</span><br><span class=\"line\">        qp.setBrush(brush)</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">130</span>, <span class=\"number\">105</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        brush.setStyle(Qt.BrushStyle.Dense6Pattern)</span><br><span class=\"line\">        qp.setBrush(brush)</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">250</span>, <span class=\"number\">105</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        brush.setStyle(Qt.BrushStyle.HorPattern)</span><br><span class=\"line\">        qp.setBrush(brush)</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">10</span>, <span class=\"number\">195</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        brush.setStyle(Qt.BrushStyle.VerPattern)</span><br><span class=\"line\">        qp.setBrush(brush)</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">130</span>, <span class=\"number\">195</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        brush.setStyle(Qt.BrushStyle.BDiagPattern)</span><br><span class=\"line\">        qp.setBrush(brush)</span><br><span class=\"line\">        qp.drawRect(<span class=\"number\">250</span>, <span class=\"number\">195</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例中，我们绘制了 9 种不同的矩形。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">brush = QBrush(Qt.BrushStyle.SolidPattern)</span><br><span class=\"line\">qp.setBrush(brush)</span><br><span class=\"line\">qp.drawRect(<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们定义了一个笔刷对象。我们设置它为绘制器对象，并通过调用 <code>drawRect()</code> 方法绘制矩形。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/brushes.png?ezimgfmt=rs:357x305/rscb1/ng:webp/ngcb1\" alt=\"Brushes\" loading=\"lazy\"><br>Figure: Brushes</p>\n<h2 id=\"贝塞尔曲线\"><a href=\"#贝塞尔曲线\" class=\"headerlink\" title=\"贝塞尔曲线\"></a>贝塞尔曲线</h2><p>贝塞尔曲线是三次线。PyQt6 中的贝塞尔曲线可以由 <code>QPainterPath()</code> 创建。绘制器路径是由一些图形构件组成的对象，如矩形、椭圆、直线和曲线。</p>\n<figure class=\"highlight py\"><figcaption><span>bezier_curve.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program draws a Bézier curve with</span></span><br><span class=\"line\"><span class=\"string\">QPainterPath.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QPainter, QPainterPath</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">380</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Bézier curve&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">paintEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        qp = QPainter()</span><br><span class=\"line\">        qp.begin(self)</span><br><span class=\"line\">        qp.setRenderHint(QPainter.RenderHints.Antialiasing)</span><br><span class=\"line\">        self.drawBezierCurve(qp)</span><br><span class=\"line\">        qp.end()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">drawBezierCurve</span>(<span class=\"params\">self, qp</span>):</span><br><span class=\"line\">        path = QPainterPath()</span><br><span class=\"line\">        path.moveTo(<span class=\"number\">30</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">        path.cubicTo(<span class=\"number\">30</span>, <span class=\"number\">30</span>, <span class=\"number\">200</span>, <span class=\"number\">350</span>, <span class=\"number\">350</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        qp.drawPath(path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>此例绘制了一条贝塞尔曲线。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">path = QPainterPath()</span><br><span class=\"line\">path.moveTo(<span class=\"number\">30</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">path.cubicTo(<span class=\"number\">30</span>, <span class=\"number\">30</span>, <span class=\"number\">200</span>, <span class=\"number\">350</span>, <span class=\"number\">350</span>, <span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们根据 <code>QPainterPath</code> 路径创建贝一条贝塞尔曲线。曲线用 <code>cubicTo()</code> 方法创建，它需要三个点：起点、控制点、终点。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qp.drawPath(path)</span><br></pre></td></tr></table></figure>\n\n<p>最终通过 <code>drawPath()</code> 方法绘制路径。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/beziercurve.png?ezimgfmt=rs:382x275/rscb1/ng:webp/ngcb1\" alt=\"Bézier curve\" loading=\"lazy\"><br>Figure: Bézier curve</p>\n<p>在 PyQt6 教程的这一部分，我们进行了一些基本的绘制。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9wYWludGluZy8=\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/dragdrop\">上一章</a> <a href=\"/translation/zt-pyqt6/customwidgets\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/menustoolbars.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9tZW51c3Rvb2xiYXJzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/firstprograms\">上一章</a> <a href=\"/translation/zt-pyqt6/layout\">下一章</a></p>\n<h1 id=\"PyQt6-菜单与工具栏\"><a href=\"#PyQt6-菜单与工具栏\" class=\"headerlink\" title=\"PyQt6 菜单与工具栏\"></a>PyQt6 菜单与工具栏</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-23</em></p>\n</blockquote>\n<p>在 PyQt6 教程的这一部分，我们将创建状态栏、菜单栏和工具栏。菜单是位于菜单栏中的一组命令。工具栏包含一些按钮，它们具有应用程序的常用命令。状态栏显示状态信息，通常位于窗口底部。</p>\n<h2 id=\"PyQt6-QMainWindow\"><a href=\"#PyQt6-QMainWindow\" class=\"headerlink\" title=\"PyQt6 QMainWindow\"></a>PyQt6 QMainWindow</h2><p><code>QMainWindow</code> 类提供一个主应用程序窗口。可以据此创建一个带有状态栏、工具栏和菜单栏的经典应用程序窗口。</p>\n<h2 id=\"PyQt6-状态栏\"><a href=\"#PyQt6-状态栏\" class=\"headerlink\" title=\"PyQt6 状态栏\"></a>PyQt6 状态栏</h2><p>状态栏是用于显示状态信息的小部件。</p>\n<figure class=\"highlight py\"><figcaption><span>statusbar.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program creates a statusbar.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QMainWindow, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.statusBar().showMessage(<span class=\"string\">&#x27;Ready&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Statusbar&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>状态栏在 <code>QMainWindow</code> 小部件的帮助下得以创建。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.statusBar().showMessage(<span class=\"string\">&#x27;Ready&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>为了得到状态栏，我们调用<code>QMainWindow</code> 类提供的 <code>statusBar()</code> 方法。第一次调用方法创建状态栏。后续调用返回状态栏对象。<code>showMessage()</code> 方法可在状态栏上显示一条消息。</p>\n<h2 id=\"PyQt6-简易菜单\"><a href=\"#PyQt6-简易菜单\" class=\"headerlink\" title=\"PyQt6 简易菜单\"></a>PyQt6 简易菜单</h2><p>菜单栏是 GUI 应用程序的常见部分。它是位于各种菜单中的一组命令（MacOS 对菜单栏的处理方式不同寻常。要获取相似的结果，可添加以下代码：<code>menubar.setNativeMenuBar(False)</code>）。</p>\n<figure class=\"highlight py\"><figcaption><span>simple_menu.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program creates a menubar. The</span></span><br><span class=\"line\"><span class=\"string\">menubar has one menu with an exit action.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QMainWindow, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QIcon, QAction</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        exitAct = QAction(QIcon(<span class=\"string\">&#x27;exit.png&#x27;</span>), <span class=\"string\">&#x27;&amp;Exit&#x27;</span>, self)</span><br><span class=\"line\">        exitAct.setShortcut(<span class=\"string\">&#x27;Ctrl+Q&#x27;</span>)</span><br><span class=\"line\">        exitAct.setStatusTip(<span class=\"string\">&#x27;Exit application&#x27;</span>)</span><br><span class=\"line\">        exitAct.triggered.connect(QApplication.instance().quit)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.statusBar()</span><br><span class=\"line\"></span><br><span class=\"line\">        menubar = self.menuBar()</span><br><span class=\"line\">        fileMenu = menubar.addMenu(<span class=\"string\">&#x27;&amp;File&#x27;</span>)</span><br><span class=\"line\">        fileMenu.addAction(exitAct)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Simple menu&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们创建了一个只含一个菜单的菜单栏。此菜单包含一个动作，若被选中，则终止应用程序。同时还创建了一个状态栏。这个动作还可以通过<kbd>Ctrl+Q</kbd> 快捷键访问。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">exitAct = QAction(QIcon(<span class=\"string\">&#x27;exit.png&#x27;</span>), <span class=\"string\">&#x27;&amp;Exit&#x27;</span>, self)</span><br><span class=\"line\">exitAct.setShortcut(<span class=\"string\">&#x27;Ctrl+Q&#x27;</span>)</span><br><span class=\"line\">exitAct.setStatusTip(<span class=\"string\">&#x27;Exit application&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>QAction</code> 是对菜单栏、工具栏或自定义快捷键所执行动作的抽象。在上面三行代码中，我们创建了一个带有特定图标和 <code>Exit</code> 标签的动作。此外，还为它定义了一个快捷键。第三行创建了一个状态提示，当鼠标指针悬停在该菜单项上时，提示将显示在状态栏中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">exitAct.triggered.connect(QApplication.instance().quit)</span><br></pre></td></tr></table></figure>\n\n<p>当我们选中这个特定动作时，会触发一个 <code>triggered</code> 信号。此信息已经连接到了 <code>QApplication</code> 小部件的 <code>quit()</code> 方法。它将终止应用程序。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">menubar = self.menuBar()</span><br><span class=\"line\">fileMenu = menubar.addMenu(<span class=\"string\">&#x27;&amp;File&#x27;</span>)</span><br><span class=\"line\">fileMenu.addAction(exitAction)</span><br></pre></td></tr></table></figure>\n\n<p><code>menuBar()</code> 方法用于创建菜单栏。我们使用 <code>addMenu()</code> 方法创建了一个文件菜单，并使用 <code>addAction()</code> 方法添加动作。</p>\n<h2 id=\"PyQt6-子菜单\"><a href=\"#PyQt6-子菜单\" class=\"headerlink\" title=\"PyQt6 子菜单\"></a>PyQt6 子菜单</h2><p>子菜单是位于其它菜单内的菜单。</p>\n<figure class=\"highlight py\"><figcaption><span>submenu.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program creates a submenu.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QMainWindow, QMenu, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QAction</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        menubar = self.menuBar()</span><br><span class=\"line\">        fileMenu = menubar.addMenu(<span class=\"string\">&#x27;File&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        impMenu = QMenu(<span class=\"string\">&#x27;Import&#x27;</span>, self)</span><br><span class=\"line\">        impAct = QAction(<span class=\"string\">&#x27;Import mail&#x27;</span>, self)</span><br><span class=\"line\">        impMenu.addAction(impAct)</span><br><span class=\"line\"></span><br><span class=\"line\">        newAct = QAction(<span class=\"string\">&#x27;New&#x27;</span>, self)</span><br><span class=\"line\"></span><br><span class=\"line\">        fileMenu.addAction(newAct)</span><br><span class=\"line\">        fileMenu.addMenu(impMenu)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Submenu&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例中，我们有两个菜单项，一个位于文件菜单中，另一个位于导入文件子菜单中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">impMenu = QMenu(<span class=\"string\">&#x27;Import&#x27;</span>, self)</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>QMenu</code> 创建了一个新菜单。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">impAct = QAction(<span class=\"string\">&#x27;Import mail&#x27;</span>, self)</span><br><span class=\"line\">impMenu.addAction(impAct)</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>addAction()</code> 方法将动作添加到子菜单中。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/submenu.png?ezimgfmt=rs:302x225/rscb1/ng:webp/ngcb1\" alt=\"Submenu\" loading=\"lazy\"><br>Figure: Submenu</p>\n<h2 id=\"PyQt6-复选菜单\"><a href=\"#PyQt6-复选菜单\" class=\"headerlink\" title=\"PyQt6 复选菜单\"></a>PyQt6 复选菜单</h2><p>在下例中，我们创建一个菜单，可以被选中或取消选中。</p>\n<figure class=\"highlight py\"><figcaption><span>check_menu.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program creates a checkable menu.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QMainWindow, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QAction</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.statusbar = self.statusBar()</span><br><span class=\"line\">        self.statusbar.showMessage(<span class=\"string\">&#x27;Ready&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        menubar = self.menuBar()</span><br><span class=\"line\">        viewMenu = menubar.addMenu(<span class=\"string\">&#x27;View&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        viewStatAct = QAction(<span class=\"string\">&#x27;View statusbar&#x27;</span>, self, checkable=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        viewStatAct.setStatusTip(<span class=\"string\">&#x27;View statusbar&#x27;</span>)</span><br><span class=\"line\">        viewStatAct.setChecked(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        viewStatAct.triggered.connect(self.toggleMenu)</span><br><span class=\"line\"></span><br><span class=\"line\">        viewMenu.addAction(viewStatAct)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Check menu&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">toggleMenu</span>(<span class=\"params\">self, state</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> state:</span><br><span class=\"line\">            self.statusbar.show()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.statusbar.hide()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>代码示例创建了一个视图菜单，内含一个动作。该动作显示或隐藏状态栏。当状态栏可见时，该菜单项是选中状态。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">viewStatAct = QAction(<span class=\"string\">&#x27;View statusbar&#x27;</span>, self, checkable=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>checkable</code> 选项创建一个复选菜单。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">viewStatAct.setChecked(<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>因为状态栏一开始就可见，所以我们应使用 <code>setChecked()</code> 方法选中菜单项。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">toggleMenu</span>(<span class=\"params\">self, state</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> state:</span><br><span class=\"line\">        self.statusbar.show()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        self.statusbar.hide()</span><br></pre></td></tr></table></figure>\n\n<p>根据动作的状态，我们显示或隐藏状态栏。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/checkmenu.png?ezimgfmt=rs:302x225/rscb1/ng:webp/ngcb1\" alt=\"Check menu\" loading=\"lazy\"><br>Figure: Check menu</p>\n<h2 id=\"PyQt6-上下文菜单\"><a href=\"#PyQt6-上下文菜单\" class=\"headerlink\" title=\"PyQt6 上下文菜单\"></a>PyQt6 上下文菜单</h2><p>上下文菜单，也称为弹出式菜单，是在某些上下文环境中会出现的命令列表。例如，在 Opera 浏览器中，当我们右击网页时，我们会得到一个上下文菜单。在这里，我们可以重新加载页面、返回或查看页面源代码。如果右击工具栏，我们又会得到另一个用于管理工具栏的上下文菜单。</p>\n<figure class=\"highlight py\"><figcaption><span>context_menu.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program creates a context menu.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QMainWindow, QMenu, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Context menu&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">contextMenuEvent</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">        cmenu = QMenu(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        newAct = cmenu.addAction(<span class=\"string\">&quot;New&quot;</span>)</span><br><span class=\"line\">        openAct = cmenu.addAction(<span class=\"string\">&quot;Open&quot;</span>)</span><br><span class=\"line\">        quitAct = cmenu.addAction(<span class=\"string\">&quot;Quit&quot;</span>)</span><br><span class=\"line\">        action = cmenu.<span class=\"built_in\">exec</span>(self.mapToGlobal(event.pos()))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> action == quitAct:</span><br><span class=\"line\">            QApplication.instance().quit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>要使用上下文菜单，我们必须重新实现 <code>contextMenuEvent()</code> 方法。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">action = cmenu.<span class=\"built_in\">exec</span>(self.mapToGlobal(event.pos()))</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>exec()</code> 方法显示上下文菜单。使用 <code>pos()</code> 方法从事件对象获得鼠标指针坐标。使用 <code>mapToGlobal()</code> 方法将小部件坐标转换为全局屏幕坐标。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> action == quitAct:</span><br><span class=\"line\">    QApplication.instance().quit()</span><br></pre></td></tr></table></figure>\n\n<p>如果从上下文菜单返回的动作等于退出动作，则终止应用程序。</p>\n<h2 id=\"PyQt6-工具栏\"><a href=\"#PyQt6-工具栏\" class=\"headerlink\" title=\"PyQt6 工具栏\"></a>PyQt6 工具栏</h2><p>菜单将应用程序中可使用的所有命令分组。工具栏则提供对最常用命令的快速访问。</p>\n<figure class=\"highlight py\"><figcaption><span>toolbar.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program creates a toolbar.</span></span><br><span class=\"line\"><span class=\"string\">The toolbar has one action, which</span></span><br><span class=\"line\"><span class=\"string\">terminates the application, if triggered.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QMainWindow, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QIcon, QAction</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        exitAct = QAction(QIcon(<span class=\"string\">&#x27;exit24.png&#x27;</span>), <span class=\"string\">&#x27;Exit&#x27;</span>, self)</span><br><span class=\"line\">        exitAct.setShortcut(<span class=\"string\">&#x27;Ctrl+Q&#x27;</span>)</span><br><span class=\"line\">        exitAct.triggered.connect(QApplication.instance().quit)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.toolbar = self.addToolBar(<span class=\"string\">&#x27;Exit&#x27;</span>)</span><br><span class=\"line\">        self.toolbar.addAction(exitAct)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Toolbar&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>在上例中，我们创建了一个简单的工具栏。该工具栏有一个工具性动作，即当触发时终止应用程序的退出动作。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">exitAct = QAction(QIcon(<span class=\"string\">&#x27;exit24.png&#x27;</span>), <span class=\"string\">&#x27;Exit&#x27;</span>, self)</span><br><span class=\"line\">exitAct.setShortcut(<span class=\"string\">&#x27;Ctrl+Q&#x27;</span>)</span><br><span class=\"line\">exitAct.triggered.connect(QApplication.instance().quit)</span><br></pre></td></tr></table></figure>\n\n<p>与上面的菜单栏示例类似，我们创建一个动作对象。该对象具有标签、图标和快捷键。并将 <code>QApplication</code> 的 <code>quit()</code> 方法关联到 <code>triggered</code> 信号上。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.toolbar = self.addToolBar(<span class=\"string\">&#x27;Exit&#x27;</span>)</span><br><span class=\"line\">self.toolbar.addAction(exitAction)</span><br></pre></td></tr></table></figure>\n\n<p>工具栏是用 <code>addToolBar()</code> 方法创建的。我们使用 <code>addAction()</code> 方法向工具栏添加动作对象。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/toolbar.png?ezimgfmt=rs:302x226/rscb1/ng:webp/ngcb1\" alt=\"Toolbar\" loading=\"lazy\"><br>Figure: Toolbar</p>\n<h2 id=\"PyQt6-主窗口\"><a href=\"#PyQt6-主窗口\" class=\"headerlink\" title=\"PyQt6 主窗口\"></a>PyQt6 主窗口</h2><p>在本部分最后一个示例中，我们创建一个菜单栏、工具栏和状态栏。我们还创建了一个中心小部件。</p>\n<figure class=\"highlight py\"><figcaption><span>main_window.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program creates a skeleton of</span></span><br><span class=\"line\"><span class=\"string\">a classic GUI application with a menubar,</span></span><br><span class=\"line\"><span class=\"string\">toolbar, statusbar, and a central widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QMainWindow, QTextEdit, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QIcon, QAction</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        textEdit = QTextEdit()</span><br><span class=\"line\">        self.setCentralWidget(textEdit)</span><br><span class=\"line\"></span><br><span class=\"line\">        exitAct = QAction(QIcon(<span class=\"string\">&#x27;exit24.png&#x27;</span>), <span class=\"string\">&#x27;Exit&#x27;</span>, self)</span><br><span class=\"line\">        exitAct.setShortcut(<span class=\"string\">&#x27;Ctrl+Q&#x27;</span>)</span><br><span class=\"line\">        exitAct.setStatusTip(<span class=\"string\">&#x27;Exit application&#x27;</span>)</span><br><span class=\"line\">        exitAct.triggered.connect(self.close)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.statusBar()</span><br><span class=\"line\"></span><br><span class=\"line\">        menubar = self.menuBar()</span><br><span class=\"line\">        fileMenu = menubar.addMenu(<span class=\"string\">&#x27;&amp;File&#x27;</span>)</span><br><span class=\"line\">        fileMenu.addAction(exitAct)</span><br><span class=\"line\"></span><br><span class=\"line\">        toolbar = self.addToolBar(<span class=\"string\">&#x27;Exit&#x27;</span>)</span><br><span class=\"line\">        toolbar.addAction(exitAct)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Main window&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>代码示例创建了一个带有菜单栏、工具栏和状态栏的经典 GUI 用户程序的骨架。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">textEdit = QTextEdit()</span><br><span class=\"line\">self.setCentralWidget(textEdit)</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们创建了一个文本小部件。我们将它设置为 <code>QMainWindow</code> 的中心小部件。中心小部件将占用所有剩余空间。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/mainwindow.png?ezimgfmt=rs:432x353/rscb1/ng:webp/ngcb1\" alt=\"Main window\" loading=\"lazy\"><br>Figure: Main window</p>\n<p>在 PyQt6 教程的这一部分中，我们使用了菜单、工具栏、状态栏和主应用程序窗口。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni9tZW51c3Rvb2xiYXJzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/firstprograms\">上一章</a> <a href=\"/translation/zt-pyqt6/layout\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/tetris.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni90ZXRyaXMv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/customwidgets\">上一章</a></p>\n<h1 id=\"PyQt6-俄罗斯方块\"><a href=\"#PyQt6-俄罗斯方块\" class=\"headerlink\" title=\"PyQt6 俄罗斯方块\"></a>PyQt6 俄罗斯方块</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-29</em></p>\n</blockquote>\n<p>在本章中，我们创建一个俄罗斯方块游戏副本。</p>\n<h2 id=\"俄罗斯方块\"><a href=\"#俄罗斯方块\" class=\"headerlink\" title=\"俄罗斯方块\"></a>俄罗斯方块</h2><p>俄罗斯方块是有史以来最流行的电脑游戏之一。原始游戏由俄罗斯程序员 <em>Alexy Pajitonv</em> 于 1985 年设计并编写。自那时起，俄罗斯方块便开始以各种形式出现在几乎所有平台上。</p>\n<p>俄罗斯方块被称为下落方块益智游戏。在游戏中，我们有 7 种被称为四连方块的不同形状：S 形、Z 形、T 形、L 形、线形、反 L 形和方形。每种形状都由四个方块组成。形状在棋盘上落下。俄罗斯方块的游戏目标是移动并旋转形状，使它们尽可能相互适合。如果我们设法组成了一整行，这行将被破坏，我们将得分。俄罗斯方块可以一直玩，直到堆满顶层。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/tetrominoes.png?ezimgfmt=rs:328x132/rscb1/ngcb1/notWebP\" alt=\"Tetrominoes\" loading=\"lazy\"><br>Figure: Tetrominoes</p>\n<p>PyQt6 是设计用于创建应用程序的工具包。有一些其它库是用于创建电脑游戏的。然而，PyQt6 和其它应用程序工具包也可以用于创建简单的游戏。</p>\n<p>制作电脑游戏是增进编程技能的好方法。</p>\n<h2 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h2><p>我们没有为俄罗斯方块准备图像，我们用 PyQt6 编程工具包中提供的绘图 API 来绘制四连方块。每个计算机游戏的背后都有一个数学模型。俄罗斯方块亦然。</p>\n<p>这是游戏背后的一些创意：</p>\n<ul>\n<li>我们用 <code>QtCore.QBasicTimer</code> 来创建游戏循环；</li>\n<li>四连方块是绘制出来的；</li>\n<li>形状以正方形为单位移动（而不是像素）。</li>\n<li>从数学上讲，棋盘是一个简单的数列。</li>\n</ul>\n<p>代码由四个类组成：<code>Teris</code>、<code>Board</code>、<code>Terominoe</code> 和 <code>Shape</code>。<code>Teris</code> 类设立了游戏。<code>Borad</code> 类是编写游戏逻辑的地方。<code>Terominoe</code> 类包含所有俄罗斯方块的名称。<code>Shape</code> 类包含俄罗斯方块的代码。</p>\n<figure class=\"highlight py\"><figcaption><span>tetris.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This is a Tetris game clone.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt, QBasicTimer, pyqtSignal</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QPainter, QColor</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QMainWindow, QFrame, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tetris</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;initiates application UI&quot;&quot;&quot;</span></span><br><span class=\"line\">        self.tboard = Board(self)</span><br><span class=\"line\">        self.setCentralWidget(self.tboard)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.statusbar = self.statusBar()</span><br><span class=\"line\">        self.tboard.msg2Statusbar[<span class=\"built_in\">str</span>].connect(self.statusbar.showMessage)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.tboard.start()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.resize(<span class=\"number\">180</span>, <span class=\"number\">380</span>)</span><br><span class=\"line\">        self.center()</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Tetris&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">center</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;centers the window on the screen&quot;&quot;&quot;</span></span><br><span class=\"line\">        qr = self.frameGeometry()</span><br><span class=\"line\">        cp = self.screen().availableGeometry().center()</span><br><span class=\"line\"></span><br><span class=\"line\">        qr.moveCenter(cp)</span><br><span class=\"line\">        self.move(qr.topLeft())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Board</span>(<span class=\"title class_ inherited__\">QFrame</span>):</span><br><span class=\"line\">    msg2Statusbar = pyqtSignal(<span class=\"built_in\">str</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    BoardWidth = <span class=\"number\">10</span></span><br><span class=\"line\">    BoardHeight = <span class=\"number\">22</span></span><br><span class=\"line\">    Speed = <span class=\"number\">300</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, parent</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(parent)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initBoard()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initBoard</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;initiates board&quot;&quot;&quot;</span></span><br><span class=\"line\">        self.timer = QBasicTimer()</span><br><span class=\"line\">        self.isWaitingAfterLine = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.curX = <span class=\"number\">0</span></span><br><span class=\"line\">        self.curY = <span class=\"number\">0</span></span><br><span class=\"line\">        self.numLinesRemoved = <span class=\"number\">0</span></span><br><span class=\"line\">        self.board = []</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setFocusPolicy(Qt.FocusPolicy.StrongFocus)</span><br><span class=\"line\">        self.isStarted = <span class=\"literal\">False</span></span><br><span class=\"line\">        self.isPaused = <span class=\"literal\">False</span></span><br><span class=\"line\">        self.clearBoard()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">shapeAt</span>(<span class=\"params\">self, x, y</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;determines shape at the board position&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.board[(y * Board.BoardWidth) + x]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setShapeAt</span>(<span class=\"params\">self, x, y, shape</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;sets a shape at the board&quot;&quot;&quot;</span></span><br><span class=\"line\">        self.board[(y * Board.BoardWidth) + x] = shape</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">squareWidth</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;returns the width of one square&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.contentsRect().width() // Board.BoardWidth</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">squareHeight</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;returns the height of one square&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.contentsRect().height() // Board.BoardHeight</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">start</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;starts game&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.isPaused:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.isStarted = <span class=\"literal\">True</span></span><br><span class=\"line\">        self.isWaitingAfterLine = <span class=\"literal\">False</span></span><br><span class=\"line\">        self.numLinesRemoved = <span class=\"number\">0</span></span><br><span class=\"line\">        self.clearBoard()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.msg2Statusbar.emit(<span class=\"built_in\">str</span>(self.numLinesRemoved))</span><br><span class=\"line\"></span><br><span class=\"line\">        self.newPiece()</span><br><span class=\"line\">        self.timer.start(Board.Speed, self)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pause</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;pauses game&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.isStarted:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.isPaused = <span class=\"keyword\">not</span> self.isPaused</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.isPaused:</span><br><span class=\"line\">            self.timer.stop()</span><br><span class=\"line\">            self.msg2Statusbar.emit(<span class=\"string\">&quot;paused&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.timer.start(Board.Speed, self)</span><br><span class=\"line\">            self.msg2Statusbar.emit(<span class=\"built_in\">str</span>(self.numLinesRemoved))</span><br><span class=\"line\"></span><br><span class=\"line\">        self.update()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">paintEvent</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;paints all shapes of the game&quot;&quot;&quot;</span></span><br><span class=\"line\">        painter = QPainter(self)</span><br><span class=\"line\">        rect = self.contentsRect()</span><br><span class=\"line\"></span><br><span class=\"line\">        boardTop = rect.bottom() - Board.BoardHeight * self.squareHeight()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardHeight):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardWidth):</span><br><span class=\"line\">                shape = self.shapeAt(j, Board.BoardHeight - i - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> shape != Tetrominoe.NoShape:</span><br><span class=\"line\">                    self.drawSquare(painter,</span><br><span class=\"line\">                                    rect.left() + j * self.squareWidth(),</span><br><span class=\"line\">                                    boardTop + i * self.squareHeight(), shape)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.curPiece.shape() != Tetrominoe.NoShape:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">                x = self.curX + self.curPiece.x(i)</span><br><span class=\"line\">                y = self.curY - self.curPiece.y(i)</span><br><span class=\"line\">                self.drawSquare(painter, rect.left() + x * self.squareWidth(),</span><br><span class=\"line\">                            boardTop + (Board.BoardHeight - y - <span class=\"number\">1</span>) * self.squareHeight(),</span><br><span class=\"line\">                            self.curPiece.shape())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">keyPressEvent</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;processes key press events&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.isStarted <span class=\"keyword\">or</span> self.curPiece.shape() == Tetrominoe.NoShape:</span><br><span class=\"line\">            <span class=\"built_in\">super</span>(Board, self).keyPressEvent(event)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        key = event.key()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == Qt.Key.Key_P:</span><br><span class=\"line\">            self.pause()</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.isPaused:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> key == Qt.Key.Key_Left.value:</span><br><span class=\"line\">            self.tryMove(self.curPiece, self.curX - <span class=\"number\">1</span>, self.curY)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> key == Qt.Key.Key_Right.value:</span><br><span class=\"line\">            self.tryMove(self.curPiece, self.curX + <span class=\"number\">1</span>, self.curY)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> key == Qt.Key.Key_Down.value:</span><br><span class=\"line\">            self.tryMove(self.curPiece.rotateRight(), self.curX, self.curY)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> key == Qt.Key.Key_Up.value:</span><br><span class=\"line\">            self.tryMove(self.curPiece.rotateLeft(), self.curX, self.curY)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> key == Qt.Key.Key_Space.value:</span><br><span class=\"line\">            self.dropDown()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> key == Qt.Key.Key_D.value:</span><br><span class=\"line\">            self.oneLineDown()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">super</span>(Board, self).keyPressEvent(event)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">timerEvent</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;handles timer event&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.timerId() == self.timer.timerId():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.isWaitingAfterLine:</span><br><span class=\"line\">                self.isWaitingAfterLine = <span class=\"literal\">False</span></span><br><span class=\"line\">                self.newPiece()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.oneLineDown()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">super</span>(Board, self).timerEvent(event)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">clearBoard</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;clears shapes from the board&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardHeight * Board.BoardWidth):</span><br><span class=\"line\">            self.board.append(Tetrominoe.NoShape)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">dropDown</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;drops down a shape&quot;&quot;&quot;</span></span><br><span class=\"line\">        newY = self.curY</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> newY &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.tryMove(self.curPiece, self.curX, newY - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">            newY -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.pieceDropped()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">oneLineDown</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;goes one line down with a shape&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.tryMove(self.curPiece, self.curX, self.curY - <span class=\"number\">1</span>):</span><br><span class=\"line\">            self.pieceDropped()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pieceDropped</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;after dropping shape, remove full lines and create new shape&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">            x = self.curX + self.curPiece.x(i)</span><br><span class=\"line\">            y = self.curY - self.curPiece.y(i)</span><br><span class=\"line\">            self.setShapeAt(x, y, self.curPiece.shape())</span><br><span class=\"line\"></span><br><span class=\"line\">        self.removeFullLines()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.isWaitingAfterLine:</span><br><span class=\"line\">            self.newPiece()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">removeFullLines</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;removes all full lines from the board&quot;&quot;&quot;</span></span><br><span class=\"line\">        numFullLines = <span class=\"number\">0</span></span><br><span class=\"line\">        rowsToRemove = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardHeight):</span><br><span class=\"line\">            n = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardWidth):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.shapeAt(j, i) == Tetrominoe.NoShape:</span><br><span class=\"line\">                    n = n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> n == <span class=\"number\">10</span>:</span><br><span class=\"line\">                rowsToRemove.append(i)</span><br><span class=\"line\"></span><br><span class=\"line\">        rowsToRemove.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> rowsToRemove:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m, Board.BoardHeight):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardWidth):</span><br><span class=\"line\">                    self.setShapeAt(l, k, self.shapeAt(l, k + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        numFullLines = numFullLines + <span class=\"built_in\">len</span>(rowsToRemove)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> numFullLines &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.numLinesRemoved = self.numLinesRemoved + numFullLines</span><br><span class=\"line\">            self.msg2Statusbar.emit(<span class=\"built_in\">str</span>(self.numLinesRemoved))</span><br><span class=\"line\"></span><br><span class=\"line\">            self.isWaitingAfterLine = <span class=\"literal\">True</span></span><br><span class=\"line\">            self.curPiece.setShape(Tetrominoe.NoShape)</span><br><span class=\"line\">            self.update()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">newPiece</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;creates a new shape&quot;&quot;&quot;</span></span><br><span class=\"line\">        self.curPiece = Shape()</span><br><span class=\"line\">        self.curPiece.setRandomShape()</span><br><span class=\"line\">        self.curX = Board.BoardWidth // <span class=\"number\">2</span> + <span class=\"number\">1</span></span><br><span class=\"line\">        self.curY = Board.BoardHeight - <span class=\"number\">1</span> + self.curPiece.minY()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.tryMove(self.curPiece, self.curX, self.curY):</span><br><span class=\"line\">            self.curPiece.setShape(Tetrominoe.NoShape)</span><br><span class=\"line\">            self.timer.stop()</span><br><span class=\"line\">            self.isStarted = <span class=\"literal\">False</span></span><br><span class=\"line\">            self.msg2Statusbar.emit(<span class=\"string\">&quot;Game over&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">tryMove</span>(<span class=\"params\">self, newPiece, newX, newY</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;tries to move a shape&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">            x = newX + newPiece.x(i)</span><br><span class=\"line\">            y = newY - newPiece.y(i)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> x &gt;= Board.BoardWidth <span class=\"keyword\">or</span> y &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> y &gt;= Board.BoardHeight:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.shapeAt(x, y) != Tetrominoe.NoShape:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.curPiece = newPiece</span><br><span class=\"line\">        self.curX = newX</span><br><span class=\"line\">        self.curY = newY</span><br><span class=\"line\">        self.update()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">drawSquare</span>(<span class=\"params\">self, painter, x, y, shape</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;draws a square of a shape&quot;&quot;&quot;</span></span><br><span class=\"line\">        colorTable = [<span class=\"number\">0x000000</span>, <span class=\"number\">0xCC6666</span>, <span class=\"number\">0x66CC66</span>, <span class=\"number\">0x6666CC</span>,</span><br><span class=\"line\">                      <span class=\"number\">0xCCCC66</span>, <span class=\"number\">0xCC66CC</span>, <span class=\"number\">0x66CCCC</span>, <span class=\"number\">0xDAAA00</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        color = QColor(colorTable[shape])</span><br><span class=\"line\">        painter.fillRect(x + <span class=\"number\">1</span>, y + <span class=\"number\">1</span>, self.squareWidth() - <span class=\"number\">2</span>,</span><br><span class=\"line\">                         self.squareHeight() - <span class=\"number\">2</span>, color)</span><br><span class=\"line\"></span><br><span class=\"line\">        painter.setPen(color.lighter())</span><br><span class=\"line\">        painter.drawLine(x, y + self.squareHeight() - <span class=\"number\">1</span>, x, y)</span><br><span class=\"line\">        painter.drawLine(x, y, x + self.squareWidth() - <span class=\"number\">1</span>, y)</span><br><span class=\"line\"></span><br><span class=\"line\">        painter.setPen(color.darker())</span><br><span class=\"line\">        painter.drawLine(x + <span class=\"number\">1</span>, y + self.squareHeight() - <span class=\"number\">1</span>,</span><br><span class=\"line\">                         x + self.squareWidth() - <span class=\"number\">1</span>, y + self.squareHeight() - <span class=\"number\">1</span>)</span><br><span class=\"line\">        painter.drawLine(x + self.squareWidth() - <span class=\"number\">1</span>,</span><br><span class=\"line\">                         y + self.squareHeight() - <span class=\"number\">1</span>, x + self.squareWidth() - <span class=\"number\">1</span>, y + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tetrominoe</span>:</span><br><span class=\"line\">    NoShape = <span class=\"number\">0</span></span><br><span class=\"line\">    ZShape = <span class=\"number\">1</span></span><br><span class=\"line\">    SShape = <span class=\"number\">2</span></span><br><span class=\"line\">    LineShape = <span class=\"number\">3</span></span><br><span class=\"line\">    TShape = <span class=\"number\">4</span></span><br><span class=\"line\">    SquareShape = <span class=\"number\">5</span></span><br><span class=\"line\">    LShape = <span class=\"number\">6</span></span><br><span class=\"line\">    MirroredLShape = <span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span>:</span><br><span class=\"line\">    coordsTable = (</span><br><span class=\"line\">        ((<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>)),</span><br><span class=\"line\">        ((<span class=\"number\">0</span>, -<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (-<span class=\"number\">1</span>, <span class=\"number\">0</span>), (-<span class=\"number\">1</span>, <span class=\"number\">1</span>)),</span><br><span class=\"line\">        ((<span class=\"number\">0</span>, -<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">1</span>, <span class=\"number\">1</span>)),</span><br><span class=\"line\">        ((<span class=\"number\">0</span>, -<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">2</span>)),</span><br><span class=\"line\">        ((-<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>)),</span><br><span class=\"line\">        ((<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">1</span>, <span class=\"number\">1</span>)),</span><br><span class=\"line\">        ((-<span class=\"number\">1</span>, -<span class=\"number\">1</span>), (<span class=\"number\">0</span>, -<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>)),</span><br><span class=\"line\">        ((<span class=\"number\">1</span>, -<span class=\"number\">1</span>), (<span class=\"number\">0</span>, -<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.coords = [[<span class=\"number\">0</span>, <span class=\"number\">0</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>)]</span><br><span class=\"line\">        self.pieceShape = Tetrominoe.NoShape</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setShape(Tetrominoe.NoShape)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">shape</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;returns shape&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.pieceShape</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setShape</span>(<span class=\"params\">self, shape</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;sets a shape&quot;&quot;&quot;</span></span><br><span class=\"line\">        table = Shape.coordsTable[shape]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">                self.coords[i][j] = table[i][j]</span><br><span class=\"line\"></span><br><span class=\"line\">        self.pieceShape = shape</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setRandomShape</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;chooses a random shape&quot;&quot;&quot;</span></span><br><span class=\"line\">        self.setShape(random.randint(<span class=\"number\">1</span>, <span class=\"number\">7</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">x</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;returns x coordinate&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.coords[index][<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">y</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;returns y coordinate&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.coords[index][<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setX</span>(<span class=\"params\">self, index, x</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;sets x coordinate&quot;&quot;&quot;</span></span><br><span class=\"line\">        self.coords[index][<span class=\"number\">0</span>] = x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setY</span>(<span class=\"params\">self, index, y</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;sets y coordinate&quot;&quot;&quot;</span></span><br><span class=\"line\">        self.coords[index][<span class=\"number\">1</span>] = y</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minX</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;returns min x value&quot;&quot;&quot;</span></span><br><span class=\"line\">        m = self.coords[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">            m = <span class=\"built_in\">min</span>(m, self.coords[i][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> m</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxX</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;returns max x value&quot;&quot;&quot;</span></span><br><span class=\"line\">        m = self.coords[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">            m = <span class=\"built_in\">max</span>(m, self.coords[i][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> m</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minY</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;returns min y value&quot;&quot;&quot;</span></span><br><span class=\"line\">        m = self.coords[<span class=\"number\">0</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">            m = <span class=\"built_in\">min</span>(m, self.coords[i][<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> m</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxY</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;returns max y value&quot;&quot;&quot;</span></span><br><span class=\"line\">        m = self.coords[<span class=\"number\">0</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">            m = <span class=\"built_in\">max</span>(m, self.coords[i][<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> m</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rotateLeft</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;rotates shape to the left&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.pieceShape == Tetrominoe.SquareShape:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">        result = Shape()</span><br><span class=\"line\">        result.pieceShape = self.pieceShape</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">            result.setX(i, self.y(i))</span><br><span class=\"line\">            result.setY(i, -self.x(i))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rotateRight</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;rotates shape to the right&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.pieceShape == Tetrominoe.SquareShape:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">        result = Shape()</span><br><span class=\"line\">        result.pieceShape = self.pieceShape</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">            result.setX(i, -self.y(i))</span><br><span class=\"line\">            result.setY(i, self.x(i))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication([])</span><br><span class=\"line\">    tetris = Tetris()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>游戏被简化了一些，以便容易理解。游戏启动后立即开始。我们可以按 P 键来暂停游戏。空格键使方块立即掉落到底部。游戏以恒定速度运行，未实现加速功能。分数即移除行的数量。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.tboard = Board(self)</span><br><span class=\"line\">self.setCentralWidget(self.tboard)</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个 <code>Board</code> 类实例，并设置它为应用程序的中心小部件。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.statusbar = self.statusBar()</span><br><span class=\"line\">self.tboard.msg2Statusbar[<span class=\"built_in\">str</span>].connect(self.statusbar.showMessage)</span><br></pre></td></tr></table></figure>\n\n<p>我们创建一个状态栏用于显示信息。我们将显示三种可能的消息：已移除的行数、暂停消息或游戏结束消息。<code>msg2Statusbar</code> 是在 <code>Board</code> 类中实现的自定义信号。<code>showMessage()</code> 是内置方法，用于在状态栏显示消息。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.tboard.start()</span><br></pre></td></tr></table></figure>\n\n<p>本行初始化游戏。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Board</span>(<span class=\"title class_ inherited__\">QFrame</span>):</span><br><span class=\"line\">    msg2Statusbar = pyqtSignal(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>用 <code>pyqtSignal</code> 创建一个自定义信号。<code>msg2Statusbar</code> 是一个信号，当我们想将消息或分数写入状态栏时被发出。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">BoardWidth = <span class=\"number\">10</span></span><br><span class=\"line\">BoardHeight = <span class=\"number\">22</span></span><br><span class=\"line\">Speed = <span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n\n<p>这些是 <code>Board</code> 类变量。<code>BoardWidth</code> 和 <code>BoardHeight</code> 定义了棋盘中方格的尺寸。<code>Speed</code> 定义了游戏速度。每 300ms 开始一个新的游戏循环。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">self.curX = <span class=\"number\">0</span></span><br><span class=\"line\">self.curY = <span class=\"number\">0</span></span><br><span class=\"line\">self.numLinesRemoved = <span class=\"number\">0</span></span><br><span class=\"line\">self.board = []</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>initBoard()</code> 方法中我们初始化一些重要变量。<code>self.board</code> 变量是数字 0 到 7 的数组。它代表了各种形状的位置和棋盘上的剩余部分。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">shapeAt</span>(<span class=\"params\">self, x, y</span>):</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;determines shape at the board position&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.board[(y * Board.BoardWidth) + x]</span><br></pre></td></tr></table></figure>\n\n<p><code>shapeAt()</code> 方法明确了给定方块的形状。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">squareWidth</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;returns the width of one square&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.contentsRect().width() // Board.BoardWidth</span><br></pre></td></tr></table></figure>\n\n<p>棋盘可以动态调整大小。因此块的大小可能变化。<code>squareWidth()</code> 方法计算单个方块的宽度并返回之，单位为像素。<code>Board.BoardWidth</code> 是棋盘尺寸，单位为块。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pause</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;pauses game&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.isStarted:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    self.isPaused = <span class=\"keyword\">not</span> self.isPaused</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.isPaused:</span><br><span class=\"line\">        self.timer.stop()</span><br><span class=\"line\">        self.msg2Statusbar.emit(<span class=\"string\">&quot;paused&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        self.timer.start(Board.Speed, self)</span><br><span class=\"line\">        self.msg2Statusbar.emit(<span class=\"built_in\">str</span>(self.numLinesRemoved))</span><br><span class=\"line\"></span><br><span class=\"line\">    self.update()</span><br></pre></td></tr></table></figure>\n\n<p><code>pause()</code> 方法可以暂停游戏。它停止计时器，并显示消息到状态栏。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">paintEvent</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;paints all shapes of the game&quot;&quot;&quot;</span></span><br><span class=\"line\">    painter = QPainter(self)</span><br><span class=\"line\">    rect = self.contentsRect()</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>绘制发生在 <code>paintEvent()</code> 方法中。<code>QPainter</code> 负责 PyQt6 中所有低等级绘制。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardHeight):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardWidth):</span><br><span class=\"line\">        shape = self.shapeAt(j, Board.BoardHeight - i - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> shape != Tetrominoe.NoShape:</span><br><span class=\"line\">            self.drawSquare(</span><br><span class=\"line\">                painter,</span><br><span class=\"line\">                rect.left() + j * self.squareWidth(),</span><br><span class=\"line\">                boardTop + i * self.squareHeight(),</span><br><span class=\"line\">                shape,</span><br><span class=\"line\">            )</span><br></pre></td></tr></table></figure>\n\n<p>游戏的绘制分为两步。第一步，我们绘制所有形状，或形状沉入棋盘下的剩余部分。所有形状都记在 <code>self.board</code> 列表中。可通过 <code>shaptAt()</code> 方法访问该变量。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> self.curPiece.shape() != Tetrominoe.NoShape:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        x = self.curX + self.curPiece.x(i)</span><br><span class=\"line\">        y = self.curY - self.curPiece.y(i)</span><br><span class=\"line\">        self.drawSquare(painter, rect.left() + x * self.squareWidth(),</span><br><span class=\"line\">            boardTop + (Board.BoardHeight - y - <span class=\"number\">1</span>) * self.squareHeight(),</span><br><span class=\"line\">            self.curPiece.shape())</span><br></pre></td></tr></table></figure>\n\n<p>下一步，是绘制实际要落下的块。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">elif</span> key == Qt.Key.Key_Right.value:</span><br><span class=\"line\">    self.tryMove(self.curPiece, self.curX + <span class=\"number\">1</span>, self.curY)</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>keyPressEvent()</code> 方法中，我们检查哪个键被按下。如果按下了右箭头键，我们尝试将块向右移动一格。说尝试，是因为块可能无法移动。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">elif</span> key == Qt.Key.Key_Up.value:</span><br><span class=\"line\">    self.tryMove(self.curPiece.rotateLeft(), self.curX, self.curY)</span><br></pre></td></tr></table></figure>\n\n<p>上箭头键将向左旋转这个正在落下的块。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">elif</span> key == Qt.Key.Key_Space.value:</span><br><span class=\"line\">    self.dropDown()</span><br></pre></td></tr></table></figure>\n\n<p>空格键将使这个块立即掉落到底部。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">elif</span> key == Qt.Key.Key_D.value:</span><br><span class=\"line\">    self.oneLineDown()</span><br></pre></td></tr></table></figure>\n\n<p>按下 D 键，块将下降一格。这可以让块落下得更快一点儿。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">timerEvent</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;handles timer event&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event.timerId() == self.timer.timerId():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.isWaitingAfterLine:</span><br><span class=\"line\">            self.isWaitingAfterLine = <span class=\"literal\">False</span></span><br><span class=\"line\">            self.newPiece()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.oneLineDown()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Board, self).timerEvent(event)</span><br></pre></td></tr></table></figure>\n\n<p>在计时器事件中，我们要么在一个块到达底部后创建一个新棋子，要么在一个块到达底部后下降一行。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">clearBoard</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;clears shapes from the board&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardHeight * Board.BoardWidth):</span><br><span class=\"line\">        self.board.append(Tetrominoe.NoShape)</span><br></pre></td></tr></table></figure>\n\n<p><code>clearBoard()</code> 方法通过设置 <code>Tetrominoe.NoShape</code> 来清除棋盘的每个格子。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">removeFullLines</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;removes all full lines from the board&quot;&quot;&quot;</span></span><br><span class=\"line\">    numFullLines = <span class=\"number\">0</span></span><br><span class=\"line\">    rowsToRemove = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardHeight):</span><br><span class=\"line\">        n = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardWidth):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.shapeAt(j, i) == Tetrominoe.NoShape:</span><br><span class=\"line\">                n = n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">10</span>:</span><br><span class=\"line\">            rowsToRemove.append(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    rowsToRemove.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> rowsToRemove:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m, Board.BoardHeight):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Board.BoardWidth):</span><br><span class=\"line\">                    self.setShapeAt(l, k, self.shapeAt(l, k + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    numFullLines = numFullLines + <span class=\"built_in\">len</span>(rowsToRemove)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>如果块到达了底部，我们就调用 <code>removeFullLines()</code> 方法。我们要找到并移除所有已经满了的行。我们的做法是将当前要删除的满行之上的所有行，向下移动一行。注意我们颠倒了删除顺序，否则它可能在本例中无法工作。在本示例中，我们使用朴素重力。这意味着块可能浮空。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">newPiece</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;creates a new shape&quot;&quot;&quot;</span></span><br><span class=\"line\">    self.curPiece = Shape()</span><br><span class=\"line\">    self.curPiece.setRandomShape()</span><br><span class=\"line\">    self.curX = Board.BoardWidth // <span class=\"number\">2</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    self.curY = Board.BoardHeight - <span class=\"number\">1</span> + self.curPiece.minY()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.tryMove(self.curPiece, self.curX, self.curY):</span><br><span class=\"line\">        self.curPiece.setShape(Tetrominoe.NoShape)</span><br><span class=\"line\">        self.timer.stop()</span><br><span class=\"line\">        self.isStarted = <span class=\"literal\">False</span></span><br><span class=\"line\">        self.msg2Statusbar.emit(<span class=\"string\">&quot;Game over&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>newPiece()</code> 方法随机创建新的块。如果块无法回到初始位置，则游戏结束。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tryMove</span>(<span class=\"params\">self, newPiece, newX, newY</span>):</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;tries to move a shape&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        x = newX + newPiece.x(i)</span><br><span class=\"line\">        y = newY - newPiece.y(i)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> x &gt;= Board.BoardWidth <span class=\"keyword\">or</span> y &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> y &gt;= Board.BoardHeight:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.shapeAt(x, y) != Tetrominoe.NoShape:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    self.curPiece = newPiece</span><br><span class=\"line\">    self.curX = newX</span><br><span class=\"line\">    self.curY = newY</span><br><span class=\"line\">    self.update()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>tryMove()</code> 方法中，我们尝试移动我们的形状。如果该形状位于棋盘边缘或与其它块相邻，则返回 False。否则，我们将当前的下落块放置到新位置上。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tetrominoe</span>:</span><br><span class=\"line\">    NoShape = <span class=\"number\">0</span></span><br><span class=\"line\">    ZShape = <span class=\"number\">1</span></span><br><span class=\"line\">    SShape = <span class=\"number\">2</span></span><br><span class=\"line\">    LineShape = <span class=\"number\">3</span></span><br><span class=\"line\">    TShape = <span class=\"number\">4</span></span><br><span class=\"line\">    SquareShape = <span class=\"number\">5</span></span><br><span class=\"line\">    LShape = <span class=\"number\">6</span></span><br><span class=\"line\">    MirroredLShape = <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Tetrominoe</code> 类包含所有可能的形状名称。我们同时还有 <code>NoShape</code> 用于空形状。</p>\n<p><code>Shape</code> 类保存了关于俄罗斯方块的信息。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    coordsTable = (</span><br><span class=\"line\">        ((<span class=\"number\">0</span>, <span class=\"number\">0</span>),     (<span class=\"number\">0</span>, <span class=\"number\">0</span>),     (<span class=\"number\">0</span>, <span class=\"number\">0</span>),     (<span class=\"number\">0</span>, <span class=\"number\">0</span>)),</span><br><span class=\"line\">        ((<span class=\"number\">0</span>, -<span class=\"number\">1</span>),    (<span class=\"number\">0</span>, <span class=\"number\">0</span>),     (-<span class=\"number\">1</span>, <span class=\"number\">0</span>),    (-<span class=\"number\">1</span>, <span class=\"number\">1</span>)),</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    )</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><code>coordsTable</code> 元组保存我们的俄罗斯方块的所有可能的坐标值。这是一个模板，所有块都从中获取自己的坐标。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.coords = [[<span class=\"number\">0</span>,<span class=\"number\">0</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>)]</span><br></pre></td></tr></table></figure>\n\n<p>在创建时，我们创建一个空坐标列表。该列表用于保存俄罗斯方块的坐标。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/coordinates.png?ezimgfmt=rs:272x230/rscb1/ng:webp/ngcb1\" alt=\"Coordinates\" loading=\"lazy\"><br>Figure: Coordinates</p>\n<p>上面的图像将有助于更多地理解坐标值。例如，元组(0，-1)，(0,0)，(-1,0)，(-1，-1)表示 z 形。该图说明了形状。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rotateLeft</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;rotates shape to the left&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.pieceShape == Tetrominoe.SquareShape:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    result = Shape()</span><br><span class=\"line\">    result.pieceShape = self.pieceShape</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        result.setX(i, self.y(i))</span><br><span class=\"line\">        result.setY(i, -self.x(i))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<p><code>rotateLeft()</code> 方法的作用是向左旋转一个块。正方形不需要旋转。因此我们简单地返回对当前对象的引用。新创建的块的坐标将设置为旋转块的坐标。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/tetris.png?ezimgfmt=rs:182x406/rscb1/ng:webp/ngcb1\" alt=\"Tetris\" loading=\"lazy\"><br>Figure: Tetris</p>\n<p>这就是 PyQt6 中的俄罗斯方块游戏。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni90ZXRyaXMv\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/customwidgets\">上一章</a></p>\n"},{"url":"/translation/zt-pyqt6/widgets.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni93aWRnZXRzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/dialogs\">上一章</a> <a href=\"/translation/zt-pyqt6/widgets2\">下一章</a></p>\n<h1 id=\"PyQt6-小部件-I\"><a href=\"#PyQt6-小部件-I\" class=\"headerlink\" title=\"PyQt6 小部件 I\"></a>PyQt6 小部件 I</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-26</em></p>\n</blockquote>\n<p>小部件是应用程序的基础模块。PyQt6 拥有许多各种各样的小部件，包括按钮、复选框、滑块或列表框。在教程的这一部分，我们描述了几种实用的小部件：<code>QCheckBox</code>、切换模式的 <code>QPushButton</code>、<code>QSlider</code>、<code>QProgressBar</code> 和 <code>QCalendarWidget</code>。</p>\n<h2 id=\"PyQt6-QCheckBox-复选框\"><a href=\"#PyQt6-QCheckBox-复选框\" class=\"headerlink\" title=\"PyQt6 QCheckBox 复选框\"></a>PyQt6 QCheckBox 复选框</h2><p><code>QCheckBox</code> 是一种小部件，拥有两种状态：开和关。它是一个带有方框的标签。复选框通常用于表示应用程序中可以启用或禁用的特性。</p>\n<figure class=\"highlight py\"><figcaption><span>check_box.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, a QCheckBox widget</span></span><br><span class=\"line\"><span class=\"string\">is used to toggle the title of a window.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> QWidget, QCheckBox, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        cb = QCheckBox(<span class=\"string\">&#x27;Show title&#x27;</span>, self)</span><br><span class=\"line\">        cb.move(<span class=\"number\">20</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">        cb.toggle()</span><br><span class=\"line\">        cb.stateChanged.connect(self.changeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;QCheckBox&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">changeTitle</span>(<span class=\"params\">self, state</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> state == Qt.CheckState.Checked.value:</span><br><span class=\"line\">            self.setWindowTitle(<span class=\"string\">&#x27;QCheckBox&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.setWindowTitle(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>我们创建了一个复选框，用于切换窗口标题。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">cb = QCheckBox(<span class=\"string\">&#x27;Show title&#x27;</span>, self)</span><br></pre></td></tr></table></figure>\n\n<p>这是 <code>QCheckBox</code> 的构造函数。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">cb.toggle()</span><br></pre></td></tr></table></figure>\n\n<p>我们已经设置了窗口标题，同样也勾选了复选框。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">cb.stateChanged.connect(self.changeTitle)</span><br></pre></td></tr></table></figure>\n\n<p>我们将用户定义的 <code>changeTitle()</code> 方法连接到 <code>stateChanged</code> 信号上。<code>changeTitle()</code> 方法的作用是切换窗口标题。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> state == Qt.CheckState.Checked.value:</span><br><span class=\"line\">    self.setWindowTitle(<span class=\"string\">&#x27;QCheckBox&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    self.setWindowTitle(<span class=\"string\">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>小部件状态在 <code>changeTitle()</code> 方法中赋予到 <code>state</code> 变量上。如果小部件被选中，我们将设置窗口的标题。否则，设置窗口标题为空内容。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/qcheckbox.png?ezimgfmt=rs:252x176/rscb1/ng:webp/ngcb1\" alt=\"QCheckBox\" loading=\"lazy\"><br>Figure: QCheckBox</p>\n<h2 id=\"切换按钮\"><a href=\"#切换按钮\" class=\"headerlink\" title=\"切换按钮\"></a>切换按钮</h2><p>切换按钮是特殊模式的 <code>QPushButton</code>。它是拥有两种状态的按钮：按下和未按下。我们通过点击它来切换这两种状态。</p>\n<figure class=\"highlight py\"><figcaption><span>toggle_button.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we create three toggle buttons.</span></span><br><span class=\"line\"><span class=\"string\">They control the background color of a QFrame.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QPushButton,</span><br><span class=\"line\">        QFrame, QApplication)</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QColor</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.col = QColor(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        redb = QPushButton(<span class=\"string\">&#x27;Red&#x27;</span>, self)</span><br><span class=\"line\">        redb.setCheckable(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        redb.move(<span class=\"number\">10</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        redb.clicked[<span class=\"built_in\">bool</span>].connect(self.setColor)</span><br><span class=\"line\"></span><br><span class=\"line\">        greenb = QPushButton(<span class=\"string\">&#x27;Green&#x27;</span>, self)</span><br><span class=\"line\">        greenb.setCheckable(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        greenb.move(<span class=\"number\">10</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        greenb.clicked[<span class=\"built_in\">bool</span>].connect(self.setColor)</span><br><span class=\"line\"></span><br><span class=\"line\">        blueb = QPushButton(<span class=\"string\">&#x27;Blue&#x27;</span>, self)</span><br><span class=\"line\">        blueb.setCheckable(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        blueb.move(<span class=\"number\">10</span>, <span class=\"number\">110</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        blueb.clicked[<span class=\"built_in\">bool</span>].connect(self.setColor)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.square = QFrame(self)</span><br><span class=\"line\">        self.square.setGeometry(<span class=\"number\">150</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">        self.square.setStyleSheet(<span class=\"string\">&quot;QWidget &#123; background-color: %s &#125;&quot;</span> %</span><br><span class=\"line\">                                  self.col.name())</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Toggle button&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setColor</span>(<span class=\"params\">self, pressed</span>):</span><br><span class=\"line\">        source = self.sender()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> pressed:</span><br><span class=\"line\">            val = <span class=\"number\">255</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            val = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> source.text() == <span class=\"string\">&quot;Red&quot;</span>:</span><br><span class=\"line\">            self.col.setRed(val)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> source.text() == <span class=\"string\">&quot;Green&quot;</span>:</span><br><span class=\"line\">            self.col.setGreen(val)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.col.setBlue(val)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.square.setStyleSheet(<span class=\"string\">&quot;QFrame &#123; background-color: %s &#125;&quot;</span> %</span><br><span class=\"line\">                                  self.col.name())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>在本例中，我们创建了三个切换按钮和一个 <code>QFrame</code>。我们设置它的背景色为黑色。切换按钮用于切换色值的红、绿、蓝部分。背景色取决于按下了哪些按钮。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.col = QColor(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这是初始的色值：黑色。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">redb = QPushButton(<span class=\"string\">&#x27;Red&#x27;</span>, self)</span><br><span class=\"line\">redb.setCheckable(<span class=\"literal\">True</span>)</span><br><span class=\"line\">redb.move(<span class=\"number\">10</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>要创建切换按钮，我们先创建 <code>QPushButton</code> 并通过 <code>setCheckable()</code> 方法使它可以被切换。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">redb.clicked[<span class=\"built_in\">bool</span>].connect(self.setColor)</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>clicked</code> 信号连接到用户定义方法上。我们使用的 <code>clicked</code> 信号泛型为布尔值</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">source = self.sender()</span><br></pre></td></tr></table></figure>\n\n<p>获取被切换的按钮。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> source.text() == <span class=\"string\">&quot;Red&quot;</span>:</span><br><span class=\"line\">    self.col.setRed(val)</span><br></pre></td></tr></table></figure>\n\n<p>若它是红色按钮，则据此更新颜色的红色部分。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.square.setStyleSheet(<span class=\"string\">&quot;QFrame &#123; background-color: %s &#125;&quot;</span> %</span><br><span class=\"line\">    self.col.name())</span><br></pre></td></tr></table></figure>\n\n<p>使用样式表来更改背景色。使用 <code>setStyleSheet()</code> 方法更新样式表。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/togglebutton.png?ezimgfmt=rs:282x196/rscb1/ng:webp/ngcb1\" alt=\"Toggle button\" loading=\"lazy\"><br>Figure: Toggle button</p>\n<h2 id=\"PyQt6-QSlider-滑块\"><a href=\"#PyQt6-QSlider-滑块\" class=\"headerlink\" title=\"PyQt6 QSlider 滑块\"></a>PyQt6 QSlider 滑块</h2><p><code>QSlider</code> 是具有简单游标的小部件。这个游标可以前后推动。这样就可以为特定任务选择一个值。有时使用滑块比直接输入数字或旋转框更加自然。</p>\n<p>在本例中，我们显示一个滑块和一个标签。标签显示一幅图像。滑块控制标签。</p>\n<figure class=\"highlight py\"><figcaption><span>slider.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example shows a QSlider widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QSlider, QLabel, QApplication)</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QPixmap</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        sld = QSlider(Qt.Orientation.Horizontal, self)</span><br><span class=\"line\">        sld.setFocusPolicy(Qt.FocusPolicy.NoFocus)</span><br><span class=\"line\">        sld.setGeometry(<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">200</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">        sld.valueChanged[<span class=\"built_in\">int</span>].connect(self.changeValue)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.label = QLabel(self)</span><br><span class=\"line\">        self.label.setPixmap(QPixmap(<span class=\"string\">&#x27;mute.png&#x27;</span>))</span><br><span class=\"line\">        self.label.setGeometry(<span class=\"number\">250</span>, <span class=\"number\">40</span>, <span class=\"number\">80</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;QSlider&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">changeValue</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value == <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.label.setPixmap(QPixmap(<span class=\"string\">&#x27;mute.png&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"number\">0</span> &lt; value &lt;= <span class=\"number\">30</span>:</span><br><span class=\"line\">            self.label.setPixmap(QPixmap(<span class=\"string\">&#x27;min.png&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"number\">30</span> &lt; value &lt; <span class=\"number\">80</span>:</span><br><span class=\"line\">            self.label.setPixmap(QPixmap(<span class=\"string\">&#x27;med.png&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.label.setPixmap(QPixmap(<span class=\"string\">&#x27;max.png&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例模拟了音量控制。通过拖动滑块上的游标，我们可以改变标签上的图片。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">sld = QSlider(Qt.Orientation.Horizontal, self)</span><br></pre></td></tr></table></figure>\n\n<p>此处创建一个水平的 <code>QSlider</code>。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.label = QLabel(self)</span><br><span class=\"line\">self.label.setPixmap(QPixmap(<span class=\"string\">&#x27;mute.png&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>创建 <code>QLabel</code> 小部件，并设置初始图像为静音图片。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">sld.valueChanged[<span class=\"built_in\">int</span>].connect(self.changeValue)</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>valueChanged</code> 信号连接到用户定义的 <code>changeValue()</code> 方法上。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> value == <span class=\"number\">0</span>:</span><br><span class=\"line\">    self.label.setPixmap(QPixmap(<span class=\"string\">&#x27;mute.png&#x27;</span>))</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>基于滑块的值，我们设置标签上的图片。在上面的代码中，我们在滑块值为零时，设置使用 <code>mute.png</code> 图像。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/qslider.png?ezimgfmt=rs:282x196/rscb1/ng:webp/ngcb1\" alt=\"QSlider widget\" loading=\"lazy\"><br>Figure: QSlider widget</p>\n<h2 id=\"PyQt6-QProgressBar-进度条\"><a href=\"#PyQt6-QProgressBar-进度条\" class=\"headerlink\" title=\"PyQt6 QProgressBar 进度条\"></a>PyQt6 QProgressBar 进度条</h2><p>进度条是处理冗长任务时所使用的小部件。它自带动画，以便用户知道任务进度。PyQt6 工具包中的 <code>QProgressBar</code> 小部件提供水平和垂直的进度条。程序员可以设置进度条的最大值和最小值。默认值是 0 和 99。</p>\n<figure class=\"highlight py\"><figcaption><span>progressbar.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example shows a QProgressBar widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QProgressBar, QPushButton, QApplication)</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QBasicTimer</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.pbar = QProgressBar(self)</span><br><span class=\"line\">        self.pbar.setGeometry(<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">200</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.btn = QPushButton(<span class=\"string\">&#x27;Start&#x27;</span>, self)</span><br><span class=\"line\">        self.btn.move(<span class=\"number\">40</span>, <span class=\"number\">80</span>)</span><br><span class=\"line\">        self.btn.clicked.connect(self.doAction)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.timer = QBasicTimer()</span><br><span class=\"line\">        self.step = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">280</span>, <span class=\"number\">170</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;QProgressBar&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">timerEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.step &gt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">            self.timer.stop()</span><br><span class=\"line\">            self.btn.setText(<span class=\"string\">&#x27;Finished&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.step = self.step + <span class=\"number\">1</span></span><br><span class=\"line\">        self.pbar.setValue(self.step)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">doAction</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.timer.isActive():</span><br><span class=\"line\">            self.timer.stop()</span><br><span class=\"line\">            self.btn.setText(<span class=\"string\">&#x27;Start&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.timer.start(<span class=\"number\">100</span>, self)</span><br><span class=\"line\">            self.btn.setText(<span class=\"string\">&#x27;Stop&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>在本例中，我们有一个水平进度条和一个按钮。按钮用于开始和暂停进度长。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.pbar = QProgressBar(self)</span><br></pre></td></tr></table></figure>\n\n<p>这是 <code>QProgressBar</code> 构造函数。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.timer = QBasicTimer()</span><br></pre></td></tr></table></figure>\n\n<p>要激活进度条，还需要使用计时器对象。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.timer.start(<span class=\"number\">100</span>, self)</span><br></pre></td></tr></table></figure>\n\n<p>要启动计时器事件，我们调用它的 <code>start()</code> 方法。此方法有两个参数：超时时长和接收事件的对象。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">timerEvent</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.step &gt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">        self.timer.stop()</span><br><span class=\"line\">        self.btn.setText(<span class=\"string\">&#x27;Finished&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    self.step = self.step + <span class=\"number\">1</span></span><br><span class=\"line\">    self.pbar.setValue(self.step)</span><br></pre></td></tr></table></figure>\n\n<p>每个 <code>QObject</code> 和它的子孙都有 <code>timerEvent</code> 事件处理器。为了对计时器事件作出反应，我们要重新实现事件处理器。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">doAction</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.timer.isActive():</span><br><span class=\"line\">        self.timer.stop()</span><br><span class=\"line\">        self.btn.setText(<span class=\"string\">&#x27;Start&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        self.timer.start(<span class=\"number\">100</span>, self)</span><br><span class=\"line\">        self.btn.setText(<span class=\"string\">&#x27;Stop&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>doAction()</code> 方法中，我们开始和停止计时器。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/qprogressbar.png?ezimgfmt=rs:282x196/rscb1/ng:webp/ngcb1\" alt=\"QProgressBar\" loading=\"lazy\"><br>Figure: QProgressBar</p>\n<h2 id=\"PyQt6-QCalendarWidget-日历小部件\"><a href=\"#PyQt6-QCalendarWidget-日历小部件\" class=\"headerlink\" title=\"PyQt6 QCalendarWidget 日历小部件\"></a>PyQt6 QCalendarWidget 日历小部件</h2><p><code>QCalendarWidget</code> 提供基于月份的日历小部件。它允许用户用一种简单直观的方法选择日期。</p>\n<figure class=\"highlight py\"><figcaption><span>calendar.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example shows a QCalendarWidget widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QCalendarWidget, QLabel, QApplication, QVBoxLayout)</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> QDate</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        vbox = QVBoxLayout(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        cal = QCalendarWidget(self)</span><br><span class=\"line\">        cal.setGridVisible(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        cal.clicked[QDate].connect(self.showDate)</span><br><span class=\"line\"></span><br><span class=\"line\">        vbox.addWidget(cal)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.lbl = QLabel(self)</span><br><span class=\"line\">        date = cal.selectedDate()</span><br><span class=\"line\">        self.lbl.setText(date.toString())</span><br><span class=\"line\"></span><br><span class=\"line\">        vbox.addWidget(self.lbl)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setLayout(vbox)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">300</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Calendar&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">showDate</span>(<span class=\"params\">self, date</span>):</span><br><span class=\"line\">        self.lbl.setText(date.toString())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例有一个日历小部件和一个标签小部件。当前选中日期将显示在标签小部件上。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">cal = QCalendarWidget(self)</span><br></pre></td></tr></table></figure>\n\n<p>创建 <code>QCalendarWidget</code> 实例。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">cal.clicked[QDate].connect(self.showDate)</span><br></pre></td></tr></table></figure>\n\n<p>若从小部件中选中了日期，<code>clicked[QDate]</code> 信号将被发出。我们将这个信号连接到用户定义的 <code>showDate()</code> 方法上。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">showDate</span>(<span class=\"params\">self, date</span>):</span><br><span class=\"line\">    self.lbl.setText(date.toString())</span><br></pre></td></tr></table></figure>\n\n<p>我们通过调用 <code>seletedDate()</code> 方法来检索选定的日期。然后将日期对象转换为字符串，并设置到标签小部件上。</p>\n<p>在 PyQt6 教程的这一部分，我们介绍了以下小部件：<code>QCheckBox</code>、切换模式的 <code>QPushButton</code>、<code>QSlider</code>、<code>QProgress</code> 和 <code>QCalendarWidget</code>。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni93aWRnZXRzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/dialogs\">上一章</a> <a href=\"/translation/zt-pyqt6/widgets2\">下一章</a></p>\n"},{"url":"/translation/zt-pyqt6/widgets2.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni93aWRnZXRzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/widgets\">上一章</a> <a href=\"/translation/zt-pyqt6/dragdrop\">下一章</a></p>\n<h1 id=\"PyQt6-小部件-II\"><a href=\"#PyQt6-小部件-II\" class=\"headerlink\" title=\"PyQt6 小部件 II\"></a>PyQt6 小部件 II</h1><blockquote>\n<p><em>原文改于 2023-01-10</em><br><em>英译中于 2023-04-26</em></p>\n</blockquote>\n<p>在本章中，我们继续介绍 PyQt6 小部件。将包含 <code>QPixmap</code>、<code>QLineEdit</code>、<code>QSplitter</code> 和 <code>QComboBox</code>。</p>\n<h2 id=\"PyQt6-QPixmap-像素图\"><a href=\"#PyQt6-QPixmap-像素图\" class=\"headerlink\" title=\"PyQt6 QPixmap 像素图\"></a>PyQt6 QPixmap 像素图</h2><p><code>QPixmap</code> 是用于处理图像的小部件之一。它对在屏幕图像显示进行了优化。在代码示例中，我们将使用 <code>QPixmap</code> 在窗口上显示图像。</p>\n<figure class=\"highlight py\"><figcaption><span>pixmap.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we display an image</span></span><br><span class=\"line\"><span class=\"string\">on the window.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QHBoxLayout, QLabel, QApplication)</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtGui <span class=\"keyword\">import</span> QPixmap</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        hbox = QHBoxLayout(self)</span><br><span class=\"line\">        pixmap = QPixmap(<span class=\"string\">&#x27;sid.jpg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lbl = QLabel(self)</span><br><span class=\"line\">        lbl.setPixmap(pixmap)</span><br><span class=\"line\"></span><br><span class=\"line\">        hbox.addWidget(lbl)</span><br><span class=\"line\">        self.setLayout(hbox)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.move(<span class=\"number\">300</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Sid&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例中，我们在窗口上显示了一幅图像。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">pixmap = QPixmap(<span class=\"string\">&#x27;sid.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>创建 <code>QPixmap</code> 对象，它将文件名作为参数。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">lbl = QLabel(self)</span><br><span class=\"line\">lbl.setPixmap(pixmap)</span><br></pre></td></tr></table></figure>\n\n<p>将像素图放入 <code>QLabel</code> 小部件中。</p>\n<h2 id=\"PyQt6-QLineEdit-单行文本框\"><a href=\"#PyQt6-QLineEdit-单行文本框\" class=\"headerlink\" title=\"PyQt6 QLineEdit 单行文本框\"></a>PyQt6 QLineEdit 单行文本框</h2><p><code>QLineEdit</code> 允许用户输入或编辑单行纯文本的小部件。这个小部件提供撤销、重做、剪切、粘贴和拖放功能。</p>\n<figure class=\"highlight py\"><figcaption><span>line_edit.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example shows text which</span></span><br><span class=\"line\"><span class=\"string\">is entered in a QLineEdit</span></span><br><span class=\"line\"><span class=\"string\">in a QLabel widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QLabel, QLineEdit, QApplication)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.lbl = QLabel(self)</span><br><span class=\"line\">        qle = QLineEdit(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        qle.move(<span class=\"number\">60</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">        self.lbl.move(<span class=\"number\">60</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        qle.textChanged[<span class=\"built_in\">str</span>].connect(self.onChanged)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">250</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;QLineEdit&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onChanged</span>(<span class=\"params\">self, text</span>):</span><br><span class=\"line\">        self.lbl.setText(text)</span><br><span class=\"line\">        self.lbl.adjustSize()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本例显示了一个单行文本框和标签。我们在单行文本框中键入的文本将立即显示在标签中。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qle = QLineEdit(self)</span><br></pre></td></tr></table></figure>\n\n<p>创建 <code>QLineEdit</code> 小部件。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">qle.textChanged[<span class=\"built_in\">str</span>].connect(self.onChanged)</span><br></pre></td></tr></table></figure>\n\n<p>如果单行文本框中的文本改变了，我们调用 <code>onChanged()</code> 方法。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">onChanged</span>(<span class=\"params\">self, text</span>):</span><br><span class=\"line\">    self.lbl.setText(text)</span><br><span class=\"line\">    self.lbl.adjustSize()</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>onChnaged()</code> 方法中，我们将输入的文本设置到标签小部件上。我们调用 <code>adjustSize()</code> 方法来调整标签的尺寸以匹配文本长度。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/qlineedit.png?ezimgfmt=rs:282x196/rscb1/ng:webp/ngcb1\" alt=\"QLineEdit\" loading=\"lazy\"><br>Figure: QLineEdit</p>\n<h2 id=\"PyQt6-QSplitter-拆分器\"><a href=\"#PyQt6-QSplitter-拆分器\" class=\"headerlink\" title=\"PyQt6 QSplitter 拆分器\"></a>PyQt6 QSplitter 拆分器</h2><p><code>QSplitter</code> 让用户可以拖动子小部件之间的边界以控制它们的尺寸。在本示例中，我们显示了用两个拆分器来组织的三个 <code>QFrame</code> 小部件。</p>\n<figure class=\"highlight py\"><figcaption><span>splitter.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example shows</span></span><br><span class=\"line\"><span class=\"string\">how to use QSplitter widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QHBoxLayout, QFrame, QSplitter, QApplication)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        hbox = QHBoxLayout(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        topleft = QFrame(self)</span><br><span class=\"line\">        topleft.setFrameShape(QFrame.Shape.StyledPanel)</span><br><span class=\"line\"></span><br><span class=\"line\">        topright = QFrame(self)</span><br><span class=\"line\">        topright.setFrameShape(QFrame.Shape.StyledPanel)</span><br><span class=\"line\"></span><br><span class=\"line\">        bottom = QFrame(self)</span><br><span class=\"line\">        bottom.setFrameShape(QFrame.Shape.StyledPanel)</span><br><span class=\"line\"></span><br><span class=\"line\">        splitter1 = QSplitter(Qt.Orientations.Horizontal)</span><br><span class=\"line\">        splitter1.addWidget(topleft)</span><br><span class=\"line\">        splitter1.addWidget(topright)</span><br><span class=\"line\"></span><br><span class=\"line\">        splitter2 = QSplitter(Qt.Orientations.Vertical)</span><br><span class=\"line\">        splitter2.addWidget(splitter1)</span><br><span class=\"line\">        splitter2.addWidget(bottom)</span><br><span class=\"line\"></span><br><span class=\"line\">        hbox.addWidget(splitter2)</span><br><span class=\"line\">        self.setLayout(hbox)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">450</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;QSplitter&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>In our example, we have three frame widgets and two splitters. Note that under some themes, the splitters may not be visible very well.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">topleft = QFrame(self)</span><br><span class=\"line\">topleft.setFrameShape(QFrame.Shape.StyledPanel)</span><br></pre></td></tr></table></figure>\n\n<p>We use a styled frame in order to see the boundaries between the <code>QFrame</code> widgets.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">splitter1 = QSplitter(Qt.Orientations.Horizontal)</span><br><span class=\"line\">splitter1.addWidget(topleft)</span><br><span class=\"line\">splitter1.addWidget(topright)</span><br></pre></td></tr></table></figure>\n\n<p>We create a <code>QSplitter</code> widget and add two frames into it.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">splitter2 = QSplitter(Qt.Orientations.Vertical)</span><br><span class=\"line\">splitter2.addWidget(splitter1)</span><br></pre></td></tr></table></figure>\n\n<p>We can also add a splitter to another splitter widget.</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/qsplitter.png?ezimgfmt=rs:302x226/rscb1/ng:webp/ngcb1\" alt=\"QSplitter widget\" loading=\"lazy\"><br>Figure: QSplitter widget</p>\n<h2 id=\"PyQt6-QComboBox-下拉菜单\"><a href=\"#PyQt6-QComboBox-下拉菜单\" class=\"headerlink\" title=\"PyQt6 QComboBox 下拉菜单\"></a>PyQt6 QComboBox 下拉菜单</h2><p><code>QComboBox</code> 允许用户从选项列表中进行选择。</p>\n<figure class=\"highlight py\"><figcaption><span>combobox.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt6 tutorial</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example shows how to use</span></span><br><span class=\"line\"><span class=\"string\">a QComboBox widget.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt6.QtWidgets <span class=\"keyword\">import</span> (QWidget, QLabel,</span><br><span class=\"line\">        QComboBox, QApplication)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUI</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.lbl = QLabel(<span class=\"string\">&#x27;Ubuntu&#x27;</span>, self)</span><br><span class=\"line\"></span><br><span class=\"line\">        combo = QComboBox(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        combo.addItem(<span class=\"string\">&#x27;Ubuntu&#x27;</span>)</span><br><span class=\"line\">        combo.addItem(<span class=\"string\">&#x27;Mandriva&#x27;</span>)</span><br><span class=\"line\">        combo.addItem(<span class=\"string\">&#x27;Fedora&#x27;</span>)</span><br><span class=\"line\">        combo.addItem(<span class=\"string\">&#x27;Arch&#x27;</span>)</span><br><span class=\"line\">        combo.addItem(<span class=\"string\">&#x27;Gentoo&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        combo.move(<span class=\"number\">50</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\">        self.lbl.move(<span class=\"number\">50</span>, <span class=\"number\">150</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        combo.textActivated[<span class=\"built_in\">str</span>].connect(self.onActivated)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">450</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;QComboBox&#x27;</span>)</span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onActivated</span>(<span class=\"params\">self, text</span>):</span><br><span class=\"line\">        self.lbl.setText(text)</span><br><span class=\"line\">        self.lbl.adjustSize()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>本示例显示了一个 <code>QComboBox</code> 和一个 <code>QLabel</code>。其中下拉菜单包含五个选项。这些是 Linux 发行版的名称。标签上会显示从下拉菜单中选中的项。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">combo = QComboBox(self)</span><br><span class=\"line\"></span><br><span class=\"line\">combo.addItem(<span class=\"string\">&#x27;Ubuntu&#x27;</span>)</span><br><span class=\"line\">combo.addItem(<span class=\"string\">&#x27;Mandriva&#x27;</span>)</span><br><span class=\"line\">combo.addItem(<span class=\"string\">&#x27;Fedora&#x27;</span>)</span><br><span class=\"line\">combo.addItem(<span class=\"string\">&#x27;Arch&#x27;</span>)</span><br><span class=\"line\">combo.addItem(<span class=\"string\">&#x27;Gentoo&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们创建了 <code>QComboBox</code> 小部件，并带有五个选项。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">combo.textActivated[<span class=\"built_in\">str</span>].connect(self.onActivated)</span><br></pre></td></tr></table></figure>\n\n<p>选中项目后，我们调用 <code>onActivated()</code> 方法。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">onActivated</span>(<span class=\"params\">self, text</span>):</span><br><span class=\"line\">    self.lbl.setText(text)</span><br><span class=\"line\">    self.lbl.adjustSize()</span><br></pre></td></tr></table></figure>\n\n<p>在方法内，我们将选中项的文本设置到标签小部件上。同时调整了标签的尺寸。</p>\n<p><img src=\"https://zetcode.com/img/gui/pyqt6/qcombobox.png?ezimgfmt=rs:302x226/rscb1/ng:webp/ngcb1\" alt=\"QComboBox\" loading=\"lazy\"><br>Figure: QComboBox</p>\n<p>在 PyQt6 教程的这一部分中，我们介绍了 <code>QPixmap</code>, <code>QLineEdit</code>, <code>QSplitter</code> 和 <code>QComboBox</code>。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXRjb2RlLmNvbS9weXF0Ni93aWRnZXRzLw==\">原文<i class=\"fa fa-external-link-alt\"></i></span> <a href=\"/translation/zt-pyqt6\">目录</a> <a href=\"/translation/zt-pyqt6/widgets\">上一章</a> <a href=\"/translation/zt-pyqt6/dragdrop\">下一章</a></p>\n"}]